[
    {
        "ID": 0,
        "NUMBER": 1,
        "TITLE": "Two Sum",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p>\n    <p>Given an array of integers, return <b>indices</b> of the two numbers such that they add up to a specific target.\n    </p>\n\n    <p>You may assume that each input would have <b><i>exactly</i></b> one solution, and you may not use the <i>same</i>\n        element twice.</p>\n\n    <p>\n        <b>Example:</b><br>\n    </p>\n    <pre>Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[<b>0</b>] + nums[<b>1</b>] = 2 + 7 = 9,\nreturn [<b>0</b>, <b>1</b>].\n</pre>\n    <p></p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * Build a map between num and it&#39;s target</span>\n<span style=\"color: #408080; font-style: italic\">     * for each num in nums</span>\n<span style=\"color: #408080; font-style: italic\">     *  if num&#39;s target is in map</span>\n<span style=\"color: #408080; font-style: italic\">     *      return the indexes of this num and the index of the target in the map</span>\n<span style=\"color: #408080; font-style: italic\">     *  put index and target value in map</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * return [-1, -1]</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">twoSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> targetToIndex <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #408080; font-style: italic\">// If the diff from target is in the map</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>targetToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>targetToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]),</span> i<span style=\"color: #666666\">};</span>\n            <span style=\"color: #408080; font-style: italic\">// Otherwise put diff and index to the map</span>\n            targetToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{-1,</span> <span style=\"color: #666666\">-1};</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 1,
        "NUMBER": 7,
        "TITLE": "Reverse Integer",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Reverse digits of an integer.</p>\n\n    <p style=\"font-family:monospace\">\n        <b>Example1:</b> x =  123, return  321<br>\n        <b>Example2:</b> x = -123, return -321\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Have you thought about this?</b>\n\n        <p>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>\n\n        <p>If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.</p>\n\n        <p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>\n\n        <p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n\n    </div>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">&amp;&amp;</span> x <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">-10)</span> <span style=\"color: #008000; font-weight: bold\">return</span> x<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> absX <span style=\"color: #666666\">=</span> x <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> x <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-</span>x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span> longRes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>absX <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n            longRes <span style=\"color: #666666\">=</span> longRes<span style=\"color: #666666\">*10</span> <span style=\"color: #666666\">+</span> absX <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>longRes <span style=\"color: #666666\">&gt;</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">-</span>longRes <span style=\"color: #666666\">&lt;</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n            absX <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> x <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>longRes <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1*(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>longRes<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 2,
        "NUMBER": 9,
        "TITLE": "Palindrome Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Determine whether an integer is a palindrome. Do this without extra space.</p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Some hints:</b>\n\n        <p>Could negative integers be palindromes? (ie, -1)</p>\n\n        <p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>\n\n        <p>You could also try reversing an integer. However, if you have solved the problem \"Reverse Integer\", you know that the reversed integer might overflow. How would you handle such case?</p>\n\n        <p>There is a more generic way of solving this problem.</p>\n\n    </div><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPalindrome</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//negative numbers are not palindrome</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// find the most siginificant digit</span>\n        <span style=\"color: #B00040\">int</span> div <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">/</span> div <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">10)</span> <span style=\"color: #666666\">{</span>\n            div <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// stop till x is 0</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> x <span style=\"color: #666666\">/</span> div<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// left digit</span>\n            <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> x <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10;</span> <span style=\"color: #408080; font-style: italic\">// right digit</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">!=</span> right<span style=\"color: #666666\">)</span>\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// remove first and last digit</span>\n            x <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">%</span> div<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #408080; font-style: italic\">// reduce dividor</span>\n            div <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">100;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 3,
        "NUMBER": 13,
        "TITLE": "Roman to Integer",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a roman numeral, convert it to an integer.</p>\n\n    <p>Input is guaranteed to be within the range from 1 to 3999.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">romanToInt</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> romans <span style=\"color: #666666\">=</span> Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">asList</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;I&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;V&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;X&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;L&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;C&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;D&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;M&#39;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> numbers <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{1,</span> <span style=\"color: #666666\">5,</span> <span style=\"color: #666666\">10,</span> <span style=\"color: #666666\">50,</span> <span style=\"color: #666666\">100,</span> <span style=\"color: #666666\">500,</span> <span style=\"color: #666666\">1000};</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> numbers<span style=\"color: #666666\">[</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0))];</span>\n\n        <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// If cur char smaller than next</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">&gt;=</span> romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)))</span> <span style=\"color: #666666\">{</span>\n                result <span style=\"color: #666666\">+=</span> numbers<span style=\"color: #666666\">[</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">))];</span>\n                index<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                result <span style=\"color: #666666\">+=</span> numbers<span style=\"color: #666666\">[</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1))]</span>\n                        <span style=\"color: #666666\">-</span> numbers<span style=\"color: #666666\">[</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">))];</span>\n                index <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Deal with the last char. Need to check since we have index += 2</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n            result <span style=\"color: #666666\">+=</span> numbers<span style=\"color: #666666\">[</span>romans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">))];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 4,
        "NUMBER": 14,
        "TITLE": "Longest Common Prefix",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a function to find the longest common prefix string amongst an array of strings.\n</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">longestCommonPrefix</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> strs<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Check each char of first string</span>\n            <span style=\"color: #B00040\">int</span> strsInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>strsInd <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">[</span>strsInd<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    strs<span style=\"color: #666666\">[</span>strsInd<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> strs<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                strsInd<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #408080; font-style: italic\">// If all strings have the char</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>strsInd <span style=\"color: #666666\">==</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> strs<span style=\"color: #666666\">[0];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 5,
        "NUMBER": 20,
        "TITLE": "Valid Parentheses",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p>\n\n    <p>The brackets must close in the correct order, <code>\"()\"</code> and <code>\"()[]{}\"</code> are all valid but <code>\"(]\"</code> and <code>\"([)]\"</code> are not.</p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValid</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Deque<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;{&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;[&#39;</span><span style=\"color: #666666\">)</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;)&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;}&#39;</span> <span style=\"color: #666666\">&amp;&amp;(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;{&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;]&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;[&#39;</span><span style=\"color: #666666\">)){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 6,
        "NUMBER": 21,
        "TITLE": "Merge Two Sorted Lists",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">mergeTwoLists</span><span style=\"color: #666666\">(</span>ListNode l1<span style=\"color: #666666\">,</span> ListNode l2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode fakeHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(0);</span>\n        ListNode current <span style=\"color: #666666\">=</span> fakeHead<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> l2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>l2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;=</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">;</span>\n                current <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">;</span>\n                l2 <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">;</span>\n                current <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">;</span>\n                l1 <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 7,
        "NUMBER": 26,
        "TITLE": "Remove Duplicates from Sorted Array",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a sorted array, remove the duplicates in place such that each element appear only <i>once</i> and return the new length.</p>\n\n    <p>\n        Do not allocate extra space for another array, you must do this in place with constant memory.\n    </p>\n\n    <p>\n        For example,<br>\n        Given input array <i>nums</i> = <code>[1,1,2]</code>,\n    </p>\n    <p>\n        Your function should return length = <code>2</code>, with the first two elements of <i>nums</i> being <code>1</code> and <code>2</code> respectively. It doesn't matter what you leave beyond the new length.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">removeDuplicates</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> endIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> nums<span style=\"color: #666666\">[</span>endIndex<span style=\"color: #666666\">]){</span>\n                endIndex<span style=\"color: #666666\">++;</span>\n                nums<span style=\"color: #666666\">[</span>endIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> endIndex <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 8,
        "NUMBER": 27,
        "TITLE": "Remove Element",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array and a value, remove all instances of that value in place and return the new length.\n</p>\n\n    <p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>\n\n    <p>The order of elements can be changed. It doesn't matter what you leave beyond the new length.</p>\n\n    <p>\n        <b>Example:</b><br>\n        Given input array <i>nums</i> = <code>[3,2,2,3]</code>, <i>val</i> = <code>3</code>\n    </p>\n\n    <p>Your function should return length = 2, with the first two elements of <i>nums</i> being 2.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">removeElement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> val <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> firstIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> lastIndex <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>firstIndex <span style=\"color: #666666\">&lt;</span> lastIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                firstIndex<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>lastIndex<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>lastIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>lastIndex<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>lastIndex<span style=\"color: #666666\">];</span>\n            lastIndex<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> val <span style=\"color: #666666\">?</span> firstIndex <span style=\"color: #666666\">:</span> firstIndex <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 9,
        "NUMBER": 28,
        "TITLE": "Implement strStr()",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Implement strStr().\n</p>\n    <p>\n        Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">strStr</span><span style=\"color: #666666\">(</span>String haystack<span style=\"color: #666666\">,</span> String needle<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>needle <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> haystack <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> overlay <span style=\"color: #666666\">=</span> getOverlay<span style=\"color: #666666\">(</span>needle<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;=</span> haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)){</span>\n                    i <span style=\"color: #666666\">=</span> j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> i<span style=\"color: #666666\">+1</span> <span style=\"color: #666666\">:</span> i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">-</span>overlay<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">-1];</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                j<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> i<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Generate the prefix function for pattern itself</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">getOverlay</span><span style=\"color: #666666\">(</span>String pattern<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">-1];</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">?</span> index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 10,
        "NUMBER": 35,
        "TITLE": "Search Insert Position",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n    <p>You may assume no duplicates in the array.</p>\n\n    <p>\n        Here are few examples.<br>\n        <code>[1,3,5,6]</code>, 5 -> 2<br>\n        <code>[1,3,5,6]</code>, 2 -> 1<br>\n        <code>[1,3,5,6]</code>, 7 -> 4<br>\n        <code>[1,3,5,6]</code>, 0 -> 0\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">searchInsert</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> low <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> high <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">&lt;=</span> high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> low <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>high <span style=\"color: #666666\">-</span> low<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                high <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                low <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> low<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 11,
        "NUMBER": 38,
        "TITLE": "Count and Say",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>\n    <pre>1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n</pre>\n\n    <p>\n        <code>1</code> is read off as <code>\"one 1\"</code> or <code>11</code>.<br>\n        <code>11</code> is read off as <code>\"two 1s\"</code> or <code>21</code>.<br>\n        <code>21</code> is read off as <code>\"one 2</code>, then <code>one 1\"</code> or <code>1211</code>.<br>\n    </p>\n\n    <p>\n        Given an integer <i>n</i>, generate the <i>n</i><sup>th</sup> term of the count-and-say sequence.\n    </p>\n\n    <p>\n        Note: Each term of the sequence of integers will be represented as a string.\n    </p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>Input:</b> 1\n<b>Output:</b> \"1\"\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>Input:</b> 4\n<b>Output:</b> \"1211\"\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">countAndSay</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder curr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;1&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            StringBuilder prev <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">;</span>\n            curr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n            <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #B00040\">char</span> say <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0);</span>\n\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> len <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> say<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>say<span style=\"color: #666666\">);</span>\n                    count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                    say <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>say<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 12,
        "NUMBER": 53,
        "TITLE": "Maximum Subarray",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n</p>\n    <p>\n        For example, given the array <code>[-2,1,-3,4,-1,2,1,-5,4]</code>,<br>\n        the contiguous subarray <code>[4,-1,2,1]</code> has the largest sum = <code>6</code>.\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more practice.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>More practice:</b>\n\n        <p>If you have figured out the O(<i>n</i>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// DP solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxSubArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">,</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&gt;</span> max<span style=\"color: #666666\">)</span>\n                max <span style=\"color: #666666\">=</span> sum<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Divide and Conquer</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxSubArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> divide<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">divide</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> nums<span style=\"color: #666666\">[],</span> <span style=\"color: #B00040\">int</span> low<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">==</span> high<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>low<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">==</span> high <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>low<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>high<span style=\"color: #666666\">],</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>low<span style=\"color: #666666\">],</span> nums<span style=\"color: #666666\">[</span>high<span style=\"color: #666666\">]));</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> low <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>high <span style=\"color: #666666\">-</span> low<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #B00040\">int</span> lmax <span style=\"color: #666666\">=</span> divide<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> low<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #B00040\">int</span> rmax <span style=\"color: #666666\">=</span> divide<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> high<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> mmax <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> mmax<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> low<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            tmp <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tmp <span style=\"color: #666666\">&gt;</span> mmax<span style=\"color: #666666\">){</span>\n                mmax <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        tmp <span style=\"color: #666666\">=</span> mmax<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> high<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            tmp <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tmp <span style=\"color: #666666\">&gt;</span> mmax<span style=\"color: #666666\">){</span>\n                mmax <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>mmax<span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>lmax<span style=\"color: #666666\">,</span> rmax<span style=\"color: #666666\">));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 13,
        "NUMBER": 58,
        "TITLE": "Length of Last Word",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string <i>s</i> consists of upper/lower-case alphabets and empty space characters <code>' '</code>, return the length of last word in the string.</p>\n\n    <p>If the last word does not exist, return 0.</p>\n\n    <p><b>Note:</b> A word is defined as a character sequence consists of non-space characters only.</p>\n\n    <p>\n        For example, <br>\n        Given <i>s</i> = <code>\"Hello World\"</code>,<br>\n        return <code>5</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">lengthOfLastWord</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()==0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()-1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">&gt;=0</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">)</span>\n            len<span style=\"color: #666666\">--;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">&lt;0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>len<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">&gt;=0;</span> i<span style=\"color: #666666\">--){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">)</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 14,
        "NUMBER": 66,
        "TITLE": "Plus One",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a non-negative integer represented as a <b>non-empty</b> array of digits, plus one to the integer.</p>\n\n    <p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\n\n    <p>The digits are stored such that the most significant digit is at the head of the list.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">plusOne</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> digits<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>digits<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>digits<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> carry<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">10){</span>\n                digits<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> digits<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> carry<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> digits<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                digits<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> digits<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> carry <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">10;</span>\n                carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>digits<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">+1];</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 15,
        "NUMBER": 67,
        "TITLE": "Add Binary",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given two binary strings, return their sum (also a binary string).\n</p>\n\n    <p>\n        For example,<br>\n        a = <code>\"11\"</code><br>\n        b = <code>\"1\"</code><br>\n        Return <code>\"100\"</code>.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">addBinary</span><span style=\"color: #666666\">(</span>String a<span style=\"color: #666666\">,</span> String b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> aInd <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> bInd <span style=\"color: #666666\">=</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>aInd <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> bInd <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> carry<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>aInd <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>aInd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">)</span>\n                sum <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>bInd <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>bInd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">)</span>\n                sum <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(0,</span> sum <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2);</span>\n            carry <span style=\"color: #666666\">=</span> sum <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            aInd<span style=\"color: #666666\">--;</span>\n            bInd<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>carry <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 16,
        "NUMBER": 69,
        "TITLE": "Sqrt(x)",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement <code>int sqrt(int x)</code>.</p>\n\n    <p>Compute and return the square root of <i>x</i>.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">mySqrt</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">-</span>start<span style=\"color: #666666\">)/2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">/</span>mid <span style=\"color: #666666\">==</span> mid<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">/</span>mid <span style=\"color: #666666\">&lt;</span> mid<span style=\"color: #666666\">)</span>\n                end <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">-1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                start <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">+1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> end<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 6",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 17,
        "NUMBER": 70,
        "TITLE": "Climbing Stairs",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are climbing a stair case. It takes <i>n</i> steps to reach to the top.</p>\n\n    <p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n    </p>\n\n    <p><b>Note:</b> Given <i>n</i> will be a positive integer.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">climbStairs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> steps <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">2;</span>\n\n        steps<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        steps<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">){</span>\n            steps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> steps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">+</span> steps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-2];</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> steps<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 18,
        "NUMBER": 83,
        "TITLE": "Remove Duplicates from Sorted List",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a sorted linked list, delete all duplicates such that each element appear only <i>once</i>.\n</p>\n    <p>\n        For example,<br>\n        Given <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>\n        Given <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> *         val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> *         next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> *     }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">deleteDuplicates</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">){</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 19,
        "NUMBER": 88,
        "TITLE": "Merge Sorted Array",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given two sorted integer arrays <i>nums1</i> and <i>nums2</i>, merge <i>nums2</i> into <i>nums1</i> as one sorted array.</p>\n\n    <p>\n        <b>Note:</b><br>\n        You may assume that <i>nums1</i> has enough space (size that is greater or equal to <i>m</i> + <i>n</i>) to hold additional elements from <i>nums2</i>. The number of elements initialized in <i>nums1</i> and <i>nums2</i> are <i>m</i> and <i>n</i> respectively.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">+</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">-1){</span>\n            nums1<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">--]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">?</span> nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">--]</span> <span style=\"color: #666666\">:</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">--];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">-1){</span>\n            nums1<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">--]</span> <span style=\"color: #666666\">=</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">--];</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 20,
        "NUMBER": 100,
        "TITLE": "Same Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two binary trees, write a function to check if they are equal or not.\n</p>\n\n    <p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isSameTree</span><span style=\"color: #666666\">(</span>TreeNode p<span style=\"color: #666666\">,</span> TreeNode q<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> q <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> q <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> isSameTree<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #666666\">&amp;&amp;</span> isSameTree<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 21,
        "NUMBER": 101,
        "TITLE": "Symmetric Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\n\n    <p>\n        For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:\n    </p><pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n    <p></p>\n    <p>\n        But the following <code>[1,2,2,null,3,null,3]</code>  is not:<br>\n    </p><pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b><br>\n        Bonus points if you could solve it both recursively and iteratively.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isSymmetric</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> isSymmetric<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isSymmetric</span><span style=\"color: #666666\">(</span>TreeNode leftSub<span style=\"color: #666666\">,</span> TreeNode rightSub<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>leftSub <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> rightSub <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>leftSub <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> rightSub <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>leftSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> rightSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> isSymmetric<span style=\"color: #666666\">(</span>leftSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> rightSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> isSymmetric<span style=\"color: #666666\">(</span>leftSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> rightSub<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 22,
        "NUMBER": 104,
        "TITLE": "Maximum Depth of Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, find its maximum depth.</p>\n\n    <p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxDepth</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1+</span>maxDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1+</span>maxDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1+</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">),</span> maxDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 23,
        "NUMBER": 107,
        "TITLE": "Binary Tree Level Order Traversal II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>[3,9,20,null,null,15,7]</code>,<br>\n    </p><pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n    <p></p>\n    <p>\n        return its bottom-up level order traversal as:<br>\n    </p><pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">levelOrderBottom</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> curLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> nextLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        curLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        Deque<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> listStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>curLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>TreeNode n <span style=\"color: #666666\">:</span> curLevel<span style=\"color: #666666\">){</span>\n                curList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            listStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addFirst</span><span style=\"color: #666666\">(</span>curList<span style=\"color: #666666\">);</span>\n            curLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;(</span>nextLevel<span style=\"color: #666666\">);</span>\n            nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> l <span style=\"color: #666666\">:</span> listStack<span style=\"color: #666666\">){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 24,
        "NUMBER": 108,
        "TITLE": "Convert Sorted Array to Binary Search Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">sortedArrayToBST</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> startIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> endIndex <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> midIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>startIndex <span style=\"color: #666666\">+</span> endIndex<span style=\"color: #666666\">)/2;</span>\n\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>midIndex<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> arrayToBST<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> startIndex<span style=\"color: #666666\">,</span> midIndex<span style=\"color: #666666\">-1);</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> arrayToBST<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> midIndex<span style=\"color: #666666\">+1,</span> endIndex<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">arrayToBST</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">){</span>\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> end<span style=\"color: #666666\">)/2;</span>\n            root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> end<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n            root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> arrayToBST<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> mid<span style=\"color: #666666\">-1);</span>\n            root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> arrayToBST<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> mid<span style=\"color: #666666\">+1,</span> end<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 25,
        "NUMBER": 110,
        "TITLE": "Balanced Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, determine if it is height-balanced.\n</p>\n\n    <p>\n        For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <i>every</i> node never differ by more than 1.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isBalanced</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> leftHeight <span style=\"color: #666666\">=</span> treeHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> rightHeight <span style=\"color: #666666\">=</span> treeHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>leftHeight<span style=\"color: #666666\">-</span>rightHeight<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> isBalanced<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> isBalanced<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">treeHeight</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> treeHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> treeHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1+</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span> right<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 26,
        "NUMBER": 111,
        "TITLE": "Minimum Depth of Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, find its minimum depth.</p>\n\n    <p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minDepth</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">+</span> minDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">+</span> minDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>minDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">),</span> minDepth<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 14, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 27,
        "NUMBER": 112,
        "TITLE": "Path Sum",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n</p>\n\n    For example:<br>\n    Given the below binary tree and <code>sum = 22</code>,\n    <pre>              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n</pre>\n\n    <p>\n        return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">hasPathSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">==</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> hasPathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">-</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                hasPathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">-</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 28,
        "NUMBER": 118,
        "TITLE": "Pascals Triangle",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given <i>numRows</i>, generate the first <i>numRows</i> of Pascal's triangle.</p>\n\n    <p>\n        For example, given <i>numRows</i> = 5,<br>\n        Return\n    </p><pre>[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">generate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> numRows<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numRows <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curRow <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        curRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(1);</span>\n        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curRow<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numRows <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> preRow <span style=\"color: #666666\">=</span> curRow<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> numRows <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            curRow <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    curRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0));</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    curRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    curRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curRow<span style=\"color: #666666\">);</span>\n            preRow <span style=\"color: #666666\">=</span> curRow<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 29,
        "NUMBER": 119,
        "TITLE": "Pascals Triangle II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an index <i>k</i>, return the <i>k</i><sup>th</sup> row of the Pascal's triangle.</p>\n\n    <p>\n        For example, given <i>k</i> = 3,<br>\n        Return <code>[1,3,3,1]</code>.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        Could you optimize your algorithm to use only <i>O</i>(<i>k</i>) extra space?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">getRow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> rowIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        row<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(1);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> rowIndex<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> preRow <span style=\"color: #666666\">=</span> row<span style=\"color: #666666\">;</span>\n            row <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;=</span> i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">((</span>j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0)</span>\n                        <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">((</span>j <span style=\"color: #666666\">&lt;</span> preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">?</span> preRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0);</span>\n                row<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> row<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 30,
        "NUMBER": 121,
        "TITLE": "Best Time to Buy and Sell Stock",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\n\n    <p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre>Input: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre>Input: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0.\n</pre>\n    <p></p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>prices <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">// Track min value so far</span>\n        <span style=\"color: #B00040\">int</span> minSofar <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> maxProfit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> minSofar<span style=\"color: #666666\">){</span>\n                minSofar <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span> <span style=\"color: #408080; font-style: italic\">// update min so far</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// update max profit</span>\n                maxProfit <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> minSofar<span style=\"color: #666666\">,</span> maxProfit<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxProfit<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 31,
        "NUMBER": 122,
        "TITLE": "Best Time to Buy and Sell Stock II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\n\n    <p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>prices <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> maxProfit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]){</span>\n                maxProfit <span style=\"color: #666666\">+=</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxProfit<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 18",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 32,
        "NUMBER": 125,
        "TITLE": "Valid Palindrome",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n</p>\n\n    <p>\n        For example,<br>\n        <code>\"A man, a plan, a canal: Panama\"</code> is a palindrome.<br>\n        <code>\"race a car\"</code> is <i>not</i> a palindrome.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        Have you consider that the string might be empty? This is a good question to ask during an interview.</p>\n    <p>\n        For the purpose of this problem, we define empty string as valid palindrome.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Replace char that is not in the list</span>\n        s <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">replaceAll</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;[^a-zA-Z0-9]&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">toLowerCase</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Compare char from both ends</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 33,
        "NUMBER": 136,
        "TITLE": "Single Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of integers, every element appears <i>twice</i> except for one. Find that single one.</p>\n\n    <p>\n        <b>Note:</b><br>\n        Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">singleNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            result <span style=\"color: #666666\">^=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 22",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 34,
        "NUMBER": 141,
        "TITLE": "Linked List Cycle",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a linked list, determine if it has a cycle in it.\n</p>\n\n    <p>\n        Follow up:<br>\n        Can you solve it without using extra space?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">hasCycle</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        ListNode slow <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">,</span> fast <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>fast <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            slow <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            fast <span style=\"color: #666666\">=</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>slow <span style=\"color: #666666\">==</span> fast<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 35,
        "NUMBER": 155,
        "TITLE": "Min Stack",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n</p><ul>\n    <li>\n        push(x) -- Push element x onto stack.\n    </li>\n    <li>\n        pop() -- Removes the element on top of the stack.\n    </li>\n    <li>\n        top() -- Get the top element.\n    </li>\n    <li>\n        getMin() -- Retrieve the minimum element in the stack.\n    </li>\n</ul>\n    <p></p>\n\n    <p><b>Example:</b><br>\n    </p><pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; Returns -3.\nminStack.pop();\nminStack.top();      --&gt; Returns 0.\nminStack.getMin();   --&gt; Returns -2.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MinStack</span> <span style=\"color: #666666\">{</span>\n    Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stackContent <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n    Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stackMinVal <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> x <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">top</span><span style=\"color: #666666\">()</span> <span style=\"color: #008000; font-weight: bold\">throws</span> IndexOutOfBoundsException <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">throw</span> <span style=\"color: #008000; font-weight: bold\">new</span> IndexOutOfBoundsException<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackContent</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getMin</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">stackMinVal</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 36,
        "NUMBER": 157,
        "TITLE": "Read N Characters Given Read4",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    The API:&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read4(char *buf)</code>&nbsp;reads 4 characters at a time from a file.</div>\n\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    The API:&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read4(char *buf)</code>&nbsp;reads 4 characters at a time from a file.</div>\n\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    By using the&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">read4</code>&nbsp;API, implement the function&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read(char *buf, int n)</code>&nbsp;that reads&nbsp;<i style=\"box-sizing: border-box;\">n</i>&nbsp;characters from the file.</div>\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    <span style=\"box-sizing: border-box; font-weight: 700;\">Note:</span><br>\n    The&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">read</code>&nbsp;function will only be called once for each test case.</div>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #008000; font-weight: bold\">extends</span> Reader4 <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// 时间 O(N) 空间 O(1)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">read</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> buf<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">4){</span>\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> tmp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[4];</span>\n            <span style=\"color: #408080; font-style: italic\">// 将数据读入临时数组</span>\n            <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> read4<span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// 将临时数组拷贝至buf数组，这里拷贝的长度是本次读到的个数和剩余所需个数中较小的</span>\n            System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arraycopy</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> buf<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #408080; font-style: italic\">// 如果读不满4个，说明已经读完了，返回总所需长度和目前已经读到的长度的较小的</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> len<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 如果循环内没有返回，说明读取的字符是4的倍数</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 37,
        "NUMBER": 160,
        "TITLE": "Intersection of Two Linked Lists",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>\n    <br>\n    <p>For example, the following two linked lists: </p>\n    <pre>A:          a1 -> a2\n                   \\\n                     c1 -> c2 -> c3\n                   /\nB:     b1 -> b2 -> b3\n</pre>\n    <p>begin to intersect at node c1.</p>\n    <br>\n    <p><b>Notes:</b>\n    </p><ul>\n    <li>If the two linked lists have no intersection at all, return <code>null</code>.</li>\n    <li>The linked lists must retain their original structure after the function returns. </li>\n    <li>You may assume there are no cycles anywhere in the entire linked structure.</li>\n    <li>Your code should preferably run in O(n) time and use only O(1) memory.</li>\n</ul>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">getIntersectionNode</span><span style=\"color: #666666\">(</span>ListNode headA<span style=\"color: #666666\">,</span> ListNode headB<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>headA <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> headB <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> lenA <span style=\"color: #666666\">=</span> getLength<span style=\"color: #666666\">(</span>headA<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> lenB <span style=\"color: #666666\">=</span> getLength<span style=\"color: #666666\">(</span>headB<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #B00040\">int</span> cut <span style=\"color: #666666\">=</span> lenA <span style=\"color: #666666\">-</span> lenB<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cut <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            headA <span style=\"color: #666666\">=</span> headA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            cut<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cut <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            headB <span style=\"color: #666666\">=</span> headB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            cut<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>headA <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> headB <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>headA <span style=\"color: #666666\">==</span> headB<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> headA<span style=\"color: #666666\">;</span>\n            headA <span style=\"color: #666666\">=</span> headA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            headB <span style=\"color: #666666\">=</span> headB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getLength</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            head <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            len<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> len<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 38,
        "NUMBER": 167,
        "TITLE": "Two Sum II - Input array is sorted",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of integers that is already <b><i>sorted in ascending order</i></b>, find two numbers such that they add up to a specific target number.</p>\n\n    <p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>\n\n    <p>You may assume that each input would have <i>exactly</i> one solution and you may not use the <i>same</i> element twice.</p>\n\n    <p style=\"font-family:monospace\">\n        <b>Input:</b> numbers={2, 7, 11, 15}, target=9<br>\n        <b>Output:</b> index1=1, index2=2\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">twoSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> numbers<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> indice <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[2];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numbers <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> indice<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right <span style=\"color: #666666\">=</span> numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> v <span style=\"color: #666666\">=</span> numbers<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> numbers<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>v <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                indice<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                indice<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> right <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>v <span style=\"color: #666666\">&gt;</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                right<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                left<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> indice<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 39,
        "NUMBER": 168,
        "TITLE": "Excel Sheet Column Title",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>\n\n    <p>For example:</p>\n    <pre>    1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB </pre>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">convertToTitle</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;A&#39;</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">26));</span>\n            n <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">26;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 40,
        "NUMBER": 169,
        "TITLE": "Majority Element",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears <b>more than</b> <code> |_n/2_|</code> times.</p>\n\n    <p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">majorityElement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> majorityElement <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">[0],</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> majorityElement<span style=\"color: #666666\">)</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    majorityElement <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                    count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> majorityElement<span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">&gt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">?</span> majorityElement <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 7, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 41,
        "NUMBER": 171,
        "TITLE": "Excel Sheet Column Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Related to question <a href=\"https://leetcode.com/problems/excel-sheet-column-title/\">Excel Sheet Column Title</a></p>\n    <p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\n\n    <p>For example:</p>\n    <pre>    A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 </pre>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">titleToNumber</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span>\n            num <span style=\"color: #666666\">=</span> num <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">26</span> <span style=\"color: #666666\">+</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;A&#39;</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 42,
        "NUMBER": 172,
        "TITLE": "Factorial Trailing Zeroes",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer <i>n</i>, return the number of trailing zeroes in <i>n</i>!.</p>\n\n    <p><b>Note: </b>Your solution should be in logarithmic time complexity.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">trailingZeroes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">5)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">long</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">5;</span> n <span style=\"color: #666666\">/</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">5)</span> <span style=\"color: #666666\">{</span>\n            count <span style=\"color: #666666\">+=</span> n <span style=\"color: #666666\">/</span> i<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 43,
        "NUMBER": 189,
        "TITLE": "Rotate Array",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Rotate an array of <i>n</i> elements to the right by <i>k</i> steps.</p>\n    <p>For example, with <i>n</i> = 7 and <i>k</i> = 3, the array <code>[1,2,3,4,5,6,7]</code> is rotated to <code>[5,6,7,1,2,3,4]</code>. </p>\n\n    <p><b>Note:</b><br>\n        Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">[show hint]</a></p>\n    <div class=\"spoilers\" style=\"display: block;\"><b>Hint:</b><br>\n        Could you do it in-place with O(1) extra space?\n    </div>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">rotate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        k <span style=\"color: #666666\">=</span> k <span style=\"color: #666666\">%</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        reverseArray<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">);</span>\n        reverseArray<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        reverseArray<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">reverseArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            start<span style=\"color: #666666\">++;</span>\n            end<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 44,
        "NUMBER": 190,
        "TITLE": "Reverse Bits",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Reverse bits of a given 32 bits unsigned integer.</p>\n\n    <p>For example, given input 43261596 (represented in binary as <b>00000010100101000001111010011100</b>), return 964176192 (represented in binary as <b>00111001011110000010100101000000</b>).</p>\n\n    <p>\n        <b>Follow up</b>:<br>\n        If this function is called many times, how would you optimize it?\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// you need treat n as an unsigned value</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">reverseBits</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> firstBitInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> lastBitInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">31;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>firstBitInd <span style=\"color: #666666\">&lt;</span> lastBitInd<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> firstBit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;&gt;</span> firstBitInd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #B00040\">int</span> lastBit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;&gt;</span> lastBitInd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #408080; font-style: italic\">// Set last bit</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>firstBit <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                n <span style=\"color: #666666\">|=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> lastBitInd<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                n <span style=\"color: #666666\">&amp;=</span> <span style=\"color: #666666\">~(1</span> <span style=\"color: #666666\">&lt;&lt;</span> lastBitInd<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// Set first bit</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>lastBit <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                n <span style=\"color: #666666\">|=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> firstBitInd<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                n <span style=\"color: #666666\">&amp;=</span> <span style=\"color: #666666\">~(1</span> <span style=\"color: #666666\">&lt;&lt;</span> firstBitInd<span style=\"color: #666666\">);</span>\n            firstBitInd<span style=\"color: #666666\">++;</span>\n            lastBitInd<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 45,
        "NUMBER": 191,
        "TITLE": "Number of 1 Bits",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\">Hamming weight</a>).</p>\n\n    <p>For example, the 32-bit integer '11' has binary representation <code>00000000000000000000000000001011</code>, so the function should return 3.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// you need to treat n as an unsigned value</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hammingWeight</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            ans <span style=\"color: #666666\">+=</span> n <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n            n <span style=\"color: #666666\">&gt;&gt;&gt;=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// n &amp; (n - 1) drops the lowest set bit. It&#39;s a neat little bit trick.</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 46,
        "NUMBER": 198,
        "TITLE": "House Robber",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n    <p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <b>without alerting the police</b>.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">rob</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Algorithm</span>\n        <span style=\"color: #408080; font-style: italic\">// case 1: current house is not robbed:</span>\n        <span style=\"color: #408080; font-style: italic\">//      Max. amount is Max(Max Amount When last house is robbed,</span>\n        <span style=\"color: #408080; font-style: italic\">//             Max Amount when last house is not robbed)</span>\n        <span style=\"color: #408080; font-style: italic\">// case 2: current house is robbed:</span>\n        <span style=\"color: #408080; font-style: italic\">//   Max. amount is Max Amount when last house is not robbed + current house&#39;s value</span>\n        <span style=\"color: #408080; font-style: italic\">// repeat this from first two until the last</span>\n        <span style=\"color: #408080; font-style: italic\">// Compare case 1 and case 2 to return the Max</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[0],</span> num<span style=\"color: #666666\">[1]);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// start from index = 2</span>\n        <span style=\"color: #B00040\">int</span> lastNotRobbed <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[0],</span> num<span style=\"color: #666666\">[1]);</span>\n        <span style=\"color: #B00040\">int</span> lastRobbed <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> num<span style=\"color: #666666\">[2];</span>\n        <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&lt;=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1){</span>\n            <span style=\"color: #B00040\">int</span> tempLastNotRobbed <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>lastNotRobbed<span style=\"color: #666666\">,</span> lastRobbed<span style=\"color: #666666\">);</span>\n            lastRobbed <span style=\"color: #666666\">=</span> lastNotRobbed <span style=\"color: #666666\">+</span> num<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">++];</span>\n            lastNotRobbed <span style=\"color: #666666\">=</span> tempLastNotRobbed<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>lastRobbed<span style=\"color: #666666\">,</span> lastNotRobbed<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 47,
        "NUMBER": 202,
        "TITLE": "Happy Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write an algorithm to determine if a number is \"happy\".</p>\n\n    <p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\n\n    <p><b>Example:&nbsp;</b>19 is a happy number</p>\n\n    <ul style=\"list-style: none;\">\n        <li>1<sup>2</sup> + 9<sup>2</sup> = 82</li>\n        <li>8<sup>2</sup> + 2<sup>2</sup> = 68</li>\n        <li>6<sup>2</sup> + 8<sup>2</sup> = 100</li>\n        <li>1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1</li>\n    </ul>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isHappy</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> wordMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>wordMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">)){</span>\n            wordMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            n <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>temp <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">1){</span>\n                n <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">%10)*(</span>temp<span style=\"color: #666666\">%10);</span>\n                temp <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 48,
        "NUMBER": 203,
        "TITLE": "Remove Linked List Elements",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>\n    <p>\n        <b>Example</b><br>\n        <i><b>Given:</b></i> 1 --&gt; 2 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 6,  <b><i>val</i></b> = 6<br>\n        <i><b>Return:</b></i> 1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5\n    </p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">removeElements</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        ListNode fakeHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1);</span>\n        ListNode pre <span style=\"color: #666666\">=</span> fakeHead<span style=\"color: #666666\">;</span>\n        fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> val<span style=\"color: #666666\">){</span>\n            head <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">!=</span> val<span style=\"color: #666666\">){</span>\n                pre <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n                head <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                head <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 49,
        "NUMBER": 204,
        "TITLE": "Count Primes",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "Count the number of prime numbers less than a non-negative number, n.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countPrimes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">2)</span>  <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// A prime number must be &gt;= 2.</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> flags <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n\n        <span style=\"color: #B00040\">int</span> rootN <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sqrt</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=2;</span> i<span style=\"color: #666666\">&lt;=</span>rootN<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>  <span style=\"color: #408080; font-style: italic\">// [1]</span>\n            <span style=\"color: #408080; font-style: italic\">// flags[i]==true means it has been marked before and</span>\n            <span style=\"color: #408080; font-style: italic\">// thus all its multiples can be skipped</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>flags<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// Note: if we get here, i itself is a prime number</span>\n\n                <span style=\"color: #408080; font-style: italic\">// mark its multiples</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=</span>i<span style=\"color: #666666\">*</span>i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">&lt;=</span>n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">+=</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>  <span style=\"color: #408080; font-style: italic\">// [2]</span>\n                    flags<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=2;</span> i<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>flags<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> res<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 50,
        "NUMBER": 205,
        "TITLE": "Isomorphic Strings",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given two strings <b><i>s</i></b> and <b><i>t</i></b>, determine if they are isomorphic.</p>\n\n    <p>Two strings are isomorphic if the characters in <b><i>s</i></b> can be replaced to get <b><i>t</i></b>.</p>\n\n    <p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>\n\n    <p>For example,<br>\n        Given <code>\"egg\"</code>, <code>\"add\"</code>, return true.</p>\n\n    <p>Given <code>\"foo\"</code>, <code>\"bar\"</code>, return false.</p>\n\n    <p>Given <code>\"paper\"</code>, <code>\"title\"</code>, return true.</p>\n\n    <p><b>Note:</b><br>\n        You may assume both <b><i>s</i></b> and <b><i>t</i></b> have the same length.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isIsomorphic</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> a <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">char</span> b <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    <span style=\"color: #666666\">!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsValue</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">))</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">,</span>b<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 51,
        "NUMBER": 206,
        "TITLE": "Reverse Linked List",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "Reverse a singly linked list.\n<br>\nHint:\nA linked list can be reversed either iteratively or recursively. Could you implement both?",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverseList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode fakeHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1);</span>\n        fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode curNode <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curNode <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curNode<span style=\"color: #666666\">;</span>\n            curNode <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverseList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode p <span style=\"color: #666666\">=</span> reverseList<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n        head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> p<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 52,
        "NUMBER": 219,
        "TITLE": "Contains Duplicate II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">containsNearbyDuplicate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> indexes <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">?</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> ind<span style=\"color: #666666\">=0;</span> ind <span style=\"color: #666666\">&lt;</span> indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> ind<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>ind<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">&lt;=</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> indexes<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 53,
        "NUMBER": 225,
        "TITLE": "Implement Stack using Queues",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Implement the following operations of a stack using queues.\n</p><ul>\n    <li>\n        push(x) -- Push element x onto stack.\n    </li>\n    <li>\n        pop() -- Removes the element on top of the stack.\n    </li>\n    <li>\n        top() -- Get the top element.\n    </li>\n    <li>\n        empty() -- Return whether the stack is empty.\n    </li>\n</ul>\n    <b>Notes:</b><br>\n    <ul>\n        <li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n        <li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\n        <li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\n    </ul>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MyStack</span> <span style=\"color: #666666\">{</span>\n\n\tDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> queue1 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> queue2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">MyStack</span><span style=\"color: #666666\">(){</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #408080; font-style: italic\">// Push element x onto stack.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n    \t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Removes the element on top of the stack.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> topElem <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n    \t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n    \t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n    \t\ttopElem <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n    \t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n    \t\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>topElem<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    \t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">);</span>\n    \t<span style=\"color: #008000; font-weight: bold\">return</span> topElem<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Get the top element.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">top</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n    \t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n        \t<span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n        \t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            \t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue1</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">);</span>\n            \t<span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        \t<span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    \t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Return whether the stack is empty.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">empty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">queue2</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 54,
        "NUMBER": 226,
        "TITLE": "Invert Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Invert a binary tree.\n    </p><pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n    to\n    <pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n    <b>Trivia:</b><br>\n    This problem was inspired by <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">this original tweet</a> by <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell</a>:\n    <blockquote>Google: 90% of our engineers use the software you wrote (Homebrew), but you can't invert a binary tree on a whiteboard so fuck off.</blockquote><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">invertTree</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n\t\tswapNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swapNodes</span><span style=\"color: #666666\">(</span>TreeNode firstNode<span style=\"color: #666666\">,</span> TreeNode secondNode<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>firstNode <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> secondNode <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>firstNode <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n\t\t\tTreeNode temp <span style=\"color: #666666\">=</span> firstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n\t\t\tfirstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> firstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\t\t\tfirstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n\t\t\tswapNodes<span style=\"color: #666666\">(</span>firstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> firstNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>secondNode <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n\t\t\tTreeNode temp <span style=\"color: #666666\">=</span> secondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n\t\t\tsecondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> secondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\t\t\tsecondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n\t\t\tswapNodes<span style=\"color: #666666\">(</span>secondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> secondNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 55,
        "NUMBER": 231,
        "TITLE": "Power of Two",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "Given an integer, write a function to determine if it is a power of two.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPowerOfTwo</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> gotOne <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;32;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> bit <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>bit <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> gotOne<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>bit <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span>\n                gotOne <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 56,
        "NUMBER": 232,
        "TITLE": "Implement Queue using Stacks",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Implement the following operations of a queue using stacks.\n</p><ul>\n    <li>\n        push(x) -- Push element x to the back of queue.\n    </li>\n    <li>\n        pop() -- Removes the element from in front of queue.\n    </li>\n    <li>\n        peek() -- Get the front element.\n    </li>\n    <li>\n        empty() -- Return whether the queue is empty.\n    </li>\n</ul>\n    <b>Notes:</b><br>\n    <ul>\n        <li>You must use <i>only</i> standard operations of a stack -- which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n        <li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\n        <li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\n    </ul>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MyQueue</span> <span style=\"color: #666666\">{</span>\n    Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> mainStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n    Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> assistStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Push element x to the back of queue.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Removes the element from in front of queue.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n                mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Get the front element.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n                mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Return whether the queue is empty.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">empty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> mainStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> assistStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 57,
        "NUMBER": 234,
        "TITLE": "Palindrome Linked List",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a singly linked list, determine if it is a palindrome.</p>\n\n    <p><b>Follow up:</b><br>\n        Could you do it in O(n) time and O(1) space?</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPalindrome</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">//find list center</span>\n        ListNode fast <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode slow <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            fast <span style=\"color: #666666\">=</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            slow <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        ListNode secondHead <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//reverse second part of the list</span>\n        ListNode p1 <span style=\"color: #666666\">=</span> secondHead<span style=\"color: #666666\">;</span>\n        ListNode p2 <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> p2<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            ListNode temp <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">;</span>\n            p1 <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">;</span>\n            p2 <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        secondHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//compare two sublists now</span>\n        ListNode p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">?</span>p1<span style=\"color: #666666\">:</span>p2<span style=\"color: #666666\">);</span>\n        ListNode q <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">!=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            q <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 58,
        "NUMBER": 235,
        "TITLE": "Lowest Common Ancestor of a Binary Search Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n</p>\n\n\n\n    <pre>        _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   0      _4       7       9\n         /  \\\n         3   5\n</pre>\n\n    <p>\n        For example, the lowest common ancestor (LCA) of nodes <code>2</code> and <code>8</code> is <code>6</code>. Another example is LCA of nodes <code>2</code> and <code>4</code> is <code>2</code>, since a node can be a descendant of itself according to the LCA definition.</p><p></p>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">lowestCommonAncestor</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> TreeNode p<span style=\"color: #666666\">,</span> TreeNode q<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> rootVal <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> rootVal <span style=\"color: #666666\">||</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> rootVal <span style=\"color: #666666\">||</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> rootVal <span style=\"color: #666666\">&amp;&amp;</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> rootVal\n                <span style=\"color: #666666\">||</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> rootVal <span style=\"color: #666666\">&amp;&amp;</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> rootVal<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&amp;&amp;</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> lowestCommonAncestor<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> p<span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> lowestCommonAncestor<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> p<span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 59,
        "NUMBER": 237,
        "TITLE": "Delete Node in a Linked List",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.\n</p>\n\n    <p>\n        Supposed the linked list is <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code> and you are given the third node with value <code>3</code>, the linked list should become <code>1 -&gt; 2 -&gt; 4</code> after calling your function.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">deleteNode</span><span style=\"color: #666666\">(</span>ListNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n        node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 60,
        "NUMBER": 242,
        "TITLE": "Valid Anagram",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>Given two strings <i>s</i> and <i>t</i>, write a function to determine if <i>t</i> is an anagram of <i>s</i>.</p>\n\n    <p>For example,<br>\n        <i>s</i> = \"anagram\", <i>t</i> = \"nagaram\", return true.<br>\n        <i>s</i> = \"rat\", <i>t</i> = \"car\", return false.\n    </p>\n\n    <p><b>Note:</b><br> You may assume the string contains only lowercase alphabets.</p>\n\n    <p><b>Follow up:</b><br> What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isAnagram</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        \n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> sAlphCounts <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> tAlphCounts <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            sAlphCounts<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++;</span>\n            tAlphCounts<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++;</span>\n        <span style=\"color: #666666\">}</span>\n        \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;26;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sAlphCounts<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> tAlphCounts<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 61,
        "NUMBER": 246,
        "TITLE": "Strobogrammatic Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<blockquote>\n    <p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n    <p>Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p>\n    <p>For example, the numbers \"69\", \"88\", and \"818\" are all strobogrammatic.</p>\n</blockquote>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isStrobogrammatic</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;();</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;6&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;6&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;8&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;8&#39;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;=</span> right<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// 如果字母不存在映射或映射不对，则返回假</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">||</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">))){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            left<span style=\"color: #666666\">++;</span>\n            right<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 62,
        "NUMBER": 252,
        "TITLE": "Meeting Rooms",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei),\n    determine if a person could attend all meetings. For example, Given [[0, 30],[5, 10],[15, 20]], return false.</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canAttendMeetings</span><span style=\"color: #666666\">(</span>Interval<span style=\"color: #666666\">[]</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Interval a<span style=\"color: #666666\">,</span> Interval b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">&gt;</span> intervals<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1].</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 63,
        "NUMBER": 257,
        "TITLE": "Binary Tree Paths",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a binary tree, return all root-to-leaf paths.\n</p>\n<p>\nFor example, given the following binary tree:\n</p>\n<p>\n</p><pre>   1\n /   \\\n2     3\n \\\n  5\n</pre>\n<p></p>\n<p>\nAll root-to-leaf paths are:\n</p><pre>[\"1-&gt;2-&gt;5\", \"1-&gt;3\"]</pre>\n<p></p>\n</div>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">binaryTreePaths</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> answer <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            searchBT<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> answer<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> answer<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">searchBT</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> String path<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> answer<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> \n            answer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>path <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            searchBT<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> path <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;-&gt;&quot;</span><span style=\"color: #666666\">,</span> answer<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            searchBT<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> path <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;-&gt;&quot;</span><span style=\"color: #666666\">,</span> answer<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 64,
        "NUMBER": 258,
        "TITLE": "Add Digits",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.\n</p>\n\n    <p>\n        For example:\n    </p>\n    <p>\n        Given <code>num = 38</code>, the process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. Since <code>2</code> has only one digit, return it.\n    </p>\n\n    <p><b>Follow up:</b><br>\n        Could you do it without any loop/recursion in O(1) runtime?\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Observe the pattern of num % 9</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">addDigits</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">9</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">9</span> <span style=\"color: #666666\">:</span> num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">9;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * Traditional solution</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * res = 0</span>\n<span style=\"color: #408080; font-style: italic\">     * digitCount = digit count of num</span>\n<span style=\"color: #408080; font-style: italic\">     * mostSig = 10^(digitCount - 1)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * while(num &gt; 9){</span>\n<span style=\"color: #408080; font-style: italic\">     *  digitCount = digit count of num</span>\n<span style=\"color: #408080; font-style: italic\">     *  mostSig = 10^(digitCount - 1)</span>\n<span style=\"color: #408080; font-style: italic\">     *  int temp = 0</span>\n<span style=\"color: #408080; font-style: italic\">     *  while(mostSig &gt; 0){</span>\n<span style=\"color: #408080; font-style: italic\">     *      temp += num / mostSig</span>\n<span style=\"color: #408080; font-style: italic\">     *      num %= mostSig</span>\n<span style=\"color: #408080; font-style: italic\">     *      mostSig /= 10</span>\n<span style=\"color: #408080; font-style: italic\">     *  }</span>\n<span style=\"color: #408080; font-style: italic\">     *  num = temp</span>\n<span style=\"color: #408080; font-style: italic\">     * }</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">addDigits</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">9){</span>\n            <span style=\"color: #B00040\">int</span> digitCount <span style=\"color: #666666\">=</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #B00040\">int</span> mostSig <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digitCount<span style=\"color: #666666\">-1);</span>\n            <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>mostSig <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n                temp <span style=\"color: #666666\">+=</span> num <span style=\"color: #666666\">/</span> mostSig<span style=\"color: #666666\">;</span>\n                num <span style=\"color: #666666\">%=</span> mostSig<span style=\"color: #666666\">;</span>\n                mostSig <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #666666\">}</span>\n            num <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 65,
        "NUMBER": 263,
        "TITLE": "Ugly Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>\n        Write a program to check whether a given number is an ugly number.\n    </p>\n\n    <p>\n        Ugly numbers are positive numbers whose prime factors only include <code>2, 3, 5</code>. For example, <code>6, 8</code>        are ugly while <code>14</code> is not ugly since it includes another prime factor <code>7</code>.\n    </p>\n\n    <p>\n        Note that <code>1</code> is typically treated as an ugly number.\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isUgly</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> \n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">7)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">5</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> num <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">5;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> num <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">3;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> num <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 66,
        "NUMBER": 268,
        "TITLE": "Missing Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>\n        Given an array containing <i>n</i> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is\n        missing from the array.\n    </p>\n\n    <p>For example,<br> Given <i>nums</i> = <code>[0, 1, 3]</code> return <code>2</code>.\n    </p>\n\n    <p>\n        <b>Note</b>:<br> Your algorithm should run in linear runtime complexity. Could you implement it using only constant\n        extra space complexity?\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">missingNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0],</span> max <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            min <span style=\"color: #666666\">=</span> min <span style=\"color: #666666\">&lt;</span> num <span style=\"color: #666666\">?</span> min <span style=\"color: #666666\">:</span> num<span style=\"color: #666666\">;</span>\n            max <span style=\"color: #666666\">=</span> max <span style=\"color: #666666\">&gt;</span> num <span style=\"color: #666666\">?</span> max <span style=\"color: #666666\">:</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>min <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1))</span> <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> total <span style=\"color: #666666\">=</span> max<span style=\"color: #666666\">*(</span>max<span style=\"color: #666666\">+1)/2;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            total <span style=\"color: #666666\">-=</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> total<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 3, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 67,
        "NUMBER": 278,
        "TITLE": "First Bad Version",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>\n        You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your\n        product fails the quality check. Since each version is developed based on the previous version, all the versions\n        after a bad version are also bad.\n    </p>\n\n    <p>\n        Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one,\n        which causes all the following ones to be bad.\n    </p>\n\n    <p>\n        You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad.\n        Implement a function to find the first bad version. You should minimize the number of calls to the API.\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/* The isBadVersion API is defined in the parent class VersionControl.</span>\n<span style=\"color: #408080; font-style: italic\">      boolean isBadVersion(int version); */</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #008000; font-weight: bold\">extends</span> VersionControl <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">firstBadVersion</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> startIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> endIndex <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>startIndex <span style=\"color: #666666\">&lt;</span> endIndex<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> midIndex <span style=\"color: #666666\">=</span> startIndex <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>endIndex <span style=\"color: #666666\">-</span> startIndex<span style=\"color: #666666\">)/2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>isBadVersion<span style=\"color: #666666\">(</span>midIndex<span style=\"color: #666666\">)){</span>\n                endIndex <span style=\"color: #666666\">=</span> midIndex<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                startIndex <span style=\"color: #666666\">=</span> midIndex<span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> endIndex<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 68,
        "NUMBER": 283,
        "TITLE": "Move Zeroes",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given an array <code>nums</code>, write a function to move all <code>0</code>'s to the end of it while maintaining the relative order of the non-zero elements.\n</p>\n\n    <p>\n        For example, given <code>nums  = [0, 1, 0, 3, 12]</code>, after calling your function, <code>nums</code> should be <code>[1, 3, 12, 0, 0]</code>.\n    </p>\n\n    <p>\n        <b>Note</b>:<br>\n    </p><ol>\n    <li>You must do this <b>in-place</b> without making a copy of the array.</li>\n    <li>Minimize the total number of operations.</li>\n</ol>\n    <p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Put nonzero numbers ahead</span>\n<span style=\"color: #408080; font-style: italic\">     * Set rest to be zeros</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">moveZeroes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> curInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> scanInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>scanInd <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>scanInd<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                scanInd<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                nums<span style=\"color: #666666\">[</span>curInd<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>scanInd<span style=\"color: #666666\">++];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curInd <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            nums<span style=\"color: #666666\">[</span>curInd<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 69,
        "NUMBER": 290,
        "TITLE": "Word Pattern",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>\n<p> Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>str</code>.</p>\n<p>\n<b>Examples:</b><br>\n</p><ol>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat dog\"</code> should return true.</li>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat fish\"</code> should return false.</li>\n<li>pattern = <code>\"aaaa\"</code>, str = <code>\"dog cat cat dog\"</code> should return false.</li>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog dog dog dog\"</code> should return false.</li>\n</ol>\n<p></p>\n\n<p>\n<b>Notes:</b><br>\nYou may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters separated by a single space.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">wordPattern</span><span style=\"color: #666666\">(</span>String pattern<span style=\"color: #666666\">,</span> String str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> strs <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">&gt;</span> pMaptos <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;</span> sMaptop <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pMaptos<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>pMaptos<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> \n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                pMaptos<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">),</span> strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>   \n            <span style=\"color: #666666\">}</span>\n            \n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sMaptop<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>sMaptop<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)))</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                sMaptop<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>   \n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 70,
        "NUMBER": 292,
        "TITLE": "Nim Game",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nYou are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\n</p>\n\n<p>\nBoth of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.\n</p>\n\n<p>\nFor example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canWinNim</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 71,
        "NUMBER": 303,
        "TITLE": "Range Sum Query - Immutable",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> <= <i>j</i>), inclusive.</p>\n\n<p><b>Example:</b><br>\n</p><pre>Given nums = [-2, 0, 3, -5, 2, -1]\n\nsumRange(0, 2) -> 1\nsumRange(2, 5) -> -1\nsumRange(0, 5) -> -3\n</pre>\n<p></p>\n\n<p><b>Note:</b><br>\n</p><ol>\n<li>You may assume that the array does not change.</li>\n<li>There are many calls to <i>sumRange</i> function.</li>\n</ol>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">NumArray</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> sums<span style=\"color: #666666\">;</span>\n    <span style=\"color: #B00040\">int</span> arrayLen<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">NumArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arrayLen</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sums</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arrayLen</span><span style=\"color: #666666\">];</span>\n        \n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arrayLen</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sums</span><span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arrayLen</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1){</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n                    <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sums</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]+</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumRange</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> j <span style=\"color: #666666\">&gt;</span> arrayLen<span style=\"color: #666666\">-1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sums</span><span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]-(</span>i <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sums</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n\n<span style=\"color: #408080; font-style: italic\">// Your NumArray object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// NumArray numArray = new NumArray(nums);</span>\n<span style=\"color: #408080; font-style: italic\">// numArray.sumRange(0, 1);</span>\n<span style=\"color: #408080; font-style: italic\">// numArray.sumRange(1, 2);</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 72,
        "NUMBER": 326,
        "TITLE": "Power of Three",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given an integer, write a function to determine if it is a power of three.\n</p>\n<p>\n    <b>Follow up:</b><br>\n    Could you do it without using any loop / recursion?\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * n = 3^(log(n)/log(3))</span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPowerOfThree</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n <span style=\"color: #666666\">==</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(3,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">round</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">log</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">log</span><span style=\"color: #666666\">(3)));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 73,
        "NUMBER": 342,
        "TITLE": "Power of Four",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven an integer (signed 32 bits), write a function to check whether it is a power of 4.\n</p>\n<p><b>Example:</b><br>\nGiven num = 16, return true.\nGiven num = 5, return false.\n</p>\n<p>\n<b>Follow up</b>: Could you solve it without loops/recursion?\n</p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPowerOfFour</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// first check only one bit is set:</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>num <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">-1))</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// next check if it&#39;s a bit in pos 1, 3, 5 ... 31</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>num <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">0x55555555)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 74,
        "NUMBER": 344,
        "TITLE": "Reverse String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a function that takes a string as input and returns the string reversed.</p>\n\n    <p>\n        <b>Example:</b><br>\n        Given s = \"hello\", return \"olleh\".\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">reverseString</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> stringChars <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> stringChars<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">char</span> temp <span style=\"color: #666666\">=</span> stringChars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n            stringChars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> stringChars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            stringChars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            start<span style=\"color: #666666\">++;</span>\n            end<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>stringChars<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 75,
        "NUMBER": 345,
        "TITLE": "Reverse Vowels of a String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>\n\n<p>\n<b>Example 1:</b><br>\nGiven s = \"hello\", return \"holle\".\n</p>\n\n<p>\n<b>Example 2:</b><br>\nGiven s = \"leetcode\", return \"leotcede\".\n</p>\n\n<p>\n<b>Note:</b><br>\nThe vowels does not include the letter \"y\".\n</p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">reverseVowels</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chars <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>isVowel<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]))</span> start<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>isVowel<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]))</span> end<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">char</span> temp  <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n            chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            start<span style=\"color: #666666\">++;</span>\n            end<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isVowel</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> vowels <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;i&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;o&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;u&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;E&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;I&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;U&#39;</span><span style=\"color: #666666\">};</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> vowel <span style=\"color: #666666\">:</span> vowels<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>vowel <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 76,
        "NUMBER": 345,
        "TITLE": "Reverse Vowels of a String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>\n\n<p>\n<b>Example 1:</b><br>\nGiven s = \"hello\", return \"holle\".\n</p>\n\n<p>\n<b>Example 2:</b><br>\nGiven s = \"leetcode\", return \"leotcede\".\n</p>\n\n<p>\n<b>Note:</b><br>\nThe vowels does not include the letter \"y\".\n</p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">reverseVowels</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chars <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>isVowel<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]))</span> start<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>isVowel<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]))</span> end<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">char</span> temp  <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n            chars<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n            chars<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            start<span style=\"color: #666666\">++;</span>\n            end<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isVowel</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> vowels <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;i&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;o&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;u&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;E&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;I&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;U&#39;</span><span style=\"color: #666666\">};</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> vowel <span style=\"color: #666666\">:</span> vowels<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>vowel <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 77,
        "NUMBER": 349,
        "TITLE": "Intersection of Two Arrays",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven two arrays, write a function to compute their intersection.\n</p>\n\n<p><b>Example:</b><br>\nGiven <i>nums1</i> = <code>[1, 2, 2, 1]</code>, <i>nums2</i> = <code>[2, 2]</code>, return <code>[2]</code>.\n</p>\n\n<p><b>Note:</b><br>\n</p><ul>\n<li>Each element in the result must be unique.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">intersection</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        Set<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> intersect <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>nums2<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                intersect<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums2<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>intersect<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()];</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Integer num <span style=\"color: #666666\">:</span> intersect<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 6, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 78,
        "NUMBER": 350,
        "TITLE": "Intersection of Two Arrays II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven two arrays, write a function to compute their intersection.\n</p>\n\n<p><b>Example:</b><br>\nGiven <i>nums1</i> = <code>[1, 2, 2, 1]</code>, <i>nums2</i> = <code>[2, 2]</code>, return <code>[2, 2]</code>.\n</p>\n\n<p><b>Note:</b><br>\n</p><ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p></p>\n\n<p><b>Follow up:</b><br>\n</p><ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if <i>nums1</i>'s size is small compared to <i>nums2</i>'s size? Which algorithm is better?</li>\n<li>What if elements of <i>nums2</i> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">intersect</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">:</span> nums1<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)){</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)+1);</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n \n        ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">:</span> nums2<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1){</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-1);</span>\n                <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n \n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()];</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">&lt;</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()){</span>\n            result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]=</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 6, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 79,
        "NUMBER": 367,
        "TITLE": "Valid Perfect Square",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a positive integer <i>num</i>, write a function which returns True if <i>num</i> is a perfect square else False.</p>\n\n<p>\n<b>Note:</b> <b>Do not</b> use any built-in library function such as <code>sqrt</code>.\n</p>\n\n<p><b>Example 1:</b>\n</p><pre>Input: 16\nReturns: True\n</pre>\n<p></p>\n\n<p><b>Example 2:</b>\n</p><pre>Input: 14\nReturns: False\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPerfectSquare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">long</span> L <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> R <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>L <span style=\"color: #666666\">&lt;=</span> R<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #B00040\">long</span>  m <span style=\"color: #666666\">=</span> L <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">((</span>R <span style=\"color: #666666\">-</span> L<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #666666\">1);</span>\n\t\t\t<span style=\"color: #B00040\">long</span>  mul <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">*</span> m<span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>mul <span style=\"color: #666666\">==</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>mul <span style=\"color: #666666\">&gt;</span> num<span style=\"color: #666666\">)</span> R <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">else</span> L <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 80,
        "NUMBER": 371,
        "TITLE": "Sum of Two Integerst",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Calculate the sum of two integers <i>a</i> and <i>b</i>, but you are <b>not allowed</b> to use the operator <code>+</code> and <code>-</code>.</p>\n\n<p><b>Example:</b><br>\nGiven <i>a</i> = 1 and <i>b</i> = 2, return 3.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>b <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> getSum<span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">^</span>b<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">((</span>a <span style=\"color: #666666\">&amp;</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">1));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 81,
        "NUMBER": 374,
        "TITLE": "Guess Number Higher or Lower",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>We are playing the Guess Game. The game is as follows:</p><p> \n\n</p><p>I pick a number from <b>1</b> to <b><i>n</i></b>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I'll tell you whether the number is higher or lower.</p>\n\n<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>\n<pre>-1 : My number is lower\n 1 : My number is higher\n 0 : Congrats! You got it!\n</pre>\n\n<p><b>Example:</b><br>\n</p><pre>n = 10, I pick 6.\n\nReturn 6.\n</pre>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/* The guess API is defined in the parent class GuessGame.</span>\n<span style=\"color: #408080; font-style: italic\">   @param num, your guess</span>\n<span style=\"color: #408080; font-style: italic\">   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>\n<span style=\"color: #408080; font-style: italic\">      int guess(int num); */</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #008000; font-weight: bold\">extends</span> GuessGame <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">guessNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> low <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> high <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">&lt;=</span> high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> low <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>high <span style=\"color: #666666\">-</span> low<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> guess<span style=\"color: #666666\">(</span>mid<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>res <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>res <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span>\n                high <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                low <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 82,
        "NUMBER": 383,
        "TITLE": "Ransom Note",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom\n    note can be constructed from the magazines ; otherwise, it will return false.\n</p>\n    <p>\n        Each letter in the magazine string can only be used once in your ransom note.\n    </p>\n\n    <p><b>Note:</b><br>\n        You may assume that both strings contain only lowercase letters.\n    </p>\n\n    <pre>canConstruct(\"a\", \"b\") -&gt; false\ncanConstruct(\"aa\", \"ab\") -&gt; false\ncanConstruct(\"aa\", \"aab\") -&gt; true\n</pre>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canConstruct</span><span style=\"color: #666666\">(</span>String ransomNote<span style=\"color: #666666\">,</span> String magazine<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> magazine<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            arr<span style=\"color: #666666\">[</span>magazine<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> ransomNote<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(--</span>arr<span style=\"color: #666666\">[</span>ransomNote<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 83,
        "NUMBER": 387,
        "TITLE": "First Unique Character in a String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\n</p>\n    <p><b>Examples:</b>\n    </p><pre>s = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b> You may assume the string contain only lowercase letters.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">firstUniqChar</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> cc <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> slow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> fast <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[256];</span>\n        count<span style=\"color: #666666\">[</span>cc<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">]]++;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>fast <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            count<span style=\"color: #666666\">[</span>cc<span style=\"color: #666666\">[</span>fast<span style=\"color: #666666\">]]++;</span>\n            <span style=\"color: #408080; font-style: italic\">// if slow pointer is not a unique character anymore,</span>\n            <span style=\"color: #408080; font-style: italic\">// move to the next unique one</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>slow <span style=\"color: #666666\">&lt;</span> len <span style=\"color: #666666\">&amp;&amp;</span> count<span style=\"color: #666666\">[</span>cc<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">]]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> slow<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #408080; font-style: italic\">// no unique character exist</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>slow <span style=\"color: #666666\">&gt;=</span> len<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n            <span style=\"color: #408080; font-style: italic\">// not yet visited by the fast pointer</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">[</span>cc<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">]]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">[</span>cc<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">]]++;</span>\n                fast <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// reset the fast pointer</span>\n            <span style=\"color: #666666\">}</span>\n            fast<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> slow<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 84,
        "NUMBER": 389,
        "TITLE": "Find the Difference",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two strings <b><i>s</i></b> and <b><i>t</i></b> which consist of only lowercase letters.</p>\n\n    <p>String <b><i>t</i></b> is generated by random shuffling string <b><i>s</i></b> and then add one more letter at a random position.</p>\n\n    <p>Find the letter that was added in <b><i>t</i></b>.</p>\n\n    <p><b>Example:</b>\n    </p><pre>Input:\ns = \"abcd\"\nt = \"abcde\"\n\nOutput:\ne\n\nExplanation:\n'e' is the letter that was added.\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">char</span> <span style=\"color: #0000FF\">findTheDifference</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            c <span style=\"color: #666666\">^=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            c <span style=\"color: #666666\">^=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> c<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 85,
        "NUMBER": 400,
        "TITLE": "Nth Digit",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Find the <i>n</i><sup>th</sup> digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... </p>\n\n    <p><b>Note:</b><br>\n        <i>n</i> is positive and will fit within the range of a 32-bit signed integer (<i>n</i> &lt; 2<sup>31</sup>).\n    </p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>Input:</b>\n3\n\n<b>Output:</b>\n3\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>Input:</b>\n11\n\n<b>Output:</b>\n0\n\n<b>Explanation:</b>\nThe 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     1. find the length of the number where the nth digit is from</span>\n<span style=\"color: #408080; font-style: italic\">     2. find the actual number where the nth digit is from</span>\n<span style=\"color: #408080; font-style: italic\">     3. find the nth digit and return</span>\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findNthDigit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">long</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">9;</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;</span> len <span style=\"color: #666666\">*</span> count<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            n <span style=\"color: #666666\">-=</span> len <span style=\"color: #666666\">*</span> count<span style=\"color: #666666\">;</span>\n            len <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n            count <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n            start <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n\n        start <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> len<span style=\"color: #666666\">;</span>\n        String s <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getNumericValue</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">((</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">%</span> len<span style=\"color: #666666\">));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 86,
        "NUMBER": 401,
        "TITLE": "Binary Watch",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p>\n    <p>Each LED represents a zero or one, with the least significant bit on the right.</p>\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" height=\"300\">\n    <p>For example, the above binary watch reads \"3:25\".</p>\n\n    <p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>\n\n    <p><b>Example:</b>\n    </p><pre>Input: n = 1<br>Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>The order of output does not matter.</li>\n    <li>The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".</li>\n    <li>The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</li>\n</ul>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">readBinaryWatch</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">12;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">60;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">bitCount</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">bitCount</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">format</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;%d:%02d&quot;</span><span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">));</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 87,
        "NUMBER": 404,
        "TITLE": "Sum of Left Leaves",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Find the sum of all left leaves in a given binary tree.</p>\n\n    <p><b>Example:</b>\n    </p><pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nThere are two left leaves in the binary tree, with values <b>9</b> and <b>15</b> respectively. Return <b>24</b>.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumOfLeftLeaves</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            TreeNode node <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    ans <span style=\"color: #666666\">+=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 88,
        "NUMBER": 405,
        "TITLE": "Convert a Number to Hexadecimal",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two's complement</a> method is used.\n</p>\n\n    <p><b>Note:</b>\n    </p><ol>\n    <li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li>\n    <li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>'0'</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li>\n    <li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li>\n    <li>You <b>must not use <i>any</i> method provided by the library</b> which converts/formats the number to hex directly.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre>Input:\n26\n\nOutput:\n\"1a\"\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>Input:\n-1\n\nOutput:\n\"ffffffff\"\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/*</span>\n<span style=\"color: #408080; font-style: italic\">    Basic idea: each time we take a look at the last four digits of</span>\n<span style=\"color: #408080; font-style: italic\">            binary verion of the input, and maps that to a hex char</span>\n<span style=\"color: #408080; font-style: italic\">            shift the input to the right by 4 bits, do it again</span>\n<span style=\"color: #408080; font-style: italic\">            until input becomes 0.</span>\n<span style=\"color: #408080; font-style: italic\">    */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">toHex</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;2&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;3&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;4&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;5&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;6&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;7&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;8&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">,</span>\n                <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;b&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;c&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;d&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;f&#39;</span><span style=\"color: #666666\">};</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">;</span>\n        String result <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0){</span>\n            result <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">[(</span>num <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">15)]</span> <span style=\"color: #666666\">+</span> result<span style=\"color: #666666\">;</span>\n            num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;&gt;&gt;</span> <span style=\"color: #666666\">4);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 89,
        "NUMBER": 409,
        "TITLE": "Longest Palindrome",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>\n\n    <p>This is case sensitive, for example <code>\"Aa\"</code> is not considered a palindrome here.</p>\n\n    <p><b>Note:</b><br>\n        Assume the length of given string will not exceed 1,010.\n    </p>\n\n    <p><b>Example: </b>\n    </p><pre>Input:\n\"abccccdd\"\n\nOutput:\n7\n\nExplanation:\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Set<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> hs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)))</span> <span style=\"color: #666666\">{</span>\n                hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> count <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">2;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 90,
        "NUMBER": 412,
        "TITLE": "Fizz Buzz",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a program that outputs the string representation of numbers from 1 to <i>n</i>.</p>\n\n    <p>But for multiples of three it should output \"Fizz\" instead of the number and for the multiples of five output \"Buzz\". For numbers which are multiples of both three and five output \"FizzBuzz\".</p>\n\n    <p><b>Example:</b>\n    </p><pre>n = 15,\n\nReturn:\n[\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"Buzz\",\n    \"11\",\n    \"Fizz\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\"\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">fizzBuzz</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">5</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;FizzBuzz&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;Fizz&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">5</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;Buzz&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 91,
        "NUMBER": 414,
        "TITLE": "Third Maximum Number",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>non-empty</b> array of integers, return the <b>third</b> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [3, 2, 1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> The third maximum is 1.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [1, 2]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> The third maximum does not exist, so the maximum (2) is returned instead.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> [2, 2, 3, 1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> Note that the third maximum here means the third maximum distinct number.\nBoth numbers with value 2 are both considered as second maximum.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">thirdMax</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Integer max1 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        Integer max2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        Integer max3 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Integer n <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>max1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>max2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>max3<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">&gt;</span> max1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                max3 <span style=\"color: #666666\">=</span> max2<span style=\"color: #666666\">;</span>\n                max2 <span style=\"color: #666666\">=</span> max1<span style=\"color: #666666\">;</span>\n                max1 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">&gt;</span> max2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                max3 <span style=\"color: #666666\">=</span> max2<span style=\"color: #666666\">;</span>\n                max2 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max3 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">&gt;</span> max3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                max3 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max3 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> max1 <span style=\"color: #666666\">:</span> max3<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 92,
        "NUMBER": 415,
        "TITLE": "Add Strings",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code>.</p>\n\n    <p><b>Note:</b>\n    </p><ol>\n    <li>The length of both <code>num1</code> and <code>num2</code> is &lt; 5100.</li>\n    <li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\n    <li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\n    <li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Time Complexity: O(m + n)</span>\n    <span style=\"color: #408080; font-style: italic\">// Auxiliary Space: O(m + n)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">addStrings</span><span style=\"color: #666666\">(</span>String num1<span style=\"color: #666666\">,</span> String num2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> num1Array <span style=\"color: #666666\">=</span> num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> num2Array <span style=\"color: #666666\">=</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> carry <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> a <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span>num1Array<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">--]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #B00040\">int</span> b <span style=\"color: #666666\">=</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span>num2Array<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">--]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> a <span style=\"color: #666666\">+</span> b <span style=\"color: #666666\">+</span> carry<span style=\"color: #666666\">;</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(0,</span> sum <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10);</span>\n            carry <span style=\"color: #666666\">=</span> sum <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 93,
        "NUMBER": 434,
        "TITLE": "Number of Segments in a String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p>\n\n    <p>Please note that the string does not contain any <b>non-printable</b> characters.</p>\n\n    <p><b>Example:</b></p>\n    <pre><b>Input:</b> \"Hello, my name is John\"\n<b>Output:</b> 5\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countSegments</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String trimmed <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> trimmed<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> trimmed<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\\\s+&quot;</span><span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 94,
        "NUMBER": 437,
        "TITLE": "Path Sum III",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are given a binary tree in which each node contains an integer value.</p>\n\n    <p>Find the number of paths that sum to a given value.</p>\n\n    <p>The path does not need to start or end at the root or a leaf, but it must go downwards\n        (traveling only from parent nodes to child nodes).</p>\n\n    <p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n\n    </p><p><b>Example:</b>\n</p><pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <b>5</b>   <b>-3</b>\n   <b>/</b> <b>\\</b>    <b>\\</b>\n  <b>3</b>   <b>2</b>   <b>11</b>\n / \\   <b>\\</b>\n3  -2   <b>1</b>\n\nReturn 3. The paths that sum to 8 are:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3. -3 -&gt; 11\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">pathSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> pathSumFrom<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> pathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span>\n                pathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">pathSumFrom</span><span style=\"color: #666666\">(</span>TreeNode node<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> sum <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0)</span>\n                <span style=\"color: #666666\">+</span> pathSumFrom<span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> sum <span style=\"color: #666666\">-</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #666666\">+</span> pathSumFrom<span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> sum <span style=\"color: #666666\">-</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 95,
        "NUMBER": 438,
        "TITLE": "Find All Anagrams in a String",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string <b>s</b> and a <b>non-empty</b> string <b>p</b>, find all the start indices of <b>p</b>'s anagrams in <b>s</b>.</p>\n\n    <p>Strings consists of lowercase English letters only and the length of both strings <b>s</b> and <b>p</b> will not be larger than 20,100.</p>\n\n    <p>The order of output does not matter.</p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>Input:</b>\ns: \"cbaebabacd\" p: \"abc\"\n\n<b>Output:</b>\n[0, 6]\n\n<b>Explanation:</b>\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>Input:</b>\ns: \"abab\" p: \"ab\"\n\n<b>Output:</b>\n[0, 1, 2]\n\n<b>Explanation:</b>\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findAnagrams</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> chars <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> p <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span>\n            chars<span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++;</span>\n\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> count <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">// Go over the string</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// If the char at start appeared in p, we increase count</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">==</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> chars<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0)</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #408080; font-style: italic\">// If the char at end appeared in p (since it&#39;s not -1 after decreasing),</span>\n            <span style=\"color: #408080; font-style: italic\">// we decrease count</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(--</span>chars<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0)</span>\n                count<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 96,
        "NUMBER": 441,
        "TITLE": "Arranging Coins",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p>\n\n    <p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p>\n\n    <p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>\n\n    <p><b>Example 1:</b>\n    </p><pre>n = 5\n\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤\n\nBecause the 3rd row is incomplete, we return 2.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>n = 8\n\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤ ¤\n¤ ¤\n\nBecause the 4th row is incomplete, we return 3.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">arrangeCoins</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;&gt;&gt;</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((0.5</span> <span style=\"color: #666666\">*</span> mid <span style=\"color: #666666\">*</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">0.5</span> <span style=\"color: #666666\">*</span> mid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                start <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                end <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> start <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 97,
        "NUMBER": 447,
        "TITLE": "Number of Boomerangs",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given <i>n</i> points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<b>the order of the tuple matters</b>).</p>\n\n    <p>Find the number of boomerangs. You may assume that <i>n</i> will be at most <b>500</b> and coordinates of points are all in the range <b>[-10000, 10000]</b> (inclusive).</p>\n\n    <p><b>Example:</b><br>\n    </p><pre><b>Input:</b>\n[[0,0],[1,0],[2,0]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nThe two boomerangs are <b>[[1,0],[0,0],[2,0]]</b> and <b>[[1,0],[2,0],[0,0]]</b>\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity:  O(n^2)</span>\n    <span style=\"color: #408080; font-style: italic\">// Space complexity: O(n)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numberOfBoomerangs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> points<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> j<span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #B00040\">int</span> d <span style=\"color: #666666\">=</span> getDistance<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]);</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">values</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                res <span style=\"color: #666666\">+=</span> val <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>val <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getDistance</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> dx <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> dy <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[1];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> dx <span style=\"color: #666666\">*</span> dx <span style=\"color: #666666\">+</span> dy <span style=\"color: #666666\">*</span> dy<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 98,
        "NUMBER": 448,
        "TITLE": "Find All Numbers Disappeared in an Array",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of integers where 1 ? a[i] ? <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p>\n\n    <p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p>\n\n    <p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\n[4,3,2,7,8,2,3,1]\n\n<b>Output:</b>\n[5,6]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * 1. mark elements as negative using nums[nums[i] -1] = -nums[nums[i]-1].</span>\n<span style=\"color: #408080; font-style: italic\">     * In this way all the numbers that we have seen will be marked as negative.</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. In the second iteration, if a value is not marked as negative,</span>\n<span style=\"color: #408080; font-style: italic\">     * it implies we have never seen that index before, so just add it to the return list.</span>\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findDisappearedNumbers</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> ret <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>val<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                nums<span style=\"color: #666666\">[</span>val<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-</span>nums<span style=\"color: #666666\">[</span>val<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                ret<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ret<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 99,
        "NUMBER": 453,
        "TITLE": "Minimum Moves to Equal Array Elements",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>non-empty</b> integer array of size <i>n</i>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <i>n</i> - 1 elements by 1.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\n[1,2,3]\n\n<b>Output:</b>\n3\n\n<b>Explanation:</b>\nOnly three moves are needed (remember each move increments two elements):\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Adding 1 to n - 1 elements is the same as subtracting 1 from one element,</span>\n<span style=\"color: #408080; font-style: italic\">     * w.r.t goal of making the elements in the array equal.</span>\n<span style=\"color: #408080; font-style: italic\">     * So, best way to do this is make all the elements in the array equal to the min element.</span>\n<span style=\"color: #408080; font-style: italic\">     * sum(array) - n * minimum</span>\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minMoves</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> res <span style=\"color: #666666\">+=</span> n <span style=\"color: #666666\">-</span> min<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 100,
        "NUMBER": 455,
        "TITLE": "Assign Cookies",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g<sub>i</sub>, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s<sub>j</sub>. If s<sub>j</sub> &gt;= g<sub>i</sub>, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n</p>\n\n    <p><b>Note:</b><br>\n        You may assume the greed factor is always positive. <br>\n        You cannot assign more than one cookie to one child.\n    </p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,2,3], [1,1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [1,2], [1,2,3]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.\nYou have 3 cookies and their sizes are big enough to gratify all of the children,\nYou need to output 2.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Just assign the cookies starting from the child with</span>\n    <span style=\"color: #408080; font-style: italic\">// less greediness to maximize the number of happy children</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findContentChildren</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> g<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>g<span style=\"color: #666666\">);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> g<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>g<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> s<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> i<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 101,
        "NUMBER": 459,
        "TITLE": "Repeated Substring Pattern",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000.\n\n    </p><p><b>Example 1:</b><br>\n</p><pre><b>Input:</b> \"abab\"\n\n<b>Output:</b> True\n\n<b>Explanation:</b> It's the substring \"ab\" twice.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> \"aba\"\n\n<b>Output:</b> False\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> \"abcabcabcabc\"\n\n<b>Output:</b> True\n\n<b>Explanation:</b> It's the substring \"abc\" four times. (And the substring \"abcabc\" twice.)\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">repeatedSubstringPattern</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//This is the kmp issue</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prefix <span style=\"color: #666666\">=</span> getOverlay<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> prefix<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> n <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> len<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Generate the prefix function for pattern itself</span>\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">getOverlay</span><span style=\"color: #666666\">(</span>String pattern<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>index <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">?</span> index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 102,
        "NUMBER": 461,
        "TITLE": "Hamming Distance",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\n\n    <p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\n\n    <p><b>Note:</b><br>\n        0 <= <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b> x = 1, y = 4\n\n<b>Output:</b> 2\n\n<b>Explanation:</b>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       |   |\n\nThe above arrows point to positions where the corresponding bits are different.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hammingDistance</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> z <span style=\"color: #666666\">=</span> x <span style=\"color: #666666\">^</span> y<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=31;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> offset <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>z <span style=\"color: #666666\">&amp;</span> offset<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                res<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 103,
        "NUMBER": 463,
        "TITLE": "Island Perimeter",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.</p>\n\n    <p><b>Example:</b>\n    </p><pre>[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\nAnswer: 16\nExplanation: The perimeter is the 16 yellow stripes in the image below:\n<img src=\"https://leetcode.com/static/images/problemset/island.png\">\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * 1. loop over the matrix and count the number of islands;</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. if the current dot is an island,</span>\n<span style=\"color: #408080; font-style: italic\">     * count if it has any right neighbour or down neighbour;</span>\n<span style=\"color: #408080; font-style: italic\">     * 3. the result is islands * 4 - neighbours * 2</span>\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">islandPerimeter</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> grid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> islands <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> neighbours <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> grid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    islands<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// count islands</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> grid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n                        neighbours<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// count down neighbours</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n                        neighbours<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// count right neighbours</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> islands <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">-</span> neighbours <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">2;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 104,
        "NUMBER": 475,
        "TITLE": "Heaters",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>\n\n    <p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\n\n    <p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n    <li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n    <li>As long as a house is in the heaters' warm radius range, it can be warmed.</li>\n    <li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,2,3],[2]\n<b>Output:</b> 1\n<b>Explanation:</b> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [1,2,3,4],[1,4]\n<b>Output:</b> 1\n<b>Explanation:</b> The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findRadius</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> houses<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> heaters<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>houses <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> houses<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>houses<span style=\"color: #666666\">);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>heaters<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> houses<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// if house is located after some heater</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> heaters<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// then find a heater that stands after the house</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">!=</span> heaters<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> heaters<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                    j<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// corner case when the heater is the first  one</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> heaters<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                ans <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>ans<span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>heaters<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]));</span>\n                i<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// if house is located between jth and j-1th heaters</span>\n            <span style=\"color: #B00040\">int</span> dist <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> heaters<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> heaters<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> houses<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            ans <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>ans<span style=\"color: #666666\">,</span> dist<span style=\"color: #666666\">);</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 105,
        "NUMBER": 476,
        "TITLE": "Number Complement",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n    <li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> 5\n<b>Output:</b> 2\n<b>Explanation:</b> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> 1\n<b>Output:</b> 0\n<b>Explanation:</b> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findComplement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> mask <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">highestOneBit</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">~</span>num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">&amp;</span> mask<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 106,
        "NUMBER": 479,
        "TITLE": "Largest Palindrome Product",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Find the largest palindrome made from the product of two n-digit numbers.</p>\n    <p> Since the result could be very large, you should return the largest palindrome mod 1337.</p>\n\n    <p><b>Example:</b>\n    </p><p>Input: 2</p>\n    <p>Output: 987</p>\n    <p>Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n    </p>\n    <p></p>\n\n\n    <p><b>Note:</b>\n    </p><p>The range of n is [1,8].</p>\n    <p></p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">largestPalindrome</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">9;</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> v <span style=\"color: #666666\">=</span> max <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> v <span style=\"color: #666666\">&gt;</span> max <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span> v<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            StringBuilder vStr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>v<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">long</span> u <span style=\"color: #666666\">=</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>v <span style=\"color: #666666\">+</span> vStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">long</span> x <span style=\"color: #666666\">=</span> max<span style=\"color: #666666\">;</span> x <span style=\"color: #666666\">*</span> x <span style=\"color: #666666\">&gt;=</span> u<span style=\"color: #666666\">;</span> x<span style=\"color: #666666\">--)</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>u <span style=\"color: #666666\">%</span> x <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">(</span>u <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">1337);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 107,
        "NUMBER": 485,
        "TITLE": "Max Consecutive Ones",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,1,0,1,1,1]\n<b>Output:</b> 3\n<b>Explanation:</b> The first two digits or the last three digits are consecutive 1s.\n    The maximum number of consecutive 1s is 3.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b>\n    </p><ul>\n    <li>The input array will only contain <code>0</code> and <code>1</code>.</li>\n    <li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMaxConsecutiveOnes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n        \tcount<span style=\"color: #666666\">++;</span>\n        \tresult <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">,</span> result<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 108,
        "NUMBER": 500,
        "TITLE": "Keyboard Row",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a List of words, return the words that can be typed using letters of <b>alphabet</b> on only one row's of American keyboard like the image below. </p>\n\n    <br>\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/keyboard.png\" alt=\"American keyboard\">\n    </p>\n    <br>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\n<b>Output:</b> [\"Alaska\", \"Dad\"]\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>You may use one character in the keyboard more than once.</li>\n    <li>You may assume the input string will only contain letters of alphabet.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String<span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">findWords</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> inds <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> wordLen <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>wordLen <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #B00040\">int</span> initalRow <span style=\"color: #666666\">=</span> getRowNum<span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">++));</span>\n            <span style=\"color: #B00040\">boolean</span> rowChanged <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> wordLen<span style=\"color: #666666\">){</span>\n            \t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>initalRow <span style=\"color: #666666\">!=</span> getRowNum<span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">++))){</span>\n            \t\trowChanged <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            \t\t<span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            \t<span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>rowChanged<span style=\"color: #666666\">){</span>\n            \tinds<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        String<span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">[</span>count<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> ind <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>inds<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]){</span>\n                res<span style=\"color: #666666\">[</span>ind<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                ind<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRowNum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> firstRow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;Q&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;q&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;W&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;w&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;E&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;R&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;r&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;T&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;t&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;Y&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;y&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;U&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;u&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;I&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;i&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;o&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;P&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;p&#39;</span><span style=\"color: #666666\">};</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> secondRow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;S&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;s&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;D&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;d&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;F&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;f&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;G&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;g&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;H&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;h&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;J&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;j&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;K&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;k&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;L&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;l&#39;</span><span style=\"color: #666666\">};</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> firstRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>firstRow<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> secondRow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>secondRow<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">3;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 109,
        "NUMBER": 543,
        "TITLE": "Diameter of Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <b>longest</b> path between any two nodes in a tree. This path may or may not pass through the root.\n</p>\n\n    <p>\n        <b>Example:</b><br>\n        Given a binary tree <br>\n    </p><pre>          1\n         / \\\n        2   3\n       / \\\n      4   5\n</pre>\n    <p></p>\n    <p>\n        Return <b>3</b>, which is the length of the path [4,2,1,3] or [5,2,1,3].\n    </p>\n\n    <p><b>Note:</b>\n        The length of path between two nodes is represented by the number of edges between them.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">diameterOfBinaryTree</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> diameterOfLeftTree <span style=\"color: #666666\">=</span> diameterOfBinaryTree<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> diameterOfRightTree <span style=\"color: #666666\">=</span> diameterOfBinaryTree<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Get edges&#39; number of left subtree</span>\n        <span style=\"color: #B00040\">int</span> leftTreeLen <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> getLen<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #408080; font-style: italic\">// Get edges&#39; number of right subtree</span>\n        <span style=\"color: #B00040\">int</span> rightTreeLen <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> getLen<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> rootLen <span style=\"color: #666666\">=</span> leftTreeLen <span style=\"color: #666666\">+</span> rightTreeLen<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>diameterOfLeftTree<span style=\"color: #666666\">,</span> diameterOfRightTree<span style=\"color: #666666\">),</span> rootLen<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getLen</span><span style=\"color: #666666\">(</span>TreeNode node<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> leftTreeLen <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> getLen<span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> rightTreeLen <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> getLen<span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>leftTreeLen<span style=\"color: #666666\">,</span> rightTreeLen<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 110,
        "NUMBER": 551,
        "TITLE": "Student Attendance Record I",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>You are given a string representing an attendance record for a student. The record only contains the following three characters:\n\n    </p><p>\n</p><ol>\n    <li><b>'A'</b> : Absent. </li>\n    <li><b>'L'</b> : Late.</li>\n    <li> <b>'P'</b> : Present. </li>\n</ol>\n    <p></p>\n\n    <p>\n        A student could be rewarded if his attendance record doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.    </p>\n\n    <p>You need to return whether the student could be rewarded according to his attendance record.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> \"PPALLP\"\n<b>Output:</b> True\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> \"PPALLL\"\n<b>Output:</b> False\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">checkRecord</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> Acount <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">){</span>\n                Acount<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Acount <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;L&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;L&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;L&#39;</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 111,
        "NUMBER": 557,
        "TITLE": "Reverse Words in a String III",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> \"Let's take LeetCode contest\"\n<b>Output:</b> \"s'teL ekat edoCteeL tsetnoc\"\n</pre>\n    <p></p>\n\n    <p><b>Note:</b>\n        In the string, each word is separated by single space and there will not be any extra space in the string.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">reverseWords</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        String<span style=\"color: #666666\">[]</span> strs <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">!=</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1){</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 112,
        "NUMBER": 575,
        "TITLE": "Distribute Candies",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Given an integer array with <b>even</b> length, where different numbers in this array represent different <b>kinds</b> of candies. Each number means one candy of the corresponding kind. You need to distribute these candies <b>equally</b> in number to brother and sister. Return the maximum number of <b>kinds</b> of candies the sister could gain.\n\n    </p><p><b>Example 1:</b><br>\n</p><pre><b>Input:</b> candies = [1,1,2,2,3,3]\n<b>Output:</b> 3\n<b>Explanation:</b>\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too.\nThe sister has three different kinds of candies.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> candies = [1,1,2,3]\n<b>Output:</b> 2\n<b>Explanation:</b> For example, the sister has candies [2,3] and the brother has candies [1,1].\nThe sister has two different kinds of candies, the brother has only one kind of candies.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b>\n    </p><ol>\n    <li>The length of the given array is in range [2, 10,000], and will be even.</li>\n    <li>The number in given array is in range [-100,000, 100,000].</li>\n    <ol>\n        <p></p><p></p>\n    </ol></ol></div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">distributeCandies</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candies<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashSet <span style=\"color: #666666\">&lt;</span> Integer <span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> candy<span style=\"color: #666666\">:</span> candies<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>candy<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">(),</span> candies<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 113,
        "NUMBER": 581,
        "TITLE": "Shortest Unsorted Continuous Subarray",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer array, you need to find one <b>continuous subarray</b> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too. </p>\n\n    <p>You need to find the <b>shortest</b> such subarray and output its length.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [2, 6, 4, 8, 10, 9, 15]\n<b>Output:</b> 5\n<b>Explanation:</b> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Then length of the input array is in range [1, 10,000].</li>\n    <li>The input array may contain duplicates, so ascending order here means <b>&lt;=</b>. </li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findUnsortedSubarray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">,</span> max <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Find where the unsorted array sure start</span>\n        <span style=\"color: #408080; font-style: italic\">// and get min after the turning point</span>\n        <span style=\"color: #B00040\">boolean</span> flag <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span>\n                flag <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>flag<span style=\"color: #666666\">)</span>\n                min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Find where the unsorted array sure end</span>\n        <span style=\"color: #408080; font-style: italic\">// and get the max after the turning point</span>\n        flag <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1])</span>\n                flag <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>flag<span style=\"color: #666666\">)</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Find the actual start point where</span>\n        <span style=\"color: #408080; font-style: italic\">// it is less than min</span>\n        <span style=\"color: #B00040\">int</span> l<span style=\"color: #666666\">,</span> r<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> l <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> l<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>min <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">])</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Find the actual start point where</span>\n        <span style=\"color: #408080; font-style: italic\">// it is greater than max</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> r <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> r<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">])</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> r <span style=\"color: #666666\">-</span> l <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> r <span style=\"color: #666666\">-</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 114,
        "NUMBER": 594,
        "TITLE": "Longest Harmonious Subsequence",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>We define a harmonious array is an array where the difference between its maximum value and its minimum value is <b>exactly</b> 1.</p>\n\n    <p>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible <a href=\"https://en.wikipedia.org/wiki/Subsequence\">subsequences</a>.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,3,2,2,5,2,3,7]\n<b>Output:</b> 5\n<b>Explanation:</b> The longest harmonious subsequence is [3,2,2,2,3].\n</pre>\n    <p></p>\n\n    <p><b>Note:</b>\n        The length of the input array will not exceed 20,000.\n    </p>\n\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findLHS</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> numsMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> cur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">putIfAbsent</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n            numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)){</span>\n                cur <span style=\"color: #666666\">=</span> numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> numsMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n            res <span style=\"color: #666666\">=</span> cur <span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">?</span> cur <span style=\"color: #666666\">:</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 115,
        "NUMBER": 598,
        "TITLE": "Range Addition II",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an m * n matrix <b>M</b> initialized with all <b>0</b>'s and several update operations.</p>\n    <p>Operations are represented by a 2D array, and each operation is represented by an array with two <b>positive</b> integers <b>a</b> and <b>b</b>, which means <b>M[i][j]</b> should be <b>added by one</b> for all <b>0 &lt;= i &lt; a</b> and <b>0 &lt;= j &lt; b</b>. </p>\n    <p>You need to count and return the number of maximum integers in the matrix after performing all the operations.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<b>Output:</b> 4\n<b>Explanation:</b>\nInitially, M =\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\nAfter performing [2,2], M =\n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\nAfter performing [3,3], M =\n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The range of m and n is [1,40000].</li>\n    <li>The range of a is [1,m], and the range of b is [1,n].</li>\n    <li>The range of operations size won't exceed 10,000.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Just find the size of the left upper corner</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity : O(x)</span>\n    <span style=\"color: #408080; font-style: italic\">// Space complexity : O(1)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxCount</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> ops<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> op<span style=\"color: #666666\">:</span> ops<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            m <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>m<span style=\"color: #666666\">,</span> op<span style=\"color: #666666\">[0]);</span>\n            n <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> op<span style=\"color: #666666\">[1]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> m <span style=\"color: #666666\">*</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 116,
        "NUMBER": 599,
        "TITLE": "Minimum Index Sum of Two Lists",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\n</p>\n    <p>\n        You need to help them find out their <b>common interest</b> with the <b>least list index sum</b>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\n    </p>\n\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\n<b>Output:</b> [\"Shogun\"]\n<b>Explanation:</b> The only restaurant they both like is \"Shogun\".\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"KFC\", \"Shogun\", \"Burger King\"]\n<b>Output:</b> [\"Shogun\"]\n<b>Explanation:</b> The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\n</pre>\n    <p></p>\n\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The length of both lists will be in the range of [1, 1000].</li>\n    <li>The length of strings in both lists will be in the range of [1, 30].</li>\n    <li>The index is starting from 0 to the list length minus 1.</li>\n    <li>No duplicates in both lists.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String<span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">findRestaurant</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> list1<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[]</span> list2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> string1ToIndex <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> commonToSum <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> minSum <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Put list 1 into map</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span>list1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            string1ToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>list1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Get common interests and track min sum of indexes</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span>list2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>string1ToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>list2<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])){</span>\n                <span style=\"color: #B00040\">int</span> indexSum <span style=\"color: #666666\">=</span> string1ToIndex<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list2<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">+</span> i<span style=\"color: #666666\">;</span>\n                minSum <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>minSum<span style=\"color: #666666\">,</span> indexSum<span style=\"color: #666666\">);</span>\n                commonToSum<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>list2<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> indexSum<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> resList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> entry <span style=\"color: #666666\">:</span> commonToSum<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">entrySet</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>entry<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> minSum<span style=\"color: #666666\">)</span>\n                resList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>entry<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getKey</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        String<span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">[</span>resList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> resList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> resList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 117,
        "NUMBER": 605,
        "TITLE": "Can Place Flowers",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.</p>\n\n    <p>Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number <b>n</b>, return if <b>n</b> new flowers can be planted in it without violating the no-adjacent-flowers rule.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> flowerbed = [1,0,0,0,1], n = 1\n<b>Output:</b> True\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> flowerbed = [1,0,0,0,1], n = 2\n<b>Output:</b> False\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The input array won't violate no-adjacent-flowers rule.</li>\n    <li>The input array size is in the range of [1, 20000].</li>\n    <li><b>n</b> is a non-negative integer which won't exceed the input array size.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canPlaceFlowers</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> flowerbed<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> flowerbed<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>flowerbed<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> flowerbed<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                  <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> flowerbed<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> flowerbed<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0))</span> <span style=\"color: #666666\">{</span>\n                flowerbed<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count <span style=\"color: #666666\">&gt;=</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 118,
        "NUMBER": 606,
        "TITLE": "Construct String from Binary Tree",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\n\n    <p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> Binary tree: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /\n  4\n\n<b>Output:</b> \"1(2(4))(3)\"\n<br><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br>but you need to omit all the unnecessary empty parenthesis pairs. <br>And it will be \"1(2(4))(3)\".\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> Binary tree: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\\n      4\n\n<b>Output:</b> \"1(2()(4))(3)\"\n<br><b>Explanation:</b> Almost the same as the first example, <br>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">tree2str</span><span style=\"color: #666666\">(</span>TreeNode t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>t <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Case 2: None of the left or the right child exist for the current node.</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Case 3: Only the left child exists for the current node.</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;(&quot;</span> <span style=\"color: #666666\">+</span> tree2str<span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Case 1: Both the left child and the right child exist for the current node.</span>\n        <span style=\"color: #408080; font-style: italic\">// Case 4: Only the right child exists for the current node.</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;(&quot;</span> <span style=\"color: #666666\">+</span> tree2str<span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;)(&quot;</span> <span style=\"color: #666666\">+</span> tree2str<span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">tree2str</span><span style=\"color: #666666\">(</span>TreeNode t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        Stack <span style=\"color: #666666\">&lt;</span> TreeNode <span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">();</span>\n        stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">);</span>\n        Set <span style=\"color: #666666\">&lt;</span> TreeNode <span style=\"color: #666666\">&gt;</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">();</span>\n        String s <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            t <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                s <span style=\"color: #666666\">+=</span> <span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">);</span>\n                s <span style=\"color: #666666\">+=</span> <span style=\"color: #BA2121\">&quot;(&quot;</span> <span style=\"color: #666666\">+</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    s <span style=\"color: #666666\">+=</span> <span style=\"color: #BA2121\">&quot;()&quot;</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(1,</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 119,
        "NUMBER": 617,
        "TITLE": "Merge Two Binary Trees",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\n</p>\n    <p>\n        You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\n    </p>\n\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\n\tTree 1                     Tree 2\n          1                         2\n         / \\                       / \\\n        3   2                     1   3\n       /                           \\   \\\n      5                             4   7\n<b>Output:</b>\nMerged tree:\n\t     3\n\t    / \\\n\t   4   5\n\t  / \\   \\\n\t 5   4   7\n</pre>\n    <p></p>\n\n\n    <p><b>Note:</b>\n        The merging process must start from the root nodes of both trees.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">mergeTrees</span><span style=\"color: #666666\">(</span>TreeNode t1<span style=\"color: #666666\">,</span> TreeNode t2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>t1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> t2<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>t2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> t1<span style=\"color: #666666\">;</span>\n        TreeNode newRoot <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>t1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> t2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        newRoot<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> mergeTrees<span style=\"color: #666666\">(</span>t1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> t2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        newRoot<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> mergeTrees<span style=\"color: #666666\">(</span>t1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> t2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> newRoot<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 120,
        "NUMBER": 624,
        "TITLE": "Maximum Distance in Arrays",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given <code>m</code> arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers <code>a</code> and <code>b</code> to be their absolute difference <code>|a-b|</code>. Your task is to find the maximum distance.\n</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\n[[1,2,3],\n [4,5],\n [1,2,3]]\n<b>Output:</b> 4\n<b>Explanation:</b>\nOne way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Each given array will have at least 1 number. There will be at least two non-empty arrays.</li>\n    <li>The total number of the integers in <b>all</b> the <code>m</code> arrays will be in the range of [2, 10000].</li>\n    <li>The integers in the <code>m</code> arrays will be in the range of [-10000, 10000].</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxDistance</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> arrays<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #B00040\">int</span> curMin <span style=\"color: #666666\">=</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0);</span>\n            <span style=\"color: #B00040\">int</span> curMax <span style=\"color: #666666\">=</span> arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            res <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> curMax <span style=\"color: #666666\">-</span> min<span style=\"color: #666666\">);</span>\n            res <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> max <span style=\"color: #666666\">-</span> curMin<span style=\"color: #666666\">);</span>\n            min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> curMin<span style=\"color: #666666\">);</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> curMax<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 121,
        "NUMBER": 628,
        "TITLE": "Maximum Product of Three Numbers",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,2,3]\n<b>Output:</b> 6\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [1,2,3,4]\n<b>Output:</b> 24\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The length of the given array will be in range [3,10<sup>4</sup>] and all elements are in the range [-1000, 1000].</li>\n    <li>Multiplication of any three numbers in the input won't exceed the range of 32-bit signed integer.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maximumProduct</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> min1 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">,</span> min2 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> max1 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">,</span> max2 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">,</span> max3 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> min1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                min2 <span style=\"color: #666666\">=</span> min1<span style=\"color: #666666\">;</span>\n                min1 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> min2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>     <span style=\"color: #408080; font-style: italic\">// n lies between min1 and min2</span>\n                min2 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;=</span> max1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>            <span style=\"color: #408080; font-style: italic\">// n is greater than max1, max2 and max3</span>\n                max3 <span style=\"color: #666666\">=</span> max2<span style=\"color: #666666\">;</span>\n                max2 <span style=\"color: #666666\">=</span> max1<span style=\"color: #666666\">;</span>\n                max1 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;=</span> max2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>     <span style=\"color: #408080; font-style: italic\">// n lies betweeen max1 and max2</span>\n                max3 <span style=\"color: #666666\">=</span> max2<span style=\"color: #666666\">;</span>\n                max2 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;=</span> max3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>     <span style=\"color: #408080; font-style: italic\">// n lies betwen max2 and max3</span>\n                max3 <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>min1 <span style=\"color: #666666\">*</span> min2 <span style=\"color: #666666\">*</span> max1<span style=\"color: #666666\">,</span> max1 <span style=\"color: #666666\">*</span> max2 <span style=\"color: #666666\">*</span> max3<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 122,
        "NUMBER": 2,
        "TITLE": "Add Two Numbers",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n\n    <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n    <p style=\"font-family:monospace\">\n        <b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>\n        <b>Output:</b> 7 -&gt; 0 -&gt; 8</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(1)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * Create carry to track the carry over</span>\n<span style=\"color: #408080; font-style: italic\">     * Create a pointer to track the node position</span>\n<span style=\"color: #408080; font-style: italic\">     * build the list while l1 not null or l2 not null or carry &gt; 0</span>\n<span style=\"color: #408080; font-style: italic\">     *      reset next node and carry</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">addTwoNumbers</span><span style=\"color: #666666\">(</span>ListNode l1<span style=\"color: #666666\">,</span> ListNode l2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Since both lists are non-empty</span>\n        ListNode head <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">((</span>l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10);</span>\n        <span style=\"color: #B00040\">int</span> carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span>\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Go to next nodes</span>\n        l1 <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        l2 <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> l2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> carry <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #B00040\">int</span> totalVal <span style=\"color: #666666\">=</span> carry<span style=\"color: #666666\">;</span>\n            totalVal <span style=\"color: #666666\">+=</span> l1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            totalVal <span style=\"color: #666666\">+=</span> l2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            carry <span style=\"color: #666666\">=</span> totalVal <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span>\n            cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>totalVal <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10);</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            l1 <span style=\"color: #666666\">=</span> l1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">:</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            l2 <span style=\"color: #666666\">=</span> l2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">:</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 123,
        "NUMBER": 3,
        "TITLE": "Longest Substring Without Repeating Characters",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\n\n    <p><b>Examples:</b></p>\n\n    <p>Given <code>\"abcabcbb\"</code>, the answer is <code>\"abc\"</code>, which the length is 3.</p>\n\n    <p>Given <code>\"bbbbb\"</code>, the answer is <code>\"b\"</code>, with the length of 1.</p>\n\n    <p>Given <code>\"pwwkew\"</code>, the answer is <code>\"wke\"</code>, with the length of 3. Note that the answer must be a <b>substring</b>, <code>\"pwke\"</code> is a <i>subsequence</i> and not a substring.</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * Create a pointer to track the end of the substring</span>\n<span style=\"color: #408080; font-style: italic\">     * Create a pointer to track the start of the substring</span>\n<span style=\"color: #408080; font-style: italic\">     * Create a map for char to its latest index</span>\n<span style=\"color: #408080; font-style: italic\">     * Set both start and end pointer to the first char</span>\n<span style=\"color: #408080; font-style: italic\">     * while end is not the end of the s</span>\n<span style=\"color: #408080; font-style: italic\">     *  if(map have end char)</span>\n<span style=\"color: #408080; font-style: italic\">     *      update start pointer</span>\n<span style=\"color: #408080; font-style: italic\">     *  update max length</span>\n<span style=\"color: #408080; font-style: italic\">     *  put the index into the map for the char     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">lengthOfLongestSubstring</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> startInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> endInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> maxLen <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> charToIndMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>endInd <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>endInd<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>charToIndMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                startInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>charToIndMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&gt;</span> startInd <span style=\"color: #666666\">?</span>\n                        <span style=\"color: #666666\">(</span>charToIndMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">:</span> startInd<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            maxLen <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxLen<span style=\"color: #666666\">,</span> endInd <span style=\"color: #666666\">-</span> startInd <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            charToIndMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> endInd<span style=\"color: #666666\">++);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxLen<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 124,
        "NUMBER": 5,
        "TITLE": "Longest Palindromic Substring",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a string <b>s</b>, find the longest palindromic substring in <b>s</b>. You may assume that the maximum length of <b>s</b> is 1000.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b> \"babad\"\n\n<b>Output:</b> \"bab\"\n\n<b>Note:</b> \"aba\" is also a valid answer.\n</pre>\n    <p></p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b> \"cbbd\"\n\n<b>Output:</b> \"bb\"\n</pre>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(n^2)</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(1)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * 1. Palindrome with center in the middle</span>\n<span style=\"color: #408080; font-style: italic\">     *  for each element scan both side until they are different</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. Palindrome with center of two elements in the middle</span>\n<span style=\"color: #408080; font-style: italic\">     *  for every two elements scan both side until they are different</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">longestPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">;}</span>\n\n        String longest <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// get longest palindrome with center of i</span>\n            String tmp <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> longest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                longest <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// get longest palindrome with center of i, i+1</span>\n            tmp <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> longest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                longest <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> longest<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Given a center, either one letter or two letter,</span>\n    <span style=\"color: #408080; font-style: italic\">// Find longest palindrome</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> begin<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>begin <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> end <span style=\"color: #666666\">&lt;=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span>\n                <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>begin<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            begin<span style=\"color: #666666\">--;</span>\n            end<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>begin <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 125,
        "NUMBER": 6,
        "TITLE": "ZigZag Conversion",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    The string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n</p><pre>P   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n    And then read line by line: <code>\"PAHNAPLSIIGYIR\"</code><p></p>\n\n    <p>\n        Write the code that will take a string and make this conversion given a number of rows:\n\n    </p><pre>string convert(string text, int nRows);</pre>\n\n    <code>convert(\"PAYPALISHIRING\", 3)</code> should return <code>\"PAHNAPLSIIGYIR\"</code>.\n    <p></p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">convert</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> numRows<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> numRows <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// string builders for each row</span>\n        StringBuilder<span style=\"color: #666666\">[]</span> sbs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">[</span>numRows<span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">// Have to initialize each element this way</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> sbs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            sbs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> rowFlag <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// flag to incr or decr</span>\n        <span style=\"color: #B00040\">int</span> rowInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// index for rows</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            sbs<span style=\"color: #666666\">[</span>rowInd<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rowInd <span style=\"color: #666666\">==</span> numRows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n                rowFlag <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rowInd <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                rowFlag <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            rowInd <span style=\"color: #666666\">+=</span> rowFlag<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>StringBuilder sb <span style=\"color: #666666\">:</span> sbs<span style=\"color: #666666\">){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 126,
        "NUMBER": 8,
        "TITLE": "String to Integer (atoi)",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement <span style=\"font-family:monospace\">atoi</span> to convert a string to an integer.</p>\n\n    <p><b>Hint:</b> Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>\n\n    <p>\n        <b>Notes:</b>\n        It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front. </p>\n\n    <div class=\"spoilers\" style=\"display: none;\"><b>Requirements for atoi:</b>\n\n        <p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n\n        <p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n\n        <p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n\n        <p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.\n        </p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">myAtoi</span><span style=\"color: #666666\">(</span>String str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String curStr <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #B00040\">int</span> ind <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">boolean</span> isPositive <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span> longRes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            isPositive <span style=\"color: #666666\">=</span> curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span><span style=\"color: #666666\">;</span>\n            ind<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>ind <span style=\"color: #666666\">&lt;</span> curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isDigit</span><span style=\"color: #666666\">(</span>curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>ind<span style=\"color: #666666\">))){</span>\n            longRes <span style=\"color: #666666\">=</span> longRes<span style=\"color: #666666\">*10</span> <span style=\"color: #666666\">+</span> curStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>ind<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>isPositive <span style=\"color: #666666\">&amp;&amp;</span> longRes <span style=\"color: #666666\">&gt;=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>isPositive <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">-1*</span>longRes <span style=\"color: #666666\">&lt;=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            ind<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> isPositive <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>longRes <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1*(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>longRes<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 127,
        "NUMBER": 11,
        "TITLE": "Container With Most Water",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n</p>\n    <p>Note: You may not slant the container and <i>n</i> is at least 2.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxArea</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> height<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> front <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> tail <span style=\"color: #666666\">=</span> height<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>front <span style=\"color: #666666\">&lt;</span> tail<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            result <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>front<span style=\"color: #666666\">],</span> height<span style=\"color: #666666\">[</span>tail<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>tail <span style=\"color: #666666\">-</span> front<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>front<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> height<span style=\"color: #666666\">[</span>tail<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                front<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                tail<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 128,
        "NUMBER": 12,
        "TITLE": "Integer to Roman",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer, convert it to a roman numeral.\n</p>\n\n    <p>Input is guaranteed to be within the range from 1 to 3999.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">intToRoman</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> romans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&quot;I&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;IV&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;V&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;IX&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;X&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;XL&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;L&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;XC&quot;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&quot;C&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;CD&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;D&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;CM&quot;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&quot;M&quot;</span><span style=\"color: #666666\">};</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> numbers <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{1,</span> <span style=\"color: #666666\">4,</span> <span style=\"color: #666666\">5,</span> <span style=\"color: #666666\">9,</span> <span style=\"color: #666666\">10,</span> <span style=\"color: #666666\">40,</span> <span style=\"color: #666666\">50,</span> <span style=\"color: #666666\">90,</span> <span style=\"color: #666666\">100,</span> <span style=\"color: #666666\">400,</span> <span style=\"color: #666666\">500,</span> <span style=\"color: #666666\">900,</span> <span style=\"color: #666666\">1000};</span>\n\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> index <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>num <span style=\"color: #666666\">-</span> numbers<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0){</span>\n                num <span style=\"color: #666666\">-=</span> numbers<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">];</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>romans<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                index<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 129,
        "NUMBER": 15,
        "TITLE": "3Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n\n    <p><b>Note:</b> The solution set must not contain duplicate triplets.</p>\n\n    <pre>For example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">threeSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">3)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// i for first element</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #408080; font-style: italic\">// Stop if first elem is positive</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// Skip duplicate for first elem</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> secondElemInd <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// track second elem</span>\n            <span style=\"color: #B00040\">int</span> thirdElemInd <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// track third elem</span>\n            <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>secondElemInd <span style=\"color: #666666\">&lt;</span> thirdElemInd<span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// secondElemInd &gt; i + 1 to ensure not first element</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>secondElemInd <span style=\"color: #666666\">&gt;</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>secondElemInd<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>secondElemInd <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]){</span>\n                    secondElemInd<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// skip duplicate for second element</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #408080; font-style: italic\">// Stop if sum of first two element greater than 0</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>secondElemInd<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                sum <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>secondElemInd<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>thirdElemInd<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                    List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n                    li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                    li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>secondElemInd<span style=\"color: #666666\">]);</span>\n                    li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>thirdElemInd<span style=\"color: #666666\">]);</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>li<span style=\"color: #666666\">);</span>\n                    thirdElemInd<span style=\"color: #666666\">--;</span>\n                    secondElemInd<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n                    thirdElemInd<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    secondElemInd<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 130,
        "NUMBER": 16,
        "TITLE": "3Sum Closest",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array <i>S</i> of <i>n</i> integers, find three integers in <i>S</i> such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n\n    <pre>    For example, given array S = {-1 2 1 -4}, and target = 1.\n\n    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">threeSumClosest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n                sum <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        ans <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[2];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">){</span>\n                sum <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">){</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">-</span> ans<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">-</span> sum<span style=\"color: #666666\">)){</span>\n                    ans <span style=\"color: #666666\">=</span> sum<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&gt;</span> target<span style=\"color: #666666\">){</span>\n                    k<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                    j<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 131,
        "NUMBER": 17,
        "TITLE": "Letter Combinations of a Phone Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"row tab-content\" id=\"descriptionContent\">\n    <div class=\"col-md-12\">\n        <div class=\"question-info text-primary\">\n            <ul>\n                <li>Total Accepted: <strong>148194</strong></li>\n                <div class=\"newline-control-xs hide\"></div>\n                <li>Total Submissions: <strong>437141</strong></li>\n                <div class=\"newline-control-xs hide\"></div>\n                <li>Difficulty: <strong>Medium</strong></li>\n                <div class=\"newline-control-sm hide\"></div>\n\n                <li>\n                    Contributor:\n                    <strong>\n                        LeetCode\n                    </strong>\n                </li>\n\n            </ul>\n            <div class=\"sm-line hide\"></div>\n        </div>\n        <div class=\"question-content\">\n            <p></p><p>Given a digit string, return all possible letter combinations that the number could represent.\n        </p>\n\n            <p>\n                A mapping of digit to letters (just like on the telephone buttons) is given below.</p>\n            <p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\"></p>\n\n            <pre><b>Input:</b>Digit string \"23\"\n<b>Output:</b> [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n</pre>\n\n\n        </div>\n    </div>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity ~ O(3^n), Space Compelxity - O(n);</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * backtracking，same as permutation</span>\n<span style=\"color: #408080; font-style: italic\">     * backtracking for the letters for each number</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">letterCombinations</span><span style=\"color: #666666\">(</span>String digits<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>digits<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> pad <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;b&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;c&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;d&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;f&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;g&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;h&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;i&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;j&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;k&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;l&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;m&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;n&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;o&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;p&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;q&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;r&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;s&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;t&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;u&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;v&#39;</span><span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&#39;w&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;y&#39;</span><span style=\"color: #666666\">,</span><span style=\"color: #BA2121\">&#39;z&#39;</span><span style=\"color: #666666\">},</span>\n        <span style=\"color: #666666\">};</span>\n\n        getletters<span style=\"color: #666666\">(</span>digits<span style=\"color: #666666\">,</span> pad<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getletters</span><span style=\"color: #666666\">(</span>String digits<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> pad<span style=\"color: #666666\">,</span>\n                            List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> re<span style=\"color: #666666\">,</span> String str<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> digits<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> digits<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> pad<span style=\"color: #666666\">[</span>temp<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n            getletters<span style=\"color: #666666\">(</span>digits<span style=\"color: #666666\">,</span> pad<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> str <span style=\"color: #666666\">+</span> pad<span style=\"color: #666666\">[</span>temp<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">],</span> start<span style=\"color: #666666\">+1);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 8",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 132,
        "NUMBER": 18,
        "TITLE": "4Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i>, and <i>d</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> + <i>d</i> = target? Find all unique quadruplets in the array which gives the sum of target.</p>\n\n    <p><b>Note:</b> The solution set must not contain duplicate quadruplets.\n    </p>\n\n    <pre>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">fourSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> toMatch <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> toMatchInt <span style=\"color: #666666\">=</span> target <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> tmpList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>toMatch<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>toMatchInt<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    tmpList <span style=\"color: #666666\">=</span> toMatch<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>toMatchInt<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n\n                tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">);</span>\n                toMatch<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>toMatchInt<span style=\"color: #666666\">,</span> tmpList<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> firstValue <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> firstIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> firstIndex <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">3;</span> firstIndex<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> firstValue<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// Skip first duplicate</span>\n            <span style=\"color: #666666\">}</span>\n            firstValue <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">];</span>\n            <span style=\"color: #B00040\">int</span> secondIndex <span style=\"color: #666666\">=</span> firstIndex <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>secondIndex <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> secondValue <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>secondIndex<span style=\"color: #666666\">];</span>\n                <span style=\"color: #B00040\">int</span> tempSum <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>secondIndex<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>toMatch<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>tempSum<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> matchList <span style=\"color: #666666\">=</span> toMatch<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>tempSum<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #408080; font-style: italic\">// If 3rd element Ind not greater then 2nd ind</span>\n                        <span style=\"color: #408080; font-style: italic\">// or duplicate pair found</span>\n                        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> secondIndex <span style=\"color: #666666\">||</span>\n                                <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> count <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2)]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)]</span>\n                                        <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)]))</span> <span style=\"color: #666666\">{</span>\n                            <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                        <span style=\"color: #666666\">}</span>\n                        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> tmpList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                        tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>firstIndex<span style=\"color: #666666\">]);</span>\n                        tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>secondIndex<span style=\"color: #666666\">]);</span>\n                        tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)]);</span>\n                        tmpList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>matchList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)]);</span>\n                        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>tmpList<span style=\"color: #666666\">);</span>\n                        count <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(++</span>secondIndex <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>secondIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> secondValue<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 133,
        "NUMBER": 19,
        "TITLE": "Remove Nth Node From End of List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a linked list, remove the <i>n</i><sup>th</sup> node from the end of list and return its head.</p>\n\n    <p>\n        For example,</p>\n\n    <pre>   Given linked list: <b>1-&gt;2-&gt;3-&gt;4-&gt;5</b>, and <b><i>n</i> = 2</b>.\n\n   After removing the second node from the end, the linked list becomes <b>1-&gt;2-&gt;3-&gt;5</b>.\n</pre>\n\n    <p>\n        <b>Note:</b><br>\n        Given <i>n</i> will always be valid.<br>\n        Try to do this in one pass.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">removeNthFromEnd</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode p <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1);</span>\n        p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode q <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        head <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            q <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>q <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            q <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 134,
        "NUMBER": 22,
        "TITLE": "Generate Parentheses",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n</p>\n\n    <p>\n        For example, given <i>n</i> = 3, a solution set is:\n    </p>\n    <pre>[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">generateParenthesis</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n\n        String str <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        getParenthesis<span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">,</span> str<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getParenthesis</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> left<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> right<span style=\"color: #666666\">,</span> String str<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span>re<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> right <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">&gt;0){</span>\n            getParenthesis<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">-1,</span>right<span style=\"color: #666666\">,</span>str<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;(&quot;</span><span style=\"color: #666666\">,</span>re<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">&gt;</span>left<span style=\"color: #666666\">){</span>\n            getParenthesis<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span>right<span style=\"color: #666666\">-1,</span>str<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">,</span>re<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 135,
        "NUMBER": 24,
        "TITLE": "Swap Nodes in Pairs",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a linked list, swap every two adjacent nodes and return its head.\n</p>\n\n    <p>\n        For example,<br>\n        Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\n    </p>\n\n    <p>\n        Your algorithm should use only constant space. You may <b>not</b> modify the values in the list, only nodes itself can be changed.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">swapPairs</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode dummy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(0);</span>\n        dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode current <span style=\"color: #666666\">=</span> dummy<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            ListNode first <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            ListNode second <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">;</span>\n            current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">;</span>\n            current <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 136,
        "NUMBER": 29,
        "TITLE": "Divide Two Integers",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Divide two integers without using multiplication, division and mod operator.\n</p>\n    <p>\n        If it is overflow, return MAX_INT.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// The time complexity is O(logn).</span>\n    <span style=\"color: #408080; font-style: italic\">// This problem can be solved based on the fact that any number</span>\n    <span style=\"color: #408080; font-style: italic\">// can be converted to the format of the following:</span>\n    <span style=\"color: #408080; font-style: italic\">// num=a_0*2^0+a_1*2^1+a_2*2^2+...+a_n*2^n</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">divide</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> dividend<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> divisor<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>divisor<span style=\"color: #666666\">==-1</span> <span style=\"color: #666666\">&amp;&amp;</span> dividend <span style=\"color: #666666\">==</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dividend <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            sign <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>divisor <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            sign <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">long</span> a <span style=\"color: #666666\">=</span> dividend<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span> b <span style=\"color: #666666\">=</span> divisor<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// must cast to long here for dealing with the Integer.MIN_VALUE</span>\n        <span style=\"color: #408080; font-style: italic\">// because Math.abs(-2147483648) &gt; Integer.MAX_VALUE</span>\n        a <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">);</span>\n        b <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>a <span style=\"color: #666666\">&gt;=</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">long</span> temp <span style=\"color: #666666\">=</span> b<span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> multi <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>a <span style=\"color: #666666\">&gt;=</span> temp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                count <span style=\"color: #666666\">+=</span> multi<span style=\"color: #666666\">;</span>\n                a <span style=\"color: #666666\">-=</span> temp<span style=\"color: #666666\">;</span>\n                temp <span style=\"color: #666666\">+=</span> temp<span style=\"color: #666666\">;</span>\n                multi <span style=\"color: #666666\">+=</span> multi<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count <span style=\"color: #666666\">*</span> sign<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 137,
        "NUMBER": 31,
        "TITLE": "Next Permutation",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n</p>\n    <p>\n        If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n    </p>\n    <p>\n        The replacement must be in-place, do not allocate extra memory.\n    </p>\n    <p>\n        Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>\n        <code>1,2,3</code> -> <code>1,3,2</code><br>\n        <code>3,2,1</code> -> <code>1,2,3</code><br>\n        <code>1,1,5</code> -> <code>1,5,1</code><br>\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">nextPermutation</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> indexdisorder <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>indexdisorder <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>indexdisorder<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">[</span>indexdisorder <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n            indexdisorder<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>indexdisorder <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            reverse<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        indexdisorder<span style=\"color: #666666\">--;</span>\n\n        <span style=\"color: #B00040\">int</span> firstlarger <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>firstlarger <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>firstlarger<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">[</span>indexdisorder<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n            firstlarger<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n\n        swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> indexdisorder<span style=\"color: #666666\">,</span> firstlarger<span style=\"color: #666666\">);</span>\n        reverse<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> indexdisorder <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> first<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> last<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">&lt;</span> last<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> first<span style=\"color: #666666\">,</span> last<span style=\"color: #666666\">);</span>\n            first<span style=\"color: #666666\">++;</span>\n            last<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> first<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> last<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        nums<span style=\"color: #666666\">[</span>first<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>first<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>last<span style=\"color: #666666\">];</span>\n        nums<span style=\"color: #666666\">[</span>last<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>first<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>last<span style=\"color: #666666\">];</span>\n        nums<span style=\"color: #666666\">[</span>first<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>first<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>last<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 138,
        "NUMBER": 33,
        "TITLE": "Search in Rotated Sorted Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n\n    <p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\n\n    <p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>\n\n    <p>You may assume no duplicate exists in the array.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">search</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> r <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">-</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> m<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> target <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span>\n                    r <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    l <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> target <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span>\n                    l <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    r <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 139,
        "NUMBER": 34,
        "TITLE": "Search for a Range",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.</p>\n\n    <p>Your algorithm's runtime complexity must be in the order of <i>O</i>(log <i>n</i>).</p>\n\n    <p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\n\n    <p>\n        For example,<br>\n        Given <code>[5, 7, 7, 8, 8, 10]</code> and target value 8,<br>\n        return <code>[3, 4]</code>.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">searchRange</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{-1,</span> <span style=\"color: #666666\">-1};</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> searchLeft<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">-1)</span>\n            res<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> searchRight<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">searchLeft</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">)/2;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> right <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> target<span style=\"color: #666666\">)</span>\n                left <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                right <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> target <span style=\"color: #666666\">?</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            mid <span style=\"color: #666666\">=</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">)/2;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Check left first</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">?</span> left <span style=\"color: #666666\">:</span>\n                nums<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">?</span> right <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">searchRight</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">)/2;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> right <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> target<span style=\"color: #666666\">)</span>\n                right <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                left <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> target <span style=\"color: #666666\">?</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            mid <span style=\"color: #666666\">=</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">)/2;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Check right first</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">?</span> right <span style=\"color: #666666\">:</span>\n                nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">?</span> left <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 140,
        "NUMBER": 36,
        "TITLE": "Valid Sudoku",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Determine if a Sudoku is valid, according to: <a href=\"http://sudoku.com.au/TheRules.aspx\">Sudoku Puzzles - The Rules</a>.</p>\n\n    <p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>'.'</code>.</p>\n\n    <p>\n        <img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"><br>\n    </p><p style=\"font-size: 11px\">A partially filled sudoku which is valid.</p>\n    <p></p>\n\n    <p><b>Note:</b><br>\n        A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidSudoku</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\n        HashMap<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> numHashset <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> coords <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> row <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> row<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> col <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> col<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                coords <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numHashset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                    coords <span style=\"color: #666666\">=</span> numHashset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>isValid<span style=\"color: #666666\">(</span>coords<span style=\"color: #666666\">,</span> row<span style=\"color: #666666\">,</span> col<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n                coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>row<span style=\"color: #666666\">);</span>\n                coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>col<span style=\"color: #666666\">);</span>\n                numHashset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">],</span> coords<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValid</span><span style=\"color: #666666\">(</span>ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> coords<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> row <span style=\"color: #666666\">||</span> coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> col<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #B00040\">int</span> dx <span style=\"color: #666666\">=</span> coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3;</span>\n            <span style=\"color: #B00040\">int</span> dy <span style=\"color: #666666\">=</span> coords<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> dx <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3;</span> j <span style=\"color: #666666\">&lt;</span> dx <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">3;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> dy <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3;</span> k <span style=\"color: #666666\">&lt;</span> dy <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">3;</span> k<span style=\"color: #666666\">++)</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> row <span style=\"color: #666666\">&amp;&amp;</span> k <span style=\"color: #666666\">==</span> col<span style=\"color: #666666\">)</span>\n                        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 141,
        "NUMBER": 39,
        "TITLE": "Combination Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a <b>set</b> of candidate numbers (<b><i>C</i></b>) <b>(without duplicates)</b> and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>.\n</p>\n\n    <p>The <b>same</b> repeated number may be chosen from <b><i>C</i></b> unlimited number of times.\n    </p>\n\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>All numbers (including target) will be positive integers.</li>\n    <li>The solution set must not contain duplicate combinations.</li>\n</ul>\n    <p></p>\n\n    <p>\n        For example, given candidate set <code>[2, 3, 6, 7]</code> and target <code>7</code>, <br>\n        A solution set is: <br>\n    </p><pre>[\n  [7],\n  [2, 2, 3]\n]\n</pre>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: C(n,1) + C(n,2) + ..C(n, n) = O(2^n)</span>\n<span style=\"color: #408080; font-style: italic\">     * where n is the size of candidates,</span>\n<span style=\"color: #408080; font-style: italic\">     * and k is the max repeated times for each candidates.</span>\n<span style=\"color: #408080; font-style: italic\">     * Space complexity: O(m) where m is the size of array for the solution</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * @param candidates</span>\n<span style=\"color: #408080; font-style: italic\">     * @param target</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">combinationSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> li<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getList</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li<span style=\"color: #666666\">,</span>\n                         List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target<span style=\"color: #666666\">==0){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> templi <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>li<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>templi<span style=\"color: #666666\">)){</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>templi<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>start<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">&lt;</span>candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target<span style=\"color: #666666\">-</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]&gt;=0){</span>\n                li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">-</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> li<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n                li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 142,
        "NUMBER": 40,
        "TITLE": "Combination Sum II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a collection of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>.\n</p>\n\n    <p>Each number in <b><i>C</i></b> may only be used <b>once</b> in the combination.\n    </p>\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>All numbers (including target) will be positive integers.</li>\n    <li>The solution set must not contain duplicate combinations.</li>\n</ul>\n    <p></p>\n\n    <p>\n        For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>, <br>\n        A solution set is: <br>\n    </p><pre>[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: C(n,1) + C(n,2) + ..C(n, n) = O(2^n)</span>\n<span style=\"color: #408080; font-style: italic\">     * where n is the size of candidates,</span>\n<span style=\"color: #408080; font-style: italic\">     * and k is the max repeated times for each candidates.</span>\n<span style=\"color: #408080; font-style: italic\">     * Space complexity: O(m) where m is the size of array for the solution</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * @param candidates</span>\n<span style=\"color: #408080; font-style: italic\">     * @param target</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">combinationSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> li<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getList</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li<span style=\"color: #666666\">,</span>\n                         List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target<span style=\"color: #666666\">==0){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> templi <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>li<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>templi<span style=\"color: #666666\">)){</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>templi<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>start<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">&lt;</span>candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target<span style=\"color: #666666\">-</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]&gt;=0){</span>\n                li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #408080; font-style: italic\">// Use i+1 instead of i compared with combination sum</span>\n                getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">-</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> li<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+1);</span>\n                li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 143,
        "NUMBER": 43,
        "TITLE": "Multiply Strings",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>.</p>\n\n    <p><b>Note:</b>\n    </p><ol>\n    <li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\n    <li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\n    <li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\n    <li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">multiply</span><span style=\"color: #666666\">(</span>String num1<span style=\"color: #666666\">,</span> String num2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> carry <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #B00040\">int</span> a <span style=\"color: #666666\">=</span> num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>num1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> b <span style=\"color: #666666\">=</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n                num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> carry <span style=\"color: #666666\">+</span> a <span style=\"color: #666666\">*</span> b<span style=\"color: #666666\">;</span>\n                carry <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10;</span>\n                num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">%=</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #666666\">}</span>\n            num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> num2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()]</span> <span style=\"color: #666666\">+=</span> carry<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            i<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n\n        StringBuilder temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0)</span>\n            temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">((</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">+</span> num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">--]));</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 144,
        "NUMBER": 46,
        "TITLE": "Permutations",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a collection of <b>distinct</b> numbers, return all possible permutations.\n</p>\n\n    <p>\n        For example,<br>\n        <code>[1,2,3]</code> have the following permutations:<br>\n    </p><pre>[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">permute</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curPer <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> used <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>len<span style=\"color: #666666\">];</span>\n\n        getPermutations<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> len<span style=\"color: #666666\">,</span> curPer<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getPermutations</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> used<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> len<span style=\"color: #666666\">,</span>\n                                 List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curPer<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>curPer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> len<span style=\"color: #666666\">){</span>\n            ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>curPer<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>len<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">1){</span>\n                used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                curPer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                getPermutations<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> len<span style=\"color: #666666\">,</span> curPer<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n                used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                curPer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>curPer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 145,
        "NUMBER": 47,
        "TITLE": "Permutations II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a collection of numbers that might contain duplicates, return all possible unique permutations.\n</p>\n\n    <p>\n        For example,<br>\n        <code>[1,1,2]</code> have the following unique permutations:<br>\n    </p><pre>[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">permuteUnique</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> cal <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> used <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        getpermute<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> cal<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getpermute</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> used<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> cal<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cal<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>cal<span style=\"color: #666666\">);</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            cal<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            getpermute<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> cal<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">);</span>\n            used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            cal<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>cal<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1]){</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 146,
        "NUMBER": 48,
        "TITLE": "Rotate Image",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are given an <i>n</i> x <i>n</i> 2D matrix representing an image.</p>\n    <p>Rotate the image by 90 degrees (clockwise).</p>\n    <p>Follow up:<br>\n        Could you do this in-place?</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">rotate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> msize <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>msize<span style=\"color: #666666\">==1)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=</span>msize<span style=\"color: #666666\">-1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">&lt;</span>j<span style=\"color: #666666\">){</span>\n            rotateOutside<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">);</span>\n            i<span style=\"color: #666666\">++;</span>\n            j<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">rotateOutside</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">=0;</span> k<span style=\"color: #666666\">&lt;</span>j<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++){</span>\n            swap<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+</span>k<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">-</span>k<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n            swap<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">-</span>k<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">-</span>k<span style=\"color: #666666\">);</span>\n            swap<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">-</span>k<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+</span>k<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> l<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n        matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][</span>l<span style=\"color: #666666\">];</span>\n        matrix<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 147,
        "NUMBER": 49,
        "TITLE": "Group Anagrams",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of strings, group anagrams together.\n</p>\n\n    <p>For example, given: <code>[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</code>, <br>\n        Return:\n    </p><pre>[\n  [\"ate\", \"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]</pre><p></p>\n\n    <p><b>Note:</b> All inputs will be in lower-case.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">groupAnagrams</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> strs<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> rst <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;();</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;();</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> strChar <span style=\"color: #666666\">=</span> strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n            Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>strChar<span style=\"color: #666666\">);</span>\n            String str <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>strChar<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n                list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">,</span> list<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> val <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">values</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            rst<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> rst<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 148,
        "NUMBER": 50,
        "TITLE": "Pow(x, n)",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Implement pow(x, n).",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">myPow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">double</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==-1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1/</span>x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">==2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> x<span style=\"color: #666666\">*</span>x<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">double</span> temp <span style=\"color: #666666\">=</span> myPow<span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> temp<span style=\"color: #666666\">*</span>temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> x <span style=\"color: #666666\">*</span> temp<span style=\"color: #666666\">*</span>temp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">/</span> x <span style=\"color: #666666\">*</span> temp<span style=\"color: #666666\">*</span>temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 149,
        "NUMBER": 54,
        "TITLE": "Spiral Matrix",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a matrix of <i>m</i> x <i>n</i> elements (<i>m</i> rows, <i>n</i> columns), return all elements of the matrix in spiral order.\n</p>\n\n    <p>\n        For example,<br>\n        Given the following matrix:\n    </p>\n    <pre>[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n</pre>\n    <p>\n        You should return <code>[1,2,3,6,9,8,7,4,5]</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">spiralOrder</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> rowBegin <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> rowEnd <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> colBegin <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> colEnd <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>rowBegin <span style=\"color: #666666\">&lt;=</span> rowEnd <span style=\"color: #666666\">&amp;&amp;</span> colBegin <span style=\"color: #666666\">&lt;=</span> colEnd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Traverse Right</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> colBegin<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&lt;=</span> colEnd<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>rowBegin<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n            rowBegin<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #408080; font-style: italic\">// Traverse Down</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> rowBegin<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&lt;=</span> rowEnd<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">][</span>colEnd<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n            colEnd<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #408080; font-style: italic\">// Traverse Left</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>rowBegin <span style=\"color: #666666\">&lt;=</span> rowEnd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> colEnd<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;=</span> colBegin<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>rowEnd<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            rowEnd<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #408080; font-style: italic\">// Traver Up</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>colBegin <span style=\"color: #666666\">&lt;=</span> colEnd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> rowEnd<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;=</span> rowBegin<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">][</span>colBegin<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            colBegin<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 150,
        "NUMBER": 55,
        "TITLE": "Jump Game",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n</p>\n    <p>\n        Each element in the array represents your maximum jump length at that position.\n    </p>\n    <p>\n        Determine if you are able to reach the last index.\n    </p>\n\n    <p>\n        For example:<br>\n        A = <code>[2,3,1,1,4]</code>, return <code>true</code>.\n    </p>\n    <p>\n        A = <code>[3,2,1,0,4]</code>, return <code>false</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canJump</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> reach <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> reach <span style=\"color: #666666\">&amp;&amp;</span> reach <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span>\n            reach <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>reach<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> reach <span style=\"color: #666666\">&gt;=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 151,
        "NUMBER": 56,
        "TITLE": "Merge Intervals",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a collection of intervals, merge all overlapping intervals.</p>\n\n    <p>\n        For example,<br>\n        Given <code>[1,3],[2,6],[8,10],[15,18]</code>,<br>\n        return <code>[1,6],[8,10],[15,18]</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for an interval.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class Interval {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int start;</span>\n<span style=\"color: #408080; font-style: italic\"> *     int end;</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval() { start = 0; end = 0; }</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval(int s, int e) { start = s; end = e; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        Collections<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Interval o1<span style=\"color: #666666\">,</span> Interval o2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> o1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">-</span> o2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n        Interval travel <span style=\"color: #666666\">=</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>travel<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            Interval temp <span style=\"color: #666666\">=</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">&lt;</span> travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">||</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">&gt;</span> travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>travel<span style=\"color: #666666\">);</span>\n                travel <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">,</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">);</span>\n                travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>travel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">,</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>travel<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 152,
        "NUMBER": 59,
        "TITLE": "Spiral Matrix II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer <i>n</i>, generate a square matrix filled with elements from 1 to <i>n</i><sup>2</sup> in spiral order.</p>\n\n    <p>\n        For example,<br>\n        Given <i>n</i> = <code>3</code>,\n    </p>\n    You should return the following matrix:\n    <pre>[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> <span style=\"color: #0000FF\">generateMatrix</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> matrix<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;=</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            m <span style=\"color: #666666\">=</span> spiral<span style=\"color: #666666\">(</span>m<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">);</span>\n            i<span style=\"color: #666666\">++;</span>\n            j<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> matrix<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">spiral</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n            m<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> m<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> p <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">;</span> p<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>p<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n            m<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> p <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">;</span> p<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n            m<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> j<span style=\"color: #666666\">;</span> p <span style=\"color: #666666\">&gt;</span> i<span style=\"color: #666666\">;</span> p<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">][</span>p<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n            m<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> j<span style=\"color: #666666\">;</span> p <span style=\"color: #666666\">&gt;</span> i<span style=\"color: #666666\">;</span> p<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            matrix<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n            m<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> m<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 153,
        "NUMBER": 60,
        "TITLE": "Permutation Sequence",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The set <code>[1,2,3,...,<i>n</i>]</code> contains a total of <i>n</i>! unique permutations.</p>\n\n    <p>By listing and labeling all of the permutations in order,<br>\n        We get the following sequence (ie, for <i>n</i> = 3):\n    </p><ol>\n    <li><code>\"123\"</code></li>\n    <li><code>\"132\"</code></li>\n    <li><code>\"213\"</code></li>\n    <li><code>\"231\"</code></li>\n    <li><code>\"312\"</code></li>\n    <li><code>\"321\"</code></li>\n</ol>\n    <p></p>\n\n    <p>Given <i>n</i> and <i>k</i>, return the <i>k</i><sup>th</sup> permutation sequence.</p>\n\n    <p><b>Note:</b> Given <i>n</i> will be between 1 and 9 inclusive.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">getPermutation</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> t <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// n! to each i</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> numbers <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            t <span style=\"color: #666666\">=</span> t <span style=\"color: #666666\">*</span> i<span style=\"color: #666666\">;</span>\n            numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        t <span style=\"color: #666666\">/=</span> n<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// (n - 1)!</span>\n        k<span style=\"color: #666666\">--;</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> k <span style=\"color: #666666\">/</span> t<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// find which number to use</span>\n            <span style=\"color: #B00040\">int</span> np <span style=\"color: #666666\">=</span> numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">// get the number to use</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>np<span style=\"color: #666666\">));</span>\n            numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">// remove used number</span>\n            k <span style=\"color: #666666\">%=</span> t<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// what left for k</span>\n            t <span style=\"color: #666666\">/=</span> i<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">//(n - i)!</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// append the last number</span>\n        sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>numbers<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0)));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 8",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 154,
        "NUMBER": 61,
        "TITLE": "Rotate List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a list, rotate the list to the right by <i>k</i> places, where <i>k</i> is non-negative.</p>\n\n    <p>For example:<br>\n        Given <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> and <i>k</i> = <code>2</code>,<br>\n        return <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code>.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">rotateRight</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode dummy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(0);</span>\n        dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode fast <span style=\"color: #666666\">=</span> dummy<span style=\"color: #666666\">,</span> slow <span style=\"color: #666666\">=</span> dummy<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">//Get the total length</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            len<span style=\"color: #666666\">++;</span>\n            fast <span style=\"color: #666666\">=</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//Get the i-n%i th node</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> len <span style=\"color: #666666\">-</span> n <span style=\"color: #666666\">%</span> len<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--)</span>\n            slow <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//Do the rotation</span>\n        fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 155,
        "NUMBER": 62,
        "TITLE": "Unique Paths",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>A robot is located at the top-left corner of a <i>m</i> x <i>n</i> grid (marked 'Start' in the diagram below).</p>\n\n    <p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).</p>\n\n    <p>How many possible unique paths are there?</p>\n\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/robot_maze.png\"><br>\n    </p><p style=\"font-size: 11px\">Above is a 3 x 7 grid. How many possible unique paths are there?\n</p>\n\n    <p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">uniquePaths</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>m <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dpTable <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Only one way for first column or row</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            dpTable<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            dpTable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> row <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> row<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> col <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> col<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #408080; font-style: italic\">// Ways to get current grid =</span>\n                <span style=\"color: #408080; font-style: italic\">// ways to get top of left grid</span>\n                dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">-1][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dpTable<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">-1][</span>n<span style=\"color: #666666\">-1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 156,
        "NUMBER": 63,
        "TITLE": "Unique Paths II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Follow up for \"Unique Paths\":</p>\n\n    <p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\n\n    <p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>\n\n    <p>For example,<br>\n    </p><p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>\n    <pre>[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n</pre>\n    <p>The total number of unique paths is <code>2</code>.</p>\n\n    <p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">uniquePathsWithObstacles</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> obstacleGrid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>obstacleGrid <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> obstacleGrid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span>\n                obstacleGrid<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> obstacleGrid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> obstacleGrid<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// If top left or bottom right element is 1</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>obstacleGrid<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> obstacleGrid<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dpTable <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n        dpTable<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #408080; font-style: italic\">// First row</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            dpTable<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>obstacleGrid<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span>\n                    dpTable<span style=\"color: #666666\">[0][</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// First col</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            dpTable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>obstacleGrid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span>\n                    dpTable<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> row <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> row<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> col <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> col<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #408080; font-style: italic\">// If has obstacle</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>obstacleGrid<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n                    dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// update ways to current grid to be sum of</span>\n                    <span style=\"color: #408080; font-style: italic\">// ways to get top or left grid</span>\n                    dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">-1][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> dpTable<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">-1];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dpTable<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 157,
        "NUMBER": 64,
        "TITLE": "Minimum Path Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <i>m</i> x <i>n</i> grid filled with non-negative numbers, find a path from top left to bottom right which <i>minimizes</i> the sum of all numbers along its path.</p>\n\n    <p><b>Note:</b> You can only move either down or right at any point in time.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minPathSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> grid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> rows <span style=\"color: #666666\">=</span> grid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rows <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> cols <span style=\"color: #666666\">=</span> grid<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> path <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>rows<span style=\"color: #666666\">][</span>cols<span style=\"color: #666666\">];</span>\n        path<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> grid<span style=\"color: #666666\">[0][0];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n                    path<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n                    path<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    path<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>path<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> path<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">+</span> grid<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> path<span style=\"color: #666666\">[</span>rows<span style=\"color: #666666\">-1][</span>cols<span style=\"color: #666666\">-1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 158,
        "NUMBER": 71,
        "TITLE": "Simplify Path",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an absolute path for a file (Unix-style), simplify it.</p>\n\n    <p>For example,<br>\n        <b>path</b> = <code>\"/home/\"</code>, =&gt; <code>\"/home\"</code><br>\n        <b>path</b> = <code>\"/a/./b/../../c/\"</code>, =&gt; <code>\"/c\"</code><br>\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show corner cases.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Corner Cases:</b>\n\n        <p>\n        </p><ul>\n            <li>Did you consider the case where <b>path</b> = <code>\"/../\"</code>?<br>\n                In this case, you should return <code>\"/\"</code>.</li>\n            <li>Another corner case is the path might contain multiple slashes <code>'/'</code> together, such as <code>\"/home//foo/\"</code>.<br>\n                In this case, you should ignore redundant slashes and return <code>\"/home/foo\"</code>.</li>\n            <p></p>\n        </ul></div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">simplifyPath</span><span style=\"color: #666666\">(</span>String path<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> sts <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        Deque<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> pathDeque <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String st <span style=\"color: #666666\">:</span> sts<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            st <span style=\"color: #666666\">=</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">)){</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;..&quot;</span><span style=\"color: #666666\">)){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeLast</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>st<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        StringBuilder result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>pathDeque<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeFirst</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()-1);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 159,
        "NUMBER": 73,
        "TITLE": "Set Matrix Zeroes",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a <i>m</i> x <i>n</i> matrix, if an element is 0, set its entire row and column to 0. Do it in place.\n</p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show follow up.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Follow up:</b>\n\n        <p>\n            Did you use extra space?<br>\n            A straight forward solution using O(<i>m</i><i>n</i>) space is probably a bad idea.<br>\n            A simple improvement uses O(<i>m</i> + <i>n</i>) space, but still not the best solution.<br>\n            Could you devise a constant space solution?\n        </p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">setZeroes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> zero_frow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> zero_fcol <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span> rows <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> cols <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                zero_frow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                zero_fcol <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                    matrix<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n                    matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span>\n                    matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>zero_frow <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n                matrix<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>zero_fcol <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> rows<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n                matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 160,
        "NUMBER": 74,
        "TITLE": "Search a 2D Matrix",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p>\n\n    <p>\n    </p><ul>\n    <li>Integers in each row are sorted from left to right.</li>\n    <li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n    <p></p>\n\n    <p>\n        For example,</p>\n    <p>\n        Consider the following matrix:\n    </p>\n    <pre>[\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\n</pre>\n\n    <p>Given <b>target</b> = <code>3</code>, return <code>true</code>.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// rowMid = (rowLeft + rowRight)/2, columnMid = (columnUp + columnDown)/2</span>\n    <span style=\"color: #408080; font-style: italic\">// 1, First use columnMid index to search line number.</span>\n    <span style=\"color: #408080; font-style: italic\">// 2, Second use rowMid to search for the element.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">searchMatrix</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Special cases</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span>  <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> rowNum <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> colNum <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">||</span> target <span style=\"color: #666666\">&gt;</span> matrix<span style=\"color: #666666\">[</span>rowNum<span style=\"color: #666666\">][</span>colNum<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//1. Binary search for column first</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> rowNum<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">==</span> matrix<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">][0])</span> <span style=\"color: #666666\">{</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">][0]){</span>\n                end <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                start <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n            mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> rowToSearch <span style=\"color: #666666\">=</span> target <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">?</span> start<span style=\"color: #666666\">-1:</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//2. Binary search in the row</span>\n        start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        end <span style=\"color: #666666\">=</span> colNum<span style=\"color: #666666\">;</span>\n        mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">==</span> matrix<span style=\"color: #666666\">[</span>rowToSearch<span style=\"color: #666666\">][</span>mid<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>rowToSearch<span style=\"color: #666666\">][</span>mid<span style=\"color: #666666\">]){</span>\n                end <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                start <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n            mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> target <span style=\"color: #666666\">==</span> matrix<span style=\"color: #666666\">[</span>rowToSearch<span style=\"color: #666666\">][</span>start<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 161,
        "NUMBER": 75,
        "TITLE": "Sort Colors",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array with <i>n</i> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.\n</p>\n\n    <p>\n        Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        You are not suppose to use the library's sort function for this problem.\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show follow up.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\">\n        <p><b>Follow up:</b><br>\n            A rather straight forward solution is a two-pass algorithm using counting sort.<br>\n            First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.</p>\n        <p>Could you come up with an one-pass algorithm using only constant space?<br>\n        </p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">sortColors</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> oneIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> twoIndex <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> cur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">&lt;=</span> twoIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">switch</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>cur<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #666666\">0:</span>\n                    A<span style=\"color: #666666\">[</span>cur<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>oneIndex<span style=\"color: #666666\">];</span>\n                    A<span style=\"color: #666666\">[</span>oneIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                    cur<span style=\"color: #666666\">++;</span>\n                    oneIndex<span style=\"color: #666666\">++;</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #666666\">1:</span>\n                    cur<span style=\"color: #666666\">++;</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #666666\">2:</span>\n                    A<span style=\"color: #666666\">[</span>cur<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>twoIndex<span style=\"color: #666666\">];</span>\n                    A<span style=\"color: #666666\">[</span>twoIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n                    twoIndex<span style=\"color: #666666\">--;</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4, 13",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 162,
        "NUMBER": 77,
        "TITLE": "Combinations",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two integers <i>n</i> and <i>k</i>, return all possible combinations of <i>k</i> numbers out of 1 ... <i>n</i>.\n</p>\n    <p>\n        For example,<br>\n        If <i>n</i> = 4 and <i>k</i> = 2, a solution is:\n    </p>\n\n    <pre>[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">combine</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> combination <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        getCombinations<span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1,</span> combination<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getCombinations</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span>\n                                 List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> combination<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>combination<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>combination<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            combination<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            getCombinations<span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> combination<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            combination<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>combination<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 163,
        "NUMBER": 78,
        "TITLE": "Subsets",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a set of <b>distinct</b> integers, <i>nums</i>, return all possible subsets.\n</p>\n    <p><b>Note:</b> The solution set must not contain duplicate subsets.\n    </p>\n    <p>\n        For example,<br>\n        If <b><i>nums</i></b> = <code>[1,2,3]</code>, a solution is:\n    </p>\n\n    <pre>[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">subsets</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> S<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subset <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> level <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> level <span style=\"color: #666666\">&lt;=</span> S<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> level<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            getSubsets<span style=\"color: #666666\">(</span>S<span style=\"color: #666666\">,</span> level<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> subset<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            subset <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getSubsets</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> S<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> level<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subset<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> level<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>subset<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> s <span style=\"color: #666666\">:</span> S<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n                getSubsets<span style=\"color: #666666\">(</span>S<span style=\"color: #666666\">,</span> level<span style=\"color: #666666\">,</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> subset<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n                subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 164,
        "NUMBER": 79,
        "TITLE": "Word Search",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a 2D board and a word, find if the word exists in the grid.\n</p>\n    <p>\n        The word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\n    </p>\n\n    <p>\n        For example,<br>\n        Given <b>board</b> =\n    </p><pre>[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n</pre>\n\n    <b>word</b> = <code>\"ABCCED\"</code>, -&gt; returns <code>true</code>,<br>\n    <b>word</b> = <code>\"SEE\"</code>, -&gt; returns <code>true</code>,<br>\n    <b>word</b> = <code>\"ABCB\"</code>, -&gt; returns <code>false</code>.<br>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">exist</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>exist<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> word<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0))</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">exist</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">,</span> String word<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> x <span style=\"color: #666666\">&gt;=</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">||</span> y <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> y <span style=\"color: #666666\">&gt;=</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">][</span>y<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">++))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">][</span>y<span style=\"color: #666666\">];</span>\n            board<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">][</span>y<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;#&#39;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">boolean</span> res <span style=\"color: #666666\">=</span> exist<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> y<span style=\"color: #666666\">,</span> word<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    exist<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> y<span style=\"color: #666666\">,</span> word<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    exist<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x<span style=\"color: #666666\">,</span> y <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> word<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                    exist<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x<span style=\"color: #666666\">,</span> y <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> word<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">);</span>\n            board<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">][</span>y<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 165,
        "NUMBER": 80,
        "TITLE": "Remove Duplicates from Sorted Array II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Follow up for \"Remove Duplicates\":<br>\n    What if duplicates are allowed at most <i>twice</i>?</p>\n\n    <p>\n        For example,<br>\n        Given sorted array <i>nums</i> = <code>[1,1,1,2,2,3]</code>,\n    </p>\n    <p>\n        Your function should return length = <code>5</code>, with the first five elements of <i>nums</i> being <code>1</code>, <code>1</code>, <code>2</code>, <code>2</code> and <code>3</code>. It doesn't matter what you leave beyond the new length.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">removeDuplicates</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>q <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> A<span style=\"color: #666666\">[</span>q<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span>\n                    A<span style=\"color: #666666\">[++</span>p<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>q<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                A<span style=\"color: #666666\">[++</span>p<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>q<span style=\"color: #666666\">];</span>\n                count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n            q<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> p <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 166,
        "NUMBER": 81,
        "TITLE": "Search in Rotated Sorted Array II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><blockquote>\n    <p><i>Follow up</i> for \"Search in Rotated Sorted Array\":<br>\n        What if <i>duplicates</i> are allowed?</p>\n\n    <p>Would this affect the run-time complexity? How and why?</p>\n</blockquote>\n\n    <p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n\n    <p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\n\n    <p>Write a function to determine if a given target is in the array.</p>\n\n    <p>The array may contain duplicates.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">search</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> r <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">-</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> l <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">)</span>\n                    m<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> target <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span>\n                    r <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    l <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> m <span style=\"color: #666666\">&lt;</span> r<span style=\"color: #666666\">)</span>\n                    m<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;=</span> A<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> target <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">])</span>\n                    l <span style=\"color: #666666\">=</span> m<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    r <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 167,
        "NUMBER": 82,
        "TITLE": "Remove Duplicates from Sorted List II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <i>distinct</i> numbers from the original list.\n</p>\n    <p>\n        For example,<br>\n        Given <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br>\n        Given <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">deleteDuplicates</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode pre <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">);</span>\n        pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        head <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">,</span> post <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">!=</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> pre <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">||</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                post <span style=\"color: #666666\">=</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                post <span style=\"color: #666666\">=</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">;</span>\n                pre <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">!=</span> post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> post<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 168,
        "NUMBER": 86,
        "TITLE": "Partition List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a linked list and a value <i>x</i>, partition it such that all nodes less than <i>x</i> come before nodes greater than or equal to <i>x</i>.\n</p>\n    <p>\n        You should preserve the original relative order of the nodes in each of the two partitions.\n    </p>\n    <p>\n        For example,<br>\n        Given <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2</code> and <i>x</i> = 3,<br>\n        return <code>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">partition</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode larger<span style=\"color: #666666\">,</span> smaller<span style=\"color: #666666\">,</span> pre<span style=\"color: #666666\">,</span> cur<span style=\"color: #666666\">,</span> fakehead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1),</span> temp<span style=\"color: #666666\">;</span>\n        fakehead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        smaller <span style=\"color: #666666\">=</span> fakehead<span style=\"color: #666666\">;</span>\n        larger <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>larger <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> larger<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            smaller <span style=\"color: #666666\">=</span> smaller<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            larger <span style=\"color: #666666\">=</span> larger<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>larger <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        pre <span style=\"color: #666666\">=</span> larger<span style=\"color: #666666\">;</span>\n        cur <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;=</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pre <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                temp <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> larger<span style=\"color: #666666\">;</span>\n                smaller<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">;</span>\n                smaller <span style=\"color: #666666\">=</span> smaller<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                cur <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> fakehead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 169,
        "NUMBER": 89,
        "TITLE": "Gray Code",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\n\n    <p>Given a non-negative integer <i>n</i> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\n\n    <p>For example, given <i>n</i> = 2, return <code>[0,1,3,2]</code>. Its gray code sequence is:</p>\n    <pre>00 - 0\n01 - 1\n11 - 3\n10 - 2\n</pre>\n\n    <p><b>Note:</b><br>\n        For a given <i>n</i>, a gray code sequence is not uniquely defined.\n    </p>\n    <p>For example, <code>[0,2,3,1]</code> is also a valid gray code sequence according to the above definition.</p>\n\n    <p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">grayCode</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(1);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #B00040\">int</span> times <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">++</span> <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> s <span style=\"color: #666666\">=</span> re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> s <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> times<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            times <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 170,
        "NUMBER": 90,
        "TITLE": "Subsets II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a collection of integers that might contain duplicates, <b><i>nums</i></b>, return all possible subsets.\n</p>\n    <p><b>Note:</b> The solution set must not contain duplicate subsets.\n    </p>\n    <p>\n        For example,<br>\n        If <b><i>nums</i></b> = <code>[1,2,2]</code>, a solution is:\n    </p>\n\n    <pre>[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">subsetsWithDup</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> level <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> level <span style=\"color: #666666\">&lt;=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> level<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subset <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            getSubsets<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> level<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> subset<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getSubsets</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> level<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span>\n                            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subset<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> level<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>subset<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            getSubsets<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> level<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> subset<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>subset<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> num<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span>\n                i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 171,
        "NUMBER": 91,
        "TITLE": "Decode Ways",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:\n</p>\n\n    <pre>'A' -&gt; 1\n'B' -&gt; 2\n...\n'Z' -&gt; 26\n</pre>\n\n    <p>\n        Given an encoded message containing digits, determine the total number of ways to decode it.\n    </p>\n\n    <p>\n        For example,<br>\n        Given encoded message <code>\"12\"</code>,\n        it could be decoded as <code>\"AB\"</code> (1 2) or <code>\"L\"</code> (12).\n    </p>\n\n    <p>\n        The number of ways decoding <code>\"12\"</code> is 2.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numDecodings</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        dp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,2))</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">26){</span>\n            dp<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(1)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            dp<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(1)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">){</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span> <span style=\"color: #408080; font-style: italic\">// way to decode without last digit</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">-1,</span> i<span style=\"color: #666666\">+1));</span> <span style=\"color: #408080; font-style: italic\">// the val form by last two digits</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>val <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">26</span> <span style=\"color: #666666\">&amp;&amp;</span> val <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">10){</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-2];</span> <span style=\"color: #408080; font-style: italic\">// way to decode without last two digits</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()-1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 172,
        "NUMBER": 92,
        "TITLE": "Reverse Linked List II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Reverse a linked list from position <i>m</i> to <i>n</i>. Do it in-place and in one-pass.\n</p>\n\n    <p>\n        For example:<br>\n        Given <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>, <i>m</i> = 2 and <i>n</i> = 4,\n    </p>\n    <p>\n        return <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</code>.\n    </p>\n    <p>\n        <b>Note:</b><br>\n        Given <i>m</i>, <i>n</i> satisfy the following condition:<br>\n        1 <= <i>m</i> <= <i>n</i> <= length of list.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> *         val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> *         next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> *     }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverseBetween</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>m<span style=\"color: #666666\">==</span>n<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode first <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1);</span>\n        first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode p <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode q<span style=\"color: #666666\">,</span> r<span style=\"color: #666666\">;</span>\n        head <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=1;</span> i<span style=\"color: #666666\">&lt;</span>m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            first <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n        q <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        r <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">-</span>m<span style=\"color: #666666\">){</span>\n            q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">;</span>\n            p <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">;</span>\n            q <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">;</span>\n            r <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            count<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">;</span>\n        first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">;</span>\n        first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 173,
        "NUMBER": 93,
        "TITLE": "Restore IP Addresses",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\n\n    <p>\n        For example:<br>\n        Given <code>\"25525511135\"</code>,\n    </p>\n    <p>\n        return <code>[\"255.255.11.135\", \"255.255.111.35\"]</code>. (Order does not matter)\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">restoreIpAddresses</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        String<span style=\"color: #666666\">[]</span> sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">[4];</span>\n        getIpAddresses<span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getIpAddresses</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> re<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[]</span> sb<span style=\"color: #666666\">,</span> String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> level<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">// Too few or too many chars left for rest levels</span>\n        <span style=\"color: #408080; font-style: italic\">// Last level but still has chars left</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>level <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">-</span> level <span style=\"color: #666666\">||</span> len <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(4</span> <span style=\"color: #666666\">-</span> level<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">||</span> level <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">&amp;&amp;</span> len <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// If reach level 4</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>level <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #666666\">{</span>\n            StringBuilder temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">deleteCharAt</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// If first char is 0</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            sb<span style=\"color: #666666\">[</span>level<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">;</span>\n            getIpAddresses<span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(1),</span> level <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Get each possible ip address of 1 to 3 chars</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> len<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            String ipStr <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> j<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>ipStr<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">255)</span> <span style=\"color: #666666\">{</span>\n                sb<span style=\"color: #666666\">[</span>level<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> ipStr<span style=\"color: #666666\">;</span>\n                getIpAddresses<span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">),</span> level <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 174,
        "NUMBER": 94,
        "TITLE": "Binary Tree Inorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>inorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>[1,null,2,3]</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[1,3,2]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>inorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>inorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                root <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Morris Traversal method</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        TreeNode temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// connect threading for root</span>\n                temp <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> root<span style=\"color: #666666\">)</span>\n                    temp <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// the threading already exists</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// construct the threading</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 175,
        "NUMBER": 95,
        "TITLE": "Unique Binary Search Trees II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer <i>n</i>, generate all structurally unique <b>BST's</b> (binary search trees) that store values 1...<i>n</i>.</p>\n\n    <p>\n        For example,<br>\n        Given <i>n</i> = 3, your program should return all 5 unique BST's shown below.\n\n    </p><pre>   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">generateTrees</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> createTree<span style=\"color: #666666\">(1,</span> n<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">createTree</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> trees <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">&lt;=</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            TreeNode head <span style=\"color: #666666\">=</span> end <span style=\"color: #666666\">&lt;</span> start <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n            trees<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> trees<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> lefts <span style=\"color: #666666\">=</span> createTree<span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> rights <span style=\"color: #666666\">=</span> createTree<span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>TreeNode l <span style=\"color: #666666\">:</span> lefts<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>TreeNode r <span style=\"color: #666666\">:</span> rights<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    TreeNode head <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                    head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> l<span style=\"color: #666666\">;</span>\n                    head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">;</span>\n                    trees<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> trees<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 12",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 176,
        "NUMBER": 96,
        "TITLE": "Unique Binary Search Trees",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given <i>n</i>, how many structurally unique <b>BST's</b> (binary search trees) that store values 1...<i>n</i>?</p>\n\n    <p>\n        For example,<br>\n        Given <i>n</i> = 3, there are a total of 5 unique BST's.\n\n    </p><pre>   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numTrees</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n        count<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=1;</span>\n        count<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=2;</span> i<span style=\"color: #666666\">&lt;=</span>n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=0;</span> j<span style=\"color: #666666\">&lt;</span>i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n                count<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> count<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]*</span>count<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-</span>j<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 177,
        "NUMBER": 98,
        "TITLE": "Validate Binary Search Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a binary tree, determine if it is a valid binary search tree (BST).\n</p>\n\n    <p>\n        Assume a BST is defined as follows:\n    </p><ul>\n    <li>The left subtree of a node contains only nodes with keys <b>less than</b> the node's key.</li>\n    <li>The right subtree of a node contains only nodes with keys <b>greater than</b> the node's key.</li>\n    <li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre>    2\n   / \\\n  1   3\n</pre>\n    Binary tree <code>[2,1,3]</code>, return true.\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre>    1\n   / \\\n  2   3\n</pre>\n    Binary tree <code>[1,2,3]</code>, return false.\n    <p></p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidBST</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Make sure use Long</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> validBST<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">,</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">validBST</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> min<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> max<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;=</span> max <span style=\"color: #666666\">||</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;=</span> min <span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> validBST<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> min<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                validBST<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidBST</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        TreeNode pre <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            root <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pre <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;=</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            pre <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n            root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 178,
        "NUMBER": 102,
        "TITLE": "Binary Tree Level Order Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, return the <i>level order</i> traversal of its nodes' values. (ie, from left to right, level by level).</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>[3,9,20,null,null,15,7]</code>,<br>\n    </p><pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n    <p></p>\n    <p>\n        return its level order traversal as:<br>\n    </p><pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">levelOrder</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> curLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> nextLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        curLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>curLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>TreeNode n <span style=\"color: #666666\">:</span> curLevel<span style=\"color: #666666\">){</span>\n                curList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curList<span style=\"color: #666666\">);</span>\n            curLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;(</span>nextLevel<span style=\"color: #666666\">);</span>\n            nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 19",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 179,
        "NUMBER": 103,
        "TITLE": "Binary Tree Zigzag Level Order Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>[3,9,20,null,null,15,7]</code>,<br>\n    </p><pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n    <p></p>\n    <p>\n        return its zigzag level order traversal as:<br>\n    </p><pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">zigzagLevelOrder</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> order <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> toVisit <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        toVisit<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>toVisit<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>TreeNode node <span style=\"color: #666666\">:</span> toVisit<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> toVisit<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                TreeNode node <span style=\"color: #666666\">=</span> toVisit<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>order<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            order <span style=\"color: #666666\">=</span> order <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">false</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            toVisit <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;(</span>next<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 15, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 180,
        "NUMBER": 105,
        "TITLE": "Construct Binary Tree from Preorder and Inorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>\n\n    <p><b>Note:</b><br>\n        You may assume that duplicates do not exist in the tree.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">buildTree</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> preorder<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> inorder<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>preorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> preorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">!=</span> inorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> build<span style=\"color: #666666\">(</span>preorder<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> preorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> inorder<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> inorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">build</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> pre<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> in<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start1 <span style=\"color: #666666\">&gt;</span> end1 <span style=\"color: #666666\">||</span> start2 <span style=\"color: #666666\">&gt;</span> end2<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">[</span>start1<span style=\"color: #666666\">];</span>\n        TreeNode cur <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> start2<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(;</span> k <span style=\"color: #666666\">&lt;=</span> end2<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>in<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> build<span style=\"color: #666666\">(</span>pre<span style=\"color: #666666\">,</span> start1 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> start1 <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">-</span> start2<span style=\"color: #666666\">,</span> in<span style=\"color: #666666\">,</span> start2<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> build<span style=\"color: #666666\">(</span>pre<span style=\"color: #666666\">,</span> start1 <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">-</span> start2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end1<span style=\"color: #666666\">,</span> in<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end2<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cur<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 181,
        "NUMBER": 106,
        "TITLE": "Construct Binary Tree from Inorder and Postorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p>\n\n    <p><b>Note:</b><br>\n        You may assume that duplicates do not exist in the tree.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">buildTree</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> inorder<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> postorder<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> inStart <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> inEnd <span style=\"color: #666666\">=</span> inorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> postStart <span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #B00040\">int</span> postEnd <span style=\"color: #666666\">=</span> postorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> buildTree<span style=\"color: #666666\">(</span>inorder<span style=\"color: #666666\">,</span> inStart<span style=\"color: #666666\">,</span> inEnd<span style=\"color: #666666\">,</span> postorder<span style=\"color: #666666\">,</span> postStart<span style=\"color: #666666\">,</span> postEnd<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">buildTree</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> inorder<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> inStart<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> inEnd<span style=\"color: #666666\">,</span>\n                              <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> postorder<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> postStart<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> postEnd<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>inStart <span style=\"color: #666666\">&gt;</span> inEnd <span style=\"color: #666666\">||</span> postStart <span style=\"color: #666666\">&gt;</span> postEnd<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> rootValue <span style=\"color: #666666\">=</span> postorder<span style=\"color: #666666\">[</span>postEnd<span style=\"color: #666666\">];</span>\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>rootValue<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span> inorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>inorder<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]==</span>rootValue<span style=\"color: #666666\">){</span>\n                k <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> buildTree<span style=\"color: #666666\">(</span>inorder<span style=\"color: #666666\">,</span> inStart<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">-1,</span> postorder<span style=\"color: #666666\">,</span> postStart<span style=\"color: #666666\">,</span> postStart<span style=\"color: #666666\">+</span>k<span style=\"color: #666666\">-(</span>inStart<span style=\"color: #666666\">+1));</span>\n        <span style=\"color: #408080; font-style: italic\">// Becuase k is not the length, it it need to -(inStart+1) to get the length</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> buildTree<span style=\"color: #666666\">(</span>inorder<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">+1,</span> inEnd<span style=\"color: #666666\">,</span> postorder<span style=\"color: #666666\">,</span> postStart<span style=\"color: #666666\">+</span>k<span style=\"color: #666666\">-</span>inStart<span style=\"color: #666666\">,</span> postEnd<span style=\"color: #666666\">-1);</span>\n        <span style=\"color: #408080; font-style: italic\">// postStart+k-inStart = postStart+k-(inStart+1) +1</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 182,
        "NUMBER": 109,
        "TITLE": "Convert Sorted List to Binary Search Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; next = null; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">sortedListToBST</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// calculate list length</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            len<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// build the BST</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> listToBST<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> TreeNode <span style=\"color: #0000FF\">listToBST</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> low<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">&gt;</span> high<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> low <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>high <span style=\"color: #666666\">-</span> low<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// build up tree recursively</span>\n        TreeNode left <span style=\"color: #666666\">=</span> listToBST<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">,</span> low<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Java pass in Object by reference, so we can&#39;t change head but we can</span>\n        <span style=\"color: #408080; font-style: italic\">// change its content :)</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// &quot;move to next&quot;</span>\n            head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> listToBST<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> high<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 183,
        "NUMBER": 113,
        "TITLE": "Path Sum II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n</p>\n\n    For example:<br>\n    Given the below binary tree and <code>sum = 22</code>,\n    <pre>              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n</pre>\n\n    <p>\n        return<br>\n    </p><pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">pathSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> resSet <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        findPathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(),</span> resSet<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> resSet<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">findPathSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">,</span>\n                             List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> path<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> resSet<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// get to a leaf and found a path</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> sum <span style=\"color: #666666\">==</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// has to make a copy, otherwise the content may be changed</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curPath <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>path<span style=\"color: #666666\">);</span>\n            resSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curPath<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        findPathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> sum <span style=\"color: #666666\">-</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> path<span style=\"color: #666666\">,</span> resSet<span style=\"color: #666666\">);</span>\n        findPathSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> sum <span style=\"color: #666666\">-</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> path<span style=\"color: #666666\">,</span> resSet<span style=\"color: #666666\">);</span>\n        path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 184,
        "NUMBER": 114,
        "TITLE": "Flatten Binary Tree to Linked List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a binary tree, flatten it to a linked list in-place.\n</p>\n\n    <p>\n        For example,<br>\n        Given\n    </p><pre>         1\n        / \\\n       2   5\n      / \\   \\\n     3   4   6\n</pre>\n    <p></p>\n\n    The flattened tree should look like:<br>\n    <pre>   1\n    \\\n     2\n      \\\n       3\n        \\\n         4\n          \\\n           5\n            \\\n             6\n</pre>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hints.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Hints:</b>\n        <p>If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.</p>\n    </div><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">flatten</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        flattenTree<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> TreeNode <span style=\"color: #0000FF\">flattenTree</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span>\n                root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Convert right subtree before assign root.righ</span>\n        TreeNode rightSubtree <span style=\"color: #666666\">=</span> flattenTree<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Set root.right to flattened left subtree</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> flattenTree<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// set left to null</span>\n        <span style=\"color: #408080; font-style: italic\">// Find tail of the linked list</span>\n        TreeNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Set right pointer to right sub tree</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> rightSubtree<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">flatten</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                TreeNode p <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 185,
        "NUMBER": 116,
        "TITLE": "Populating Next Right Pointers in Each Node",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a binary tree\n</p><pre>    struct TreeLinkNode {\n      TreeLinkNode *left;\n      TreeLinkNode *right;\n      TreeLinkNode *next;\n    }\n</pre>\n    <p></p>\n\n    <p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n    <p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n    <p>\n        <b>Note:</b>\n    </p><ul>\n    <li>You may only use constant extra space.</li>\n    <li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>\n</ul>\n    <p></p>\n\n    <p>\n        For example,<br>\n        Given the following perfect binary tree,<br>\n    </p><pre>         1\n       /  \\\n      2    3\n     / \\  / \\\n    4  5  6  7\n</pre>\n    <p></p>\n    <p>\n        After calling your function, the tree should look like:<br>\n    </p><pre>         1 -&gt; NULL\n       /  \\\n      2 -&gt; 3 -&gt; NULL\n     / \\  / \\\n    4-&gt;5-&gt;6-&gt;7 -&gt; NULL\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree with next pointer.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeLinkNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeLinkNode left, right, next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeLinkNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">connect</span><span style=\"color: #666666\">(</span>TreeLinkNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\n        TreeLinkNode cur<span style=\"color: #666666\">,</span> level <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">,</span> head <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                level <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                cur <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            level <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 186,
        "NUMBER": 117,
        "TITLE": "Populating Next Right Pointers in Each Node II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Follow up for problem \"<i>Populating Next Right Pointers in Each Node</i>\".</p>\n    <p>What if the given tree could be any binary tree? Would your previous solution still work?</p>\n    <p>\n        <b>Note:</b>\n    </p><ul><li>You may only use constant extra space.</li></ul>\n    <p></p>\n    <p>\n        For example,<br>\n        Given the following binary tree,<br>\n    </p><pre>         1\n       /  \\\n      2    3\n     / \\    \\\n    4   5    7\n</pre>\n    <p></p>\n    <p>\n        After calling your function, the tree should look like:<br>\n    </p><pre>         1 -&gt; NULL\n       /  \\\n      2 -&gt; 3 -&gt; NULL\n     / \\    \\\n    4-&gt; 5 -&gt; 7 -&gt; NULL\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree with next pointer.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeLinkNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeLinkNode left, right, next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeLinkNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">connect</span><span style=\"color: #666666\">(</span>TreeLinkNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TreeLinkNode first <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            fillRow<span style=\"color: #666666\">(</span>first<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// move to next level</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span>\n                    <span style=\"color: #666666\">&amp;&amp;</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> first <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                first <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">:</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">fillRow</span><span style=\"color: #666666\">(</span>TreeLinkNode cur<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// find next has-child node</span>\n            TreeLinkNode next <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>next <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                next <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>next <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// find next child and link it</span>\n            TreeLinkNode nextChild <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">:</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> nextChild<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> nextChild<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// move to next has-child node directly</span>\n            cur <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 187,
        "NUMBER": 120,
        "TITLE": "Triangle",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\n\n    <p>\n        For example, given the following triangle<br>\n    </p><pre>[\n     [<font color=\"red\">2</font>],\n    [<font color=\"red\">3</font>,4],\n   [6,<font color=\"red\">5</font>,7],\n  [4,<font color=\"red\">1</font>,8,3]\n]\n</pre>\n    <p></p>\n    <p>\n        The minimum path sum from top to bottom is <code>11</code> (i.e., <font color=\"red\">2</font> + <font color=\"red\">3</font> + <font color=\"red\">5</font> + <font color=\"red\">1</font> = 11).\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        Bonus point if you are able to do this using only <i>O</i>(<i>n</i>) extra space, where <i>n</i> is the total number of rows in the triangle.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minimumTotal</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> triangle<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> total <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()];</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            total<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// iterate from last second row</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                total<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> triangle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>total<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">],</span> total<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> total<span style=\"color: #666666\">[0];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 188,
        "NUMBER": 127,
        "TITLE": "Word Ladder",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two words (<i>beginWord</i> and <i>endWord</i>), and a dictionary's word list, find the length of shortest transformation sequence from <i>beginWord</i> to <i>endWord</i>, such that:\n</p>\n    <ol>\n        <li>Only one letter can be changed at a time.</li>\n        <li>Each transformed word must exist in the word list. Note that <i>beginWord</i> is <i>not</i> a transformed word.</li>\n    </ol>\n\n    <p>\n        For example,\n    </p>\n    <p>\n        Given:<br>\n        <i>beginWord</i> = <code>\"hit\"</code><br>\n        <i>endWord</i> = <code>\"cog\"</code><br>\n        <i>wordList</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]</code><br>\n    </p>\n    <p>\n        As one shortest transformation is <code>\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\"</code>,<br>\n        return its length <code>5</code>.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n    </p><ul>\n    <li>Return 0 if there is no such transformation sequence.</li>\n    <li>All words have the same length.</li>\n    <li>All words contain only lowercase alphabetic characters.</li>\n    <li>You may assume no duplicates in the word list.</li>\n    <li>You may assume <i>beginWord</i> and <i>endWord</i> are non-empty and are not the same.</li>\n</ul>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">ladderLength</span><span style=\"color: #666666\">(</span>String beginWord<span style=\"color: #666666\">,</span> String endWord<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> wordList<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> dict <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>wordList<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        LinkedList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> wordQueue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> distanceQueue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        wordQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>beginWord<span style=\"color: #666666\">);</span>\n        distanceQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(1);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>wordQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            String currWord <span style=\"color: #666666\">=</span> wordQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            Integer currDistance <span style=\"color: #666666\">=</span> distanceQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>currWord<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>endWord<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> currDistance<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> currWord<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> currCharArr <span style=\"color: #666666\">=</span> currWord<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span> c <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;z&#39;</span><span style=\"color: #666666\">;</span> c<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    currCharArr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n\n                    String newWord <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>currCharArr<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        wordQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">);</span>\n                        distanceQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>currDistance <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                        dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 5, 14, 19",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 189,
        "NUMBER": 129,
        "TITLE": "Sum Root to Leaf Numbers",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n    <p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n\n    <p>Find the total sum of all root-to-leaf numbers.</p>\n\n    <p>For example,\n    </p><pre>    1\n   / \\\n  2   3\n</pre>\n    <p></p>\n    <p>\n        The root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br>\n        The root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\n    </p>\n    <p>\n        Return the sum = 12 + 13 = <code>25</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumNumbers</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sumNumbersHelper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// path is the sum from root to the current node</span>\n    <span style=\"color: #408080; font-style: italic\">// sum is the sum of all root-to-leaf numbers up to the current node</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumNumbersHelper</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> path<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> sum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// reach a leaf</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> sum <span style=\"color: #666666\">+</span> path<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// go to left subtree</span>\n            sum <span style=\"color: #666666\">=</span> sumNumbersHelper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> path <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// go to right subtree</span>\n            sum <span style=\"color: #666666\">=</span> sumNumbersHelper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> path <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> sum<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 190,
        "NUMBER": 130,
        "TITLE": "Surrounded Regions",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a 2D board containing <code>'X'</code> and <code>'O'</code> (the <b>letter</b> O), capture all regions surrounded by <code>'X'</code>.</p>\n\n    <p>A region is captured by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.\n    </p>\n\n    <p>\n        For example,<br>\n    </p><pre>X X X X\nX O O X\nX X O X\nX O X X\n</pre>\n    <p></p>\n\n    <p>\n        After running your function, the board should be:\n    </p><pre>X X X X\nX X X X\nX X X X\nX O X X\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">solve</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">||</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> rows <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> columns <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Start from &#39;O&#39;s on the edge and mark connected ones as non-flipable.</span>\n        <span style=\"color: #408080; font-style: italic\">// first and last columns</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span>\n                markBFS<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>columns <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span>\n                markBFS<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> columns <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// first and last rows</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> columns <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #666666\">++</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span>\n                markBFS<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1,</span> j<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span>\n                markBFS<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2,</span> j<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// flip</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> columns <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #666666\">++</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;X&#39;</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;N&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">markBFS</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> que <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        mark<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> row<span style=\"color: #666666\">,</span> col<span style=\"color: #666666\">,</span> que<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> rows <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> columns <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> cell <span style=\"color: #666666\">=</span> que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> cell <span style=\"color: #666666\">/</span> columns<span style=\"color: #666666\">,</span> y <span style=\"color: #666666\">=</span> cell <span style=\"color: #666666\">%</span> columns<span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// push its neighbors to stack if needed</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n                mark<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> y<span style=\"color: #666666\">,</span> que<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                mark<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> y<span style=\"color: #666666\">,</span> que<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>y <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> columns <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n                mark<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x<span style=\"color: #666666\">,</span> y <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> que<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>y <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                mark<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> x<span style=\"color: #666666\">,</span> y <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> que<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">mark</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">,</span> Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> que<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;O&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;N&#39;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> columns <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">*</span> columns <span style=\"color: #666666\">+</span> col<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "16, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 191,
        "NUMBER": 131,
        "TITLE": "Palindrome Partitioning",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\n</p>\n    <p>\n        Return all possible palindrome partitioning of <i>s</i>.\n    </p>\n    <p>\n        For example, given <i>s</i> = <code>\"aab\"</code>,<br>\n\n        Return\n    </p><pre>[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">partition</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> palindromeTable <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>len<span style=\"color: #666666\">][</span>len<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// build palindrome dp table</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            palindromeTable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">,</span> r <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> r <span style=\"color: #666666\">&lt;=</span> len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>r<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                palindromeTable<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">--][</span>r<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            l <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            r <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> r <span style=\"color: #666666\">&lt;=</span> len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>r<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                palindromeTable<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">--][</span>r<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> partition <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        addPalindrome<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> partition<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">,</span> palindromeTable<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> partition<span style=\"color: #666666\">,</span>\n                               List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> result<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> palindromeTable<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// stop condition</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;(</span>partition<span style=\"color: #666666\">);</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>palindromeTable<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                String str <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                partition<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">);</span>\n                addPalindrome<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> partition<span style=\"color: #666666\">,</span> result<span style=\"color: #666666\">,</span> palindromeTable<span style=\"color: #666666\">);</span>\n                partition<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>partition<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 192,
        "NUMBER": 133,
        "TITLE": "Clone Graph",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Clone an undirected graph. Each node in the graph contains a <code>label</code> and a list of its <code>neighbors</code>.\n</p>\n\n    <div>\n        <br>\n        <b>OJ's undirected graph serialization:</b>\n\n        <p>\n            Nodes are labeled uniquely.\n        </p>\n\n        We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.\n        <p></p>\n\n\n        <p>\n            As an example, consider the serialized graph <code><font color=\"red\">{<font color=\"black\">0</font>,1,2#</font><font color=\"blue\"><font color=\"black\">1</font>,2#</font><font color=\"green\"><font color=\"black\">2</font>,2}</font></code>.\n        </p>\n\n        <p>\n            The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.\n        </p><ol>\n        <li>First node is labeled as <code><font color=\"black\">0</font></code>. Connect node <code><font color=\"black\">0</font></code> to both nodes <code><font color=\"red\">1</font></code> and <code><font color=\"red\">2</font></code>.</li>\n        <li>Second node is labeled as <code><font color=\"black\">1</font></code>. Connect node <code><font color=\"black\">1</font></code> to node <code><font color=\"blue\">2</font></code>.</li>\n        <li>Third node is labeled as <code><font color=\"black\">2</font></code>. Connect node <code><font color=\"black\">2</font></code> to node <code><font color=\"green\">2</font></code> (itself), thus forming a self-cycle.</li>\n    </ol>\n        <p></p>\n\n        <p>\n            Visually, the graph looks like the following:\n        </p><pre>       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n</pre>\n        <p></p>\n\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for undirected graph.</span>\n<span style=\"color: #408080; font-style: italic\"> * class UndirectedGraphNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int label;</span>\n<span style=\"color: #408080; font-style: italic\"> * ArrayList&lt;UndirectedGraphNode&gt; neighbors;</span>\n<span style=\"color: #408080; font-style: italic\"> * UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); }</span>\n<span style=\"color: #408080; font-style: italic\"> * };</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> UndirectedGraphNode <span style=\"color: #0000FF\">cloneBFS</span><span style=\"color: #666666\">(</span>UndirectedGraphNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n\n        ArrayDeque<span style=\"color: #666666\">&lt;</span>UndirectedGraphNode<span style=\"color: #666666\">&gt;</span> que <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>UndirectedGraphNode<span style=\"color: #666666\">&gt;();</span>\n        que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n\n        HashMap<span style=\"color: #666666\">&lt;</span>UndirectedGraphNode<span style=\"color: #666666\">,</span> UndirectedGraphNode<span style=\"color: #666666\">&gt;</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>UndirectedGraphNode<span style=\"color: #666666\">,</span> UndirectedGraphNode<span style=\"color: #666666\">&gt;();</span>\n        UndirectedGraphNode rootCopy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> UndirectedGraphNode<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">label</span><span style=\"color: #666666\">);</span>\n        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> rootCopy<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// BFS</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            root <span style=\"color: #666666\">=</span> que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeFirst</span><span style=\"color: #666666\">();</span>\n            UndirectedGraphNode node <span style=\"color: #666666\">=</span> visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>UndirectedGraphNode nb <span style=\"color: #666666\">:</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">neighbors</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>nb<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">neighbors</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>nb<span style=\"color: #666666\">));</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    UndirectedGraphNode n <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> UndirectedGraphNode<span style=\"color: #666666\">(</span>nb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">label</span><span style=\"color: #666666\">);</span>\n                    node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">neighbors</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">);</span>\n                    visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>nb<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">);</span>\n                    que<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addLast</span><span style=\"color: #666666\">(</span>nb<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> rootCopy<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> UndirectedGraphNode <span style=\"color: #0000FF\">cloneGraph</span><span style=\"color: #666666\">(</span>UndirectedGraphNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cloneBFS<span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 19, 23",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 193,
        "NUMBER": 134,
        "TITLE": "Gas Station",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There are <i>N</i> gas stations along a circular route, where the amount of gas at station <i>i</i> is <code>gas[i]</code>.\n</p>\n\n    <p>\n        You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <i>i</i> to its next station (<i>i</i>+1). You begin the journey with an empty tank at one of the gas stations.\n    </p>\n\n    <p>\n        Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        The solution is guaranteed to be unique.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">canCompleteCircuit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> gas<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> cost<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> diff <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>gas<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> gas<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            diff<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> gas<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> cost<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> leftGas <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> startnode <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> gas<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            leftGas <span style=\"color: #666666\">+=</span> diff<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            sum <span style=\"color: #666666\">+=</span> diff<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                startnode <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>leftGas <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> startnode<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 194,
        "NUMBER": 137,
        "TITLE": "Single Number II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of integers, every element appears <i>three</i> times except for one, which appears exactly once. Find that single one.\n</p>\n\n    <p>\n        <b>Note:</b><br>\n        Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">singleNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #008000; font-weight: bold\">return</span> A<span style=\"color: #666666\">[0];</span>\n\n        <span style=\"color: #B00040\">int</span> bitSum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">32;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            bitSum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a <span style=\"color: #666666\">:</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>a <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> bitSum<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>bitSum <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> res <span style=\"color: #666666\">|=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 195,
        "NUMBER": 138,
        "TITLE": "Copy List with Random Pointer",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.\n</p>\n\n    <p>\n        Return a deep copy of the list.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list with a random pointer.</span>\n<span style=\"color: #408080; font-style: italic\"> * class RandomListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int label;</span>\n<span style=\"color: #408080; font-style: italic\"> * RandomListNode next, random;</span>\n<span style=\"color: #408080; font-style: italic\"> * RandomListNode(int x) { this.label = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * };</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Solution without map, 3 rounds of scan</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> RandomListNode <span style=\"color: #0000FF\">copyRandomList</span><span style=\"color: #666666\">(</span>RandomListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        RandomListNode iter <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> next<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// First round: make copy of each node,</span>\n        <span style=\"color: #408080; font-style: italic\">// and link them together side-by-side in a single list.</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>iter <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            next <span style=\"color: #666666\">=</span> iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            RandomListNode copy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> RandomListNode<span style=\"color: #666666\">(</span>iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">label</span><span style=\"color: #666666\">);</span>\n            iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> copy<span style=\"color: #666666\">;</span>\n            copy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n            iter <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Second round: assign random pointers for the copy nodes.</span>\n        iter <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>iter <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">=</span> iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            iter <span style=\"color: #666666\">=</span> iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Third round: restore the original list, and extract the copy list.</span>\n        iter <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        RandomListNode pseudoHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> RandomListNode<span style=\"color: #666666\">(0);</span>\n        RandomListNode copy<span style=\"color: #666666\">,</span> copyIter <span style=\"color: #666666\">=</span> pseudoHead<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>iter <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            next <span style=\"color: #666666\">=</span> iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// extract the copy</span>\n            copy <span style=\"color: #666666\">=</span> iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            copyIter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> copy<span style=\"color: #666666\">;</span>\n            copyIter <span style=\"color: #666666\">=</span> copy<span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// restore the original list</span>\n            iter<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n            iter <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> pseudoHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Solution with Map</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> RandomListNode <span style=\"color: #0000FF\">copyRandomList</span><span style=\"color: #666666\">(</span>RandomListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// No node</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        HashMap<span style=\"color: #666666\">&lt;</span>RandomListNode<span style=\"color: #666666\">,</span> RandomListNode<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>RandomListNode<span style=\"color: #666666\">,</span> RandomListNode<span style=\"color: #666666\">&gt;();</span>\n        RandomListNode resHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> RandomListNode<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">label</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Copy list with next pointers</span>\n        RandomListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        RandomListNode resCur <span style=\"color: #666666\">=</span> resHead<span style=\"color: #666666\">;</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">,</span> resCur<span style=\"color: #666666\">);</span>\n\n        cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> RandomListNode<span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">label</span><span style=\"color: #666666\">);</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">,</span> resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            resCur <span style=\"color: #666666\">=</span> resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        resCur <span style=\"color: #666666\">=</span> resHead<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            resCur <span style=\"color: #666666\">=</span> resCur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> resHead<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 2",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 196,
        "NUMBER": 139,
        "TITLE": "Word Break",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a <b>non-empty</b> string <i>s</i> and a dictionary <i>wordDict</i> containing a list of <b>non-empty</b> words, determine if <i>s</i> can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.\n</p>\n\n    <p>For example, given<br>\n        <i>s</i> = <code>\"leetcode\"</code>,<br>\n        <i>dict</i> = <code>[\"leet\", \"code\"]</code>.\n    </p>\n\n    <p>\n        Return true because <code>\"leetcode\"</code> can be segmented as <code>\"leet code\"</code>.\n    </p>\n\n    <p>\n        <b><font color=\"red\">UPDATE (2017/1/4):</font></b><br>\n        The <i>wordDict</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">wordBreak</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> dict<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> t <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        t<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">//set first to be true, why?</span>\n        <span style=\"color: #408080; font-style: italic\">//Because we need initial state</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">//should continue from match position</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String a <span style=\"color: #666666\">:</span> dict<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> len<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">&gt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    t<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> t<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 197,
        "NUMBER": 142,
        "TITLE": "Linked List Cycle II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.\n</p>\n\n    <p>\n        <b>Note:</b> Do not modify the linked list.</p>\n\n    <p>\n        <b>Follow up</b>:<br>\n        Can you solve it without using extra space?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">detectCycle</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode first <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        ListNode second <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> second <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            first <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            second <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>second <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                second <span style=\"color: #666666\">=</span> second <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">==</span> second<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>second <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        first <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>first <span style=\"color: #666666\">!=</span> second<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            first <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            second <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> second<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 4",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 198,
        "NUMBER": 143,
        "TITLE": "Reorder List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a singly linked list <i>L</i>: <i>L</i><sub>0</sub>?<i>L</i><sub>1</sub>?…?<i>L</i><sub><i>n</i>-1</sub>?<i>L</i><sub>n</sub>,<br>\n    reorder it to: <i>L</i><sub>0</sub>?<i>L</i><sub><i>n</i></sub>?<i>L</i><sub>1</sub>?<i>L</i><sub><i>n</i>-1</sub>?<i>L</i><sub>2</sub>?<i>L</i><sub><i>n</i>-2</sub>?…\n</p>\n\n    <p>You must do this in-place without altering the nodes' values.</p>\n\n    <p>\n        For example,<br>\n        Given <code>{1,2,3,4}</code>, reorder it to <code>{1,4,2,3}</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">reorderList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// step 1. cut the list to two halves</span>\n        <span style=\"color: #408080; font-style: italic\">// prev will be the tail of 1st half</span>\n        <span style=\"color: #408080; font-style: italic\">// slow will be the head of 2nd half</span>\n        ListNode prev <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> slow <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> fast <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> l1 <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>fast <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            prev <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">;</span>\n            slow <span style=\"color: #666666\">=</span> slow<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            fast <span style=\"color: #666666\">=</span> fast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// step 2. reverse the 2nd half</span>\n        ListNode l2 <span style=\"color: #666666\">=</span> reverse<span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// step 3. merge the two halves</span>\n        merge<span style=\"color: #666666\">(</span>l1<span style=\"color: #666666\">,</span> l2<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> ListNode <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode prev <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> curr <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>curr <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            next <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">;</span>\n            prev <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">;</span>\n            curr <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> prev<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span>ListNode l1<span style=\"color: #666666\">,</span> ListNode l2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            ListNode n1 <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">,</span> n2 <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n\n            l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> n1<span style=\"color: #666666\">;</span>\n            l1 <span style=\"color: #666666\">=</span> n1<span style=\"color: #666666\">;</span>\n            l2 <span style=\"color: #666666\">=</span> n2<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 199,
        "NUMBER": 144,
        "TITLE": "Binary Tree Preorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>preorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>{1,#,2,3}</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[1,2,3]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>preorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>preorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n            Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                root <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Morris Travasal</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            TreeNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">,</span> prev<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    prev <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> cur<span style=\"color: #666666\">)</span>\n                        prev <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #408080; font-style: italic\">// the only difference with inorder-traversal</span>\n                        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                        prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">;</span>\n                        cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                        cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 200,
        "NUMBER": 147,
        "TITLE": "Insertion Sort List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Sort a linked list using insertion sort.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> * val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> * next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">insertionSortList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        ListNode newHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        ListNode pointer <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// loop through each element in the list</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>pointer <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// insert this element to the new list</span>\n\n            ListNode innerPointer <span style=\"color: #666666\">=</span> newHead<span style=\"color: #666666\">;</span>\n            ListNode next <span style=\"color: #666666\">=</span> pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;=</span> newHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                ListNode oldHead <span style=\"color: #666666\">=</span> newHead<span style=\"color: #666666\">;</span>\n                newHead <span style=\"color: #666666\">=</span> pointer<span style=\"color: #666666\">;</span>\n                newHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> oldHead<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&amp;&amp;</span> pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;=</span> innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        ListNode oldNext <span style=\"color: #666666\">=</span> innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                        innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> pointer<span style=\"color: #666666\">;</span>\n                        pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> oldNext<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                    innerPointer <span style=\"color: #666666\">=</span> innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    innerPointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> pointer<span style=\"color: #666666\">;</span>\n                    pointer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// finally</span>\n            pointer <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> newHead<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 201,
        "NUMBER": 148,
        "TITLE": "Sort List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Sort a linked list in O(n log n) time using constant space complexity.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) {</span>\n<span style=\"color: #408080; font-style: italic\"> *         val = x;</span>\n<span style=\"color: #408080; font-style: italic\"> *         next = null;</span>\n<span style=\"color: #408080; font-style: italic\"> *     }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">sortList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// count total number of elements</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        ListNode p <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            count<span style=\"color: #666666\">++;</span>\n            p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// break up to two list</span>\n        <span style=\"color: #B00040\">int</span> middle <span style=\"color: #666666\">=</span> count <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        ListNode l <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> r <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        ListNode p2 <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> countHalf <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>p2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            countHalf<span style=\"color: #666666\">++;</span>\n            ListNode next <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>countHalf <span style=\"color: #666666\">==</span> middle<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                r <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            p2 <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// now we have two parts l and r, recursively sort them</span>\n        ListNode h1 <span style=\"color: #666666\">=</span> sortList<span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n        ListNode h2 <span style=\"color: #666666\">=</span> sortList<span style=\"color: #666666\">(</span>r<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// merge together</span>\n        ListNode merged <span style=\"color: #666666\">=</span> merge<span style=\"color: #666666\">(</span>h1<span style=\"color: #666666\">,</span> h2<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> merged<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> ListNode <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span>ListNode l<span style=\"color: #666666\">,</span> ListNode r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode p1 <span style=\"color: #666666\">=</span> l<span style=\"color: #666666\">;</span>\n        ListNode p2 <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">;</span>\n\n        ListNode fakeHead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(100);</span>\n        ListNode pNew <span style=\"color: #666666\">=</span> fakeHead<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>p1 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> p2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                p2 <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pNew <span style=\"color: #666666\">=</span> pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                p1 <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                pNew <span style=\"color: #666666\">=</span> pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// if(fakeHead)</span>\n                    pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    p1 <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                    pNew <span style=\"color: #666666\">=</span> pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    pNew <span style=\"color: #666666\">=</span> pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                    p1 <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                    p2 <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    p2 <span style=\"color: #666666\">=</span> p2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                    pNew <span style=\"color: #666666\">=</span> pNew<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// printList(fakeHead.next);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> fakeHead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 202,
        "NUMBER": 150,
        "TITLE": "Evaluate Reverse Polish Notation",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\">Reverse Polish Notation</a>.\n</p>\n\n    <p>\n        Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.\n    </p>\n\n    <p>\n        Some examples:<br>\n    </p><pre>  [\"2\", \"1\", \"+\", \"3\", \"*\"] -&gt; ((2 + 1) * 3) -&gt; 9\n  [\"4\", \"13\", \"5\", \"/\", \"+\"] -&gt; (4 + (13 / 5)) -&gt; 6\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">evalRPN</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> tokens<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//Start 10:10</span>\n        <span style=\"color: #408080; font-style: italic\">// 1, Push all tokens into stack.</span>\n        <span style=\"color: #408080; font-style: italic\">// 2, Pop one entry each time,</span>\n        <span style=\"color: #408080; font-style: italic\">// 2.1 If it is an operand then push into second stack</span>\n        <span style=\"color: #408080; font-style: italic\">// 2.2 If it is an operator, then pop out two entries from second stack.</span>\n        <span style=\"color: #408080; font-style: italic\">// Evaluate the result and push the result back into the second stack.</span>\n        <span style=\"color: #408080; font-style: italic\">// 3, Stop when the stack is empty.</span>\n        <span style=\"color: #408080; font-style: italic\">// 4, Return the value in the second stack as result.</span>\n\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> valueStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String s <span style=\"color: #666666\">:</span> tokens<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;+&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;-&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;*&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> firstValue <span style=\"color: #666666\">=</span> valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #B00040\">int</span> secondValue <span style=\"color: #666666\">=</span> valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">switch</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&quot;+&quot;</span><span style=\"color: #666666\">:</span>\n                        valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>firstValue <span style=\"color: #666666\">+</span> secondValue<span style=\"color: #666666\">);</span>\n                        <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&quot;-&quot;</span><span style=\"color: #666666\">:</span>\n                        valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>secondValue <span style=\"color: #666666\">-</span> firstValue<span style=\"color: #666666\">);</span>\n                        <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&quot;*&quot;</span><span style=\"color: #666666\">:</span>\n                        valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>firstValue <span style=\"color: #666666\">*</span> secondValue<span style=\"color: #666666\">);</span>\n                        <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">:</span>\n                        valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>secondValue <span style=\"color: #666666\">/</span> firstValue<span style=\"color: #666666\">);</span>\n                        <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> valueStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 203,
        "NUMBER": 151,
        "TITLE": "Reverse Words in a String",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an input string, reverse the string word by word.\n</p>\n\n    <p>\n        For example,<br>\n        Given s = \"<code>the sky is blue</code>\",<br>\n        return \"<code>blue is sky the</code>\".\n    </p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Clarification:</b>\n\n        <p>\n        </p><ul>\n            <li>What constitutes a word?<br>\n                A sequence of non-space characters constitutes a word.</li>\n            <li>Could the input string contain leading or trailing spaces?<br>\n                Yes. However, your reversed string should not contain leading or trailing spaces.</li>\n            <li>How about multiple spaces between two words?<br>\n                Reduce them to a single space in the reversed string.</li>\n        </ul>\n        <p></p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Algorithm:</span>\n    <span style=\"color: #408080; font-style: italic\">// 1. put words into a stack</span>\n    <span style=\"color: #408080; font-style: italic\">// 2. pop out words</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">reverseWords</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> s<span style=\"color: #666666\">;</span>\n        s <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> startIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> endIndex <span style=\"color: #666666\">=</span> len<span style=\"color: #666666\">-1;</span>\n\n        String<span style=\"color: #666666\">[]</span> strs <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\\\s+&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> strCount <span style=\"color: #666666\">=</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> strCount <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=0;</span> i<span style=\"color: #666666\">--){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 204,
        "NUMBER": 152,
        "TITLE": "Maximum Product Subarray",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Find the contiguous subarray within an array (containing at least one number) which has the largest product.\n</p>\n\n    <p>\n        For example, given the array <code>[2,3,-2,4]</code>,<br>\n        the contiguous subarray <code>[2,3]</code> has the largest product = <code>6</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProduct</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> A<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> max_local <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> min_local <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> global <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> max_copy <span style=\"color: #666666\">=</span> max_local<span style=\"color: #666666\">;</span>\n            max_local <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> max_local<span style=\"color: #666666\">,</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]),</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> min_local<span style=\"color: #666666\">);</span>\n            min_local <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> max_copy<span style=\"color: #666666\">,</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]),</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> min_local<span style=\"color: #666666\">);</span>\n            global <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>global<span style=\"color: #666666\">,</span> max_local<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> global<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 205,
        "NUMBER": 153,
        "TITLE": "Find Minimum in Rotated Sorted Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n\n    <p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\n\n    <p>Find the minimum element.</p>\n\n    <p>You may assume no duplicate exists in the array.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMin</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> getMinFrom<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getMinFrom</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">])</span> <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> end <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">?</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">])</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> getMinFrom<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> getMinFrom<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> mid<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 11",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 206,
        "NUMBER": 162,
        "TITLE": "Find Peak Element",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A peak element is an element that is greater than its neighbors.</p>\n\n    <p>Given an input array where <code>num[i] != num[i+1]</code>, find a peak element and return its index.</p>\n\n    <p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>\n\n    <p>You may imagine that <code>num[-1] = num[n] = -infinite</code>.</p>\n\n    <p>For example, in array <code>[1, 2, 3, 1]</code>, 3 is a peak element and your function should return the index number 2.</p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p>\n\n    <div class=\"spoilers\" style=\"display: none;\"><b>Note:</b>\n        <p>Your solution should be in logarithmic complexity.</p>\n    </div>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findPeakElement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> r <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">+</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>mid <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> l <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>mid <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> r <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">[</span>mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                r <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// nums[mid]&lt;=nums[mid+1]</span>\n                l <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 207,
        "NUMBER": 165,
        "TITLE": "Compare Version Numbers",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Compare two version numbers <i>version1</i> and <i>version2</i>.<br>\n    If <i>version1</i> &gt; <i>version2</i> return 1, if <i>version1</i> &lt; <i>version2</i> return -1, otherwise return 0.</p>\n\n    <p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br>\n        The <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br>\n        For instance, <code>2.5</code> is not \"two and a half\" or \"half way to version three\", it is the fifth second-level revision of the second first-level revision.</p>\n\n    <p>Here is an example of version numbers ordering:</p>\n    <pre>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</pre>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compareVersion</span><span style=\"color: #666666\">(</span>String version1<span style=\"color: #666666\">,</span> String version2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// recursively compare substrings before &#39;.&#39;</span>\n        <span style=\"color: #B00040\">int</span> ver1<span style=\"color: #666666\">,</span> ver2<span style=\"color: #666666\">;</span>\n        ver1 <span style=\"color: #666666\">=</span> version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span>\n                Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)))</span> <span style=\"color: #666666\">:</span>\n                Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">);</span>\n        ver2 <span style=\"color: #666666\">=</span> version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span>\n                Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)))</span> <span style=\"color: #666666\">:</span>\n                Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>version2<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ver1 <span style=\"color: #666666\">&gt;</span> ver2<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ver1 <span style=\"color: #666666\">&lt;</span> ver2<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> compareVersion<span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1),</span>\n                    version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> compareVersion<span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>version1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1),</span> <span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> compareVersion<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">,</span> version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>version2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 208,
        "NUMBER": 166,
        "TITLE": "Fraction to Recurring Decimal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>\n\n    <p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n    <p>\n        For example,\n    </p><ul>\n    <li>Given numerator = 1, denominator = 2, return \"0.5\".</li>\n    <li>Given numerator = 2, denominator = 1, return \"2\".</li>\n    <li>Given numerator = 2, denominator = 3, return \"0.(6)\".</li>\n</ul>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">fractionToDecimal</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> numerator<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> denominator<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">long</span> numeratorL <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">((</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">)</span> numerator<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">long</span> denominatorL <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">((</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">)</span> denominator<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Negative result</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numerator <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> denominator <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> numerator <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> denominator <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;-&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Integer part</span>\n        <span style=\"color: #B00040\">long</span> num <span style=\"color: #666666\">=</span> numeratorL <span style=\"color: #666666\">/</span> denominatorL<span style=\"color: #666666\">;</span>\n        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        numeratorL <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>numeratorL <span style=\"color: #666666\">%</span> denominatorL<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>numeratorL <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">);</span>\n        Map<span style=\"color: #666666\">&lt;</span>Long<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Long<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">// Decimal part</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>numeratorL <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            num <span style=\"color: #666666\">=</span> numeratorL <span style=\"color: #666666\">/</span> denominatorL<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>numeratorL<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>numeratorL<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">intValue</span><span style=\"color: #666666\">(),</span> <span style=\"color: #BA2121\">&quot;(&quot;</span><span style=\"color: #666666\">);</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>numeratorL<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">());</span>\n            numeratorL <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>numeratorL <span style=\"color: #666666\">%</span> denominatorL<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10;</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 209,
        "NUMBER": 173,
        "TITLE": "Binary Search Tree Iterator",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>\n\n    <p>Calling <code>next()</code> will return the next smallest number in the BST.</p>\n\n    <p><b>Note: </b><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree. </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">BSTIterator</span> <span style=\"color: #666666\">{</span>\n    Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">BSTIterator</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n            root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * @return whether we have a next smallest number</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">hasNext</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * @return the next smallest number</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">next</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        TreeNode node <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            node <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">);</span>\n                node <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your BSTIterator will be called like this:</span>\n<span style=\"color: #408080; font-style: italic\"> * BSTIterator i = new BSTIterator(root);</span>\n<span style=\"color: #408080; font-style: italic\"> * while (i.hasNext()) v[f()] = i.next();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 210,
        "NUMBER": 179,
        "TITLE": "Largest Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a list of non negative integers, arrange them such that they form the largest number.</p>\n\n    <p>For example, given <code>[3, 30, 34, 5, 9]</code>, the largest formed number is <code>9534330</code>.</p>\n\n    <p>Note: The result may be very large, so you need to return a string instead of an integer.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">largestNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> numNew <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            numNew<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>numNew<span style=\"color: #666666\">,</span> NumberComparator<span style=\"color: #666666\">);</span>\n        StringBuffer strBuf <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuffer<span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">// Use larger number first</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            strBuf<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>numNew<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Check if it is 0</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> strBuf<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #BA2121\">&quot;0&quot;</span> <span style=\"color: #666666\">:</span> strBuf<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Comparator to sort number in ascending order</span>\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">final</span> Comparator<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> NumberComparator <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;(){</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>String i1<span style=\"color: #666666\">,</span> String i2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">&lt;</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> compare<span style=\"color: #666666\">(</span>i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">),</span> i2<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> compare<span style=\"color: #666666\">(</span>i1<span style=\"color: #666666\">,</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">};</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 211,
        "NUMBER": 187,
        "TITLE": "Repeated DNA Sequences",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p>\n\n    <p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p>\n\n    <p>\n        For example,</p>\n    <pre>Given s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\",\n\nReturn:\n[\"AAAAACCCCC\", \"CCCCCAAAAA\"].\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findRepeatedDnaSequences</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set seen <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">(),</span> repeated <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">9</span> <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            String ten <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">10);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>seen<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>ten<span style=\"color: #666666\">))</span>\n                repeated<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>ten<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">(</span>repeated<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 22",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 212,
        "NUMBER": 199,
        "TITLE": "Binary Tree Right Side View",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary tree, imagine yourself standing on the <i>right</i> side of it, return the values of the nodes you can see ordered from top to bottom.</p>\n\n    <p>\n        For example:<br>\n        Given the following binary tree,<br>\n    </p><pre>   1            &lt;---\n /   \\\n2     3         &lt;---\n \\     \\\n  5     4       &lt;---\n</pre>\n    <p></p>\n    <p>\n        You should return <code>[1, 3, 4]</code>.\n    </p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">rightSideView</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> cur <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n        \tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getLast</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        \tDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;();</span>\n        \t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n        \t\tTreeNode temp <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n        \t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n        \t\t\tnext<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        \t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n        \t\t\tnext<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        \t<span style=\"color: #666666\">}</span>\n        \tcur <span style=\"color: #666666\">=</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14, 19",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 213,
        "NUMBER": 200,
        "TITLE": "Number of Islands",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a 2d grid map of <code>'1'</code>s (land) and <code>'0'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n    <p><i><b>Example 1:</b></i></p>\n    <pre>11110<br>11010<br>11000<br>00000</pre>\n    <p>Answer: 1</p>\n    <p><i><b>Example 2:</b></i></p>\n    <pre>11000<br>11000<br>00100<br>00011</pre>\n    <p>Answer: 3</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Point</span><span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Point</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">=</span> y<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numIslands</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> grid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>grid <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> grid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> grid<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> rowNum <span style=\"color: #666666\">=</span> grid<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> colNum <span style=\"color: #666666\">=</span> grid<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> row <span style=\"color: #666666\">&lt;</span> rowNum<span style=\"color: #666666\">;</span> row<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> col <span style=\"color: #666666\">&lt;</span> colNum<span style=\"color: #666666\">;</span> col<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>grid<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                res<span style=\"color: #666666\">++;</span>\n                Deque<span style=\"color: #666666\">&lt;</span>Point<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Point<span style=\"color: #666666\">&gt;();</span>\n                grid<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">;</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Point<span style=\"color: #666666\">(</span>row<span style=\"color: #666666\">,</span> col<span style=\"color: #666666\">));</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n                    Point top <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pollLast</span><span style=\"color: #666666\">();</span>\n                    <span style=\"color: #408080; font-style: italic\">// go top, down, left, right</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">){</span>\n                        grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">;</span>\n                        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Point<span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">));</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> rowNum <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">){</span>\n                        grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">;</span>\n                        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Point<span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span><span style=\"color: #666666\">));</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">){</span>\n                        grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">;</span>\n                        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Point<span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> colNum <span style=\"color: #666666\">&amp;&amp;</span> grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">){</span>\n                        grid<span style=\"color: #666666\">[</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">][</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">;</span>\n                        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Point<span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span><span style=\"color: #666666\">,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1));</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 16, 19",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 214,
        "NUMBER": 201,
        "TITLE": "Bitwise AND of Numbers Range",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\n\n    <p>\n        For example, given the range [5, 7], you should return 4.\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// The idea is to use a mask to find the leftmost common digits of m and n.</span>\n    <span style=\"color: #408080; font-style: italic\">// Example: m=1110001, n=1110111, and you just need to find 1110000 and it will be the answer.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">rangeBitwiseAnd</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> r <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">((</span>m <span style=\"color: #666666\">&amp;</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&amp;</span> r<span style=\"color: #666666\">))</span>\n            r <span style=\"color: #666666\">=</span> r <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n <span style=\"color: #666666\">&amp;</span> r<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 215,
        "NUMBER": 207,
        "TITLE": "Course Schedule",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n    <p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n\n    <p>\n        Given the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?\n    </p>\n\n    <p>For example:</p>\n    <pre>2, [[1,0]]</pre>\n    <p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>\n\n    <pre>2, [[1,0],[0,1]]</pre>\n    <p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\n    <li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n    <p></p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more hints.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Hints:</b>\n        <ol>\n            <li>This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.</li>\n            <li><a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.</li>\n            <li>Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>.</li>\n        </ol>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canFinish</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> numCourses<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> prerequisites<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ArrayList<span style=\"color: #666666\">[]</span> graph <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">[</span>numCourses<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> indegree <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>numCourses<span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">// 先初始化图，每个赋一个空列表</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> numCourses<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            graph<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 根据边建立图，并计算入度</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> prerequisites<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            graph<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1]].</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]);</span>\n            indegree<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]]++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 找到有向图的入口</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> indegree<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>indegree<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 按照拓扑排序的顺序，进行广度优先搜索</span>\n        <span style=\"color: #B00040\">int</span> cnt <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            Integer curr <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            cnt<span style=\"color: #666666\">++;</span>\n            ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> nexts <span style=\"color: #666666\">=</span> graph<span style=\"color: #666666\">[</span>curr<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nexts<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #B00040\">int</span> next <span style=\"color: #666666\">=</span> nexts<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                indegree<span style=\"color: #666666\">[</span>next<span style=\"color: #666666\">]--;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>indegree<span style=\"color: #666666\">[</span>next<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                    queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cnt <span style=\"color: #666666\">==</span> numCourses<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 19, 23, 24",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 216,
        "NUMBER": 208,
        "TITLE": "Implement Trie (Prefix Tree)",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.\n</p>\n\n    <p>\n        <b>Note:</b><br>\n        You may assume that all inputs are consist of lowercase letters <code>a-z</code>.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Trie</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TrieNode</span> <span style=\"color: #666666\">{</span>\n        String word <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> TrieNode<span style=\"color: #666666\">&gt;</span> children <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">TrieNode</span><span style=\"color: #666666\">(){</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    TrieNode root<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Initialize your data structure here. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Trie</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">root</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Inserts a word into the trie. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">insert</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns if the word is in the trie. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">search</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns if there is any word in the trie that starts with the given prefix. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">startsWith</span><span style=\"color: #666666\">(</span>String prefix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> prefix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> prefix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Trie object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Trie obj = new Trie();</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.insert(word);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_2 = obj.search(word);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_3 = obj.startsWith(prefix);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 11",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 217,
        "NUMBER": 209,
        "TITLE": "Minimum Size Subarray Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a <b>contiguous</b> subarray of which the sum >= <strong>s</strong>. If there isn't one, return 0 instead.\n</p>\n    <p>\n        For example, given the array <code>[2,3,1,2,4,3]</code> and <code>s = 7</code>,<br>\n        the subarray <code>[4,3]</code> has the minimal length under the problem constraint.\n    </p>\n\n    <div class=\"spoilers\"><b>More practice:</b>\n\n        <p>If you have figured out the <i>O</i>(<i>n</i>) solution, try coding another solution of which the time complexity is <i>O</i>(<i>n</i> log <i>n</i>).</p>\n    </div>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minSubArrayLen</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&gt;=</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> curSum <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0],</span> startIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> minLen <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n            curSum <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>curSum <span style=\"color: #666666\">&gt;=</span> s<span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>startIndex <span style=\"color: #666666\">&lt;</span> index <span style=\"color: #666666\">&amp;&amp;</span> curSum <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>startIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> s<span style=\"color: #666666\">){</span>\n                    curSum <span style=\"color: #666666\">-=</span> nums<span style=\"color: #666666\">[</span>startIndex<span style=\"color: #666666\">++];</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>minLen <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> index<span style=\"color: #666666\">-</span>startIndex <span style=\"color: #666666\">&lt;</span> minLen<span style=\"color: #666666\">)</span>\n                    minLen <span style=\"color: #666666\">=</span> index<span style=\"color: #666666\">-</span>startIndex<span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #666666\">}</span>\n            index<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> minLen<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 218,
        "NUMBER": 210,
        "TITLE": "Course Schedule II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n    <p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n\n    <p>\n        Given the total number of courses and a list of prerequisite <b>pairs</b>, return the ordering of courses you should take to finish all courses.</p>\n\n    <p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\n    </p>\n\n    <p>For example:</p>\n    <pre>2, [[1,0]]</pre>\n    <p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is <code>[0,1]</code></p>\n\n    <pre>4, [[1,0],[2,0],[3,1],[3,2]]</pre>\n    <p>There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is <code>[0,1,2,3]</code>. Another correct ordering is<code>[0,2,1,3]</code>.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\n    <li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n    <p></p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more hints.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Hints:</b>\n        <ol>\n            <li>This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.</li>\n            <li><a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.</li>\n            <li>Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>.</li>\n        </ol>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">findOrder</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> numCourses<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> prerequisites<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>numCourses<span style=\"color: #666666\">];</span>\n        ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;[]</span> graph <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">[</span>numCourses<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> indegree <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>numCourses<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> prerequisites<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>graph<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1]]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                graph<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1]]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #666666\">}</span>\n            graph<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1]].</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]);</span>\n            indegree<span style=\"color: #666666\">[</span>prerequisites<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]]++;</span>\n        <span style=\"color: #666666\">}</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> indegree<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>indegree<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 用idx记录输出数组的下标</span>\n        <span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            Integer curr <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            res<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>graph<span style=\"color: #666666\">[</span>curr<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Integer next <span style=\"color: #666666\">:</span> graph<span style=\"color: #666666\">[</span>curr<span style=\"color: #666666\">]){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(--</span>indegree<span style=\"color: #666666\">[</span>next<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n                    queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 如果有环则返回空数组</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> idx <span style=\"color: #666666\">!=</span> numCourses <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">:</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 19, 23, 24",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 219,
        "NUMBER": 211,
        "TITLE": "Add and Search Word - Data structure design",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Design a data structure that supports the following two operations:\n</p>\n    <pre>void addWord(word)\nbool search(word)\n</pre>\n\n    <p>\n        search(word) can search a literal word or a regular expression string containing only letters <code>a-z</code> or <code>.</code>. A <code>.</code> means it can represent any one letter.</p>\n\n    <p>\n        For example:</p>\n    <pre>addWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -&gt; false\nsearch(\"bad\") -&gt; true\nsearch(\".ad\") -&gt; true\nsearch(\"b..\") -&gt; true\n</pre>\n\n    <p>\n        <b>Note:</b><br>\n        You may assume that all words are consist of lowercase letters <code>a-z</code>.\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hint.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\">You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first.\n    </div><p></p>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">WordDictionary</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TrieNode</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> TrieNode<span style=\"color: #666666\">[]</span> children <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> String item <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> TrieNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addWord</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode node <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n            <span style=\"color: #666666\">}</span>\n            node <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">item</span> <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">search</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> match<span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">(),</span> <span style=\"color: #666666\">0,</span> root<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">match</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chs<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> TrieNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">==</span> chs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">!</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">item</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>chs<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>chs<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    match<span style=\"color: #666666\">(</span>chs<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>chs<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>match<span style=\"color: #666666\">(</span>chs<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8, 11, 12",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 220,
        "NUMBER": 213,
        "TITLE": "House Robber II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p><b>Note:</b> This is an extension of <a href=\"https://leetcode.com/problems/house-robber/\">House Robber</a>.</p>\n\n    <p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street. </p>\n\n    <p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">rob</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[0];</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">2)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[1],</span> nums<span style=\"color: #666666\">[0]);</span>\n\n\t\t<span style=\"color: #408080; font-style: italic\">// include 1st element, and not last element</span>\n\t\t<span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n\t\tdp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\tdp<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\tdp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\n\t\t<span style=\"color: #408080; font-style: italic\">// not include frist element, and include last element</span>\n\t\t<span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n\t\tdr<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\tdr<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[1];</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\tdr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dr<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> dr<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> dr<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 221,
        "NUMBER": 215,
        "TITLE": "Kth Largest Element in an Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Find the <b>k</b>th largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\n    </p><p>For example,<br>\n    Given <code>[3,2,1,5,6,4]</code> and k = 2, return 5.\n</p>\n\n    <p><b>Note: </b><br>\n        You may assume k is always valid, 1 <= k <= array's length.</p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity = O(n)</span>\n    <span style=\"color: #408080; font-style: italic\">// Discard half each time: n+(n/2)+(n/4)..1 = n + (n-1) = O(2n-1) = O(n),</span>\n    <span style=\"color: #408080; font-style: italic\">// because n/2+n/4+n/8+..1=n-1.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">);</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #408080; font-style: italic\">// quick select: kth smallest</span>\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;</span> end<span style=\"color: #666666\">)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\n\t\t<span style=\"color: #B00040\">int</span> pivot <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span><span style=\"color: #408080; font-style: italic\">// Take A[end] as the pivot,</span>\n\t\t<span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> pivot<span style=\"color: #666666\">)</span> <span style=\"color: #408080; font-style: italic\">// Put numbers &lt; pivot to pivot&#39;s left</span>\n\t\t\t\tswap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">++,</span> i<span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\tswap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">);</span><span style=\"color: #408080; font-style: italic\">// Finally, swap A[end] with A[left]</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Found kth smallest number</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Check right part</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #408080; font-style: italic\">// Check left part</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> k<span style=\"color: #666666\">);</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\t\tA<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n\t\tA<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 222,
        "NUMBER": 216,
        "TITLE": "Combination Sum III",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><div>\n    <p>Find all possible combinations of <i><b>k</b></i> numbers that add up to a number <i><b>n</b></i>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\n</div>\n    <div>\n        <br>\n        <p> <i><b>Example 1:</b></i></p>\n        <p>Input:  <i><b>k</b></i> = 3,  <i><b>n</b></i> = 7</p>\n        <p>Output: </p>\n        <p></p><pre>[[1,2,4]]\n</pre><p></p>\n        <br>\n        <p> <i><b>Example 2:</b></i></p>\n        <p>Input:  <i><b>k</b></i> = 3,  <i><b>n</b></i> = 9</p>\n        <p>Output: </p>\n        <p></p><pre>[[1,2,6], [1,3,5], [2,3,4]]\n</pre><p></p>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">combinationSum3</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subComb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        findComb<span style=\"color: #666666\">(1,</span> k<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">,</span> subComb<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">findComb</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> curSum<span style=\"color: #666666\">,</span>\n                          List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> subComb<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> res<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>subComb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> k <span style=\"color: #666666\">&amp;&amp;</span> curSum <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>subComb<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>start<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">&lt;=9;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>curSum <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n            subComb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            findComb<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1,</span> k<span style=\"color: #666666\">,</span> curSum<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">,</span> subComb<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            subComb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>subComb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 223,
        "NUMBER": 217,
        "TITLE": "Contains Duplicate",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">containsDuplicate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        Set<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> numSet <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>numSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            numSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 224,
        "NUMBER": 220,
        "TITLE": "Contains Duplicate III",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">containsNearbyAlmostDuplicate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> t <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span>  <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\t    TreeSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #B00040\">int</span> c <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">floor</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> c <span style=\"color: #666666\">&lt;=</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">floor</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> t<span style=\"color: #666666\">)</span>\n\t\t        <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">ceiling</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> c <span style=\"color: #666666\">&gt;=</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">ceiling</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span>t<span style=\"color: #666666\">))</span>\n\t\t        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\t\t    set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> k<span style=\"color: #666666\">)</span>\n\t\t\t    set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">]);</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "28",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 225,
        "NUMBER": 221,
        "TITLE": "Maximal Square",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n</p>\n\n    <p>For example, given the following matrix:\n    </p><pre>1 0 1 0 0\n1 0 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\n1 1 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\n1 0 0 1 0\n</pre>\n    Return 4.\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maximalSquare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n\t    <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t    <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> t <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n\n    \t<span style=\"color: #408080; font-style: italic\">//top row</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getNumericValue</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]);</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #408080; font-style: italic\">//left column</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    t<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getNumericValue</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]);</span>\n\t    <span style=\"color: #666666\">}</span>\n    \t<span style=\"color: #408080; font-style: italic\">//cells inside</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t    <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">],</span> t<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n\t\t\t\t    min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span>t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n\t\t\t\t    t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> min <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\t\t\t    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t    t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\t\t    <span style=\"color: #666666\">}</span>\n\t\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #666666\">}</span>\n\n\t    <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t    <span style=\"color: #408080; font-style: italic\">//get maximal length</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t    max <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n\t\t\t    <span style=\"color: #666666\">}</span>\n\t\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #008000; font-weight: bold\">return</span> max <span style=\"color: #666666\">*</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 226,
        "NUMBER": 222,
        "TITLE": "Count Complete Tree Nodes",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>complete</b> binary tree, count the number of nodes.</p>\n\n    <p><b><u>Definition of a complete binary tree from <a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a>:</u></b><br>\n        In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countNodes</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> getLeftHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> getRightHeight<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> right<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(2</span> <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">-1))</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> countNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> countNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getLeftHeight</span><span style=\"color: #666666\">(</span>TreeNode n<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> height<span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            height<span style=\"color: #666666\">++;</span>\n            n <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> height<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRightHeight</span><span style=\"color: #666666\">(</span>TreeNode n<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> height<span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            height<span style=\"color: #666666\">++;</span>\n            n <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> height<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Better Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countNodes</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> height <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> nodesSum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        TreeNode curr <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            nodesSum <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(1&lt;&lt;</span>height<span style=\"color: #666666\">);</span>\n            height<span style=\"color: #666666\">++;</span>\n            curr <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nodesSum <span style=\"color: #666666\">+</span> countLastLevel<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> height<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countLastLevel</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> height<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>height <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        TreeNode midNode <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> currHeight <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>currHeight<span style=\"color: #666666\">&lt;</span>height<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            currHeight<span style=\"color: #666666\">++;</span>\n            midNode <span style=\"color: #666666\">=</span> midNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>midNode<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> countLastLevel<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> height<span style=\"color: #666666\">-1);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(1&lt;&lt;(</span>height<span style=\"color: #666666\">-1))</span> <span style=\"color: #666666\">+</span> countLastLevel<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> height<span style=\"color: #666666\">-1);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 12",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 227,
        "NUMBER": 223,
        "TITLE": "Rectangle Area",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Find the total area covered by two <b>rectilinear</b> rectangles in a <b>2D</b> plane.</p>\n    <p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p>\n    <div style=\"width:529px; height:300px; background-color:rgb(235, 235, 235);\">\n        <img src=\"/static/images/problemset/rectangle_area.png\" border=\"0\" alt=\"Rectangle Area\">\n    </div>\n    <div style=\"padding-top:23px;\">\n        <p>Assume that the total area is never beyond the maximum possible value of <b>int</b>.</p>\n    </div>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">computeArea</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> B<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> C<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> D<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> E<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> F<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> G<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> H<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>C <span style=\"color: #666666\">&lt;</span> E <span style=\"color: #666666\">||</span> G <span style=\"color: #666666\">&lt;</span> A <span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>G<span style=\"color: #666666\">-</span>E<span style=\"color: #666666\">)*(</span>H<span style=\"color: #666666\">-</span>F<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>C<span style=\"color: #666666\">-</span>A<span style=\"color: #666666\">)*(</span>D<span style=\"color: #666666\">-</span>B<span style=\"color: #666666\">);</span>\n         <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>D <span style=\"color: #666666\">&lt;</span> F <span style=\"color: #666666\">||</span> H <span style=\"color: #666666\">&lt;</span> B<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>G<span style=\"color: #666666\">-</span>E<span style=\"color: #666666\">)*(</span>H<span style=\"color: #666666\">-</span>F<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>C<span style=\"color: #666666\">-</span>A<span style=\"color: #666666\">)*(</span>D<span style=\"color: #666666\">-</span>B<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>C<span style=\"color: #666666\">,</span>G<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">,</span>E<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> top <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>H<span style=\"color: #666666\">,</span>D<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> bottom <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>F<span style=\"color: #666666\">,</span>B<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>G<span style=\"color: #666666\">-</span>E<span style=\"color: #666666\">)*(</span>H<span style=\"color: #666666\">-</span>F<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>C<span style=\"color: #666666\">-</span>A<span style=\"color: #666666\">)*(</span>D<span style=\"color: #666666\">-</span>B<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">-</span>left<span style=\"color: #666666\">)*(</span>top<span style=\"color: #666666\">-</span>bottom<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 228,
        "NUMBER": 227,
        "TITLE": "Basic Calculator II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement a basic calculator to evaluate a simple expression string.</p>\n\n    <p>The expression string contains only <b>non-negative</b> integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators and empty spaces <code> </code>. The integer division should truncate toward zero.</p>\n\n    <p>You may assume that the given expression is always valid.</p>\n\n    <p>Some examples:<br>\n    </p><pre>\"3+2*2\" = 7\n\" 3/2 \" = 1\n\" 3+5 / 2 \" = 5\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b> <b>Do not</b> use the <code>eval</code> built-in library function.\n    </p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">calculate</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        s <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #B00040\">int</span> curIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> total <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> curNum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">)</span>\n\t\t\tsign <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curIndex <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n\t\t\t<span style=\"color: #408080; font-style: italic\">// 1. if &#39; &#39;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">){</span>\n\t\t\t\tcurIndex<span style=\"color: #666666\">++;</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t<span style=\"color: #408080; font-style: italic\">// 2. if current char is digit</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">9){</span>\n\t\t\t\tcurNum <span style=\"color: #666666\">=</span> curNum<span style=\"color: #666666\">*10</span> <span style=\"color: #666666\">+</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t<span style=\"color: #408080; font-style: italic\">// 3. if +/-</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">){</span>\n\t\t\t\ttotal <span style=\"color: #666666\">+=</span> sign<span style=\"color: #666666\">*</span>curNum<span style=\"color: #666666\">;</span>\n\t\t\t\tcurNum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\t\t\tsign <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t<span style=\"color: #408080; font-style: italic\">// 4. if * or /</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;/&#39;</span><span style=\"color: #666666\">){</span>\n\t\t\t\t<span style=\"color: #408080; font-style: italic\">// Find next number</span>\n\t\t\t\t<span style=\"color: #B00040\">int</span> nextNum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> multipler <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">++);</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curIndex <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39; &#39;</span> <span style=\"color: #666666\">||</span>\n\t\t\t\t\t\t<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">9))){</span>\n\t\t\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">){</span>\n\t\t\t\t\t\tcurIndex<span style=\"color: #666666\">++;</span>\n\t\t\t\t\t\t<span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n\t\t\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t\t\tnextNum <span style=\"color: #666666\">=</span> nextNum<span style=\"color: #666666\">*10</span> <span style=\"color: #666666\">+</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>curIndex<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">;</span>\n\t\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t\tcurNum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>multipler <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> curNum<span style=\"color: #666666\">*</span>nextNum <span style=\"color: #666666\">:</span> curNum<span style=\"color: #666666\">/</span>nextNum<span style=\"color: #666666\">;</span>\n\t\t\t\tcurIndex<span style=\"color: #666666\">--;</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\tcurIndex<span style=\"color: #666666\">++;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> total <span style=\"color: #666666\">+=</span> sign<span style=\"color: #666666\">*</span>curNum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 229,
        "NUMBER": 228,
        "TITLE": "Summary Ranges",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a sorted integer array without duplicates, return the summary of its ranges.</p>\n\n    <p>\n        For example, given <code>[0,1,2,4,5,7]</code>, return <code>[\"0-&gt;2\",\"4-&gt;5\",\"7\"].</code>\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">summaryRanges</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n        \tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[0]));</span>\n        \t<span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> continueNums <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[0]);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=1;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]+1</span> <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span>\n            \tcontinueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n            \t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()==1)</span>\n            \t\tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            \t<span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n            \t\tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;-&gt;&quot;</span> <span style=\"color: #666666\">+</span>\n            \t\t    continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1));</span>\n            \t<span style=\"color: #666666\">}</span>\n            \tcontinueNums <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        \t\tcontinueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()==1)</span>\n    \t\tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n    \t<span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n    \t\tres<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;-&gt;&quot;</span> <span style=\"color: #666666\">+</span>\n    \t\t    continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>continueNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1));</span>\n    \t<span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 230,
        "NUMBER": 229,
        "TITLE": "Majority Element II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer array of size <i>n</i>, find all elements that appear more than <code>|_n/3_|</code> times. The algorithm should run in linear time and in O(1) space.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">majorityElement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\t    List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\t    <span style=\"color: #B00040\">int</span> number1 <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0],</span> number2 <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n\t    <span style=\"color: #B00040\">int</span> count1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> count2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> len <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> number1<span style=\"color: #666666\">)</span>\n\t\t\t    count1<span style=\"color: #666666\">++;</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> number2<span style=\"color: #666666\">)</span>\n\t\t\t    count2<span style=\"color: #666666\">++;</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count1 <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    number1 <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\t\t\t    count1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t\t    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count2 <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    number2 <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\t\t\t    count2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t\t    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n\t\t\t    count1<span style=\"color: #666666\">--;</span>\n\t\t\t    count2<span style=\"color: #666666\">--;</span>\n\t\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    count1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t    count2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> number1<span style=\"color: #666666\">)</span>\n\t\t\t    count1<span style=\"color: #666666\">++;</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> number2<span style=\"color: #666666\">)</span>\n\t\t\t    count2<span style=\"color: #666666\">++;</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count1 <span style=\"color: #666666\">&gt;</span> len <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3)</span>\n\t\t    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>number1<span style=\"color: #666666\">);</span>\n\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count2 <span style=\"color: #666666\">&gt;</span> len <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3)</span>\n\t\t    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>number2<span style=\"color: #666666\">);</span>\n\t    <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 231,
        "NUMBER": 230,
        "TITLE": "Kth Smallest Element in a BST",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p>\n\n    <p><b>Note: </b><br>\n        You may assume k is always valid, 1 ? k ? BST's total elements.</p>\n\n    <p><b>Follow up:</b><br>\n        What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">kthSmallest</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// if(root == null || k &lt; 1) return -1;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> countNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&lt;=</span> count<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> kthSmallest<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&gt;</span> count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// 1 is counted as current node</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> kthSmallest<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">-1-</span>count<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countNodes</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">+</span> countNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> countNodes<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 232,
        "NUMBER": 236,
        "TITLE": "Lowest Common Ancestor of a Binary Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n</p>\n\n    <pre>        _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4\n</pre>\n\n    <p>\n        For example, the lowest common ancestor (LCA) of nodes <code>5</code> and <code>1</code> is <code>3</code>. Another example is LCA of nodes <code>5</code> and <code>4</code> is <code>5</code>, since a node can be a descendant of itself according to the LCA definition.</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">//To calculate time complexity,</span>\n    <span style=\"color: #408080; font-style: italic\">//  f(n)=2*f(n-1)=2*2*f(n-2)=2^(logn), so time=O(n).</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">lowestCommonAncestor</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> TreeNode p<span style=\"color: #666666\">,</span> TreeNode q<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">==</span> p <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">==</span> q<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n        TreeNode left <span style=\"color: #666666\">=</span> lowestCommonAncestor<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> p<span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">);</span>\n        TreeNode right <span style=\"color: #666666\">=</span> lowestCommonAncestor<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> p<span style=\"color: #666666\">,</span> q<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> right<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 233,
        "NUMBER": 238,
        "TITLE": "Product of Array Except Self",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>\n        Given an array of <i>n</i> integers where <i>n</i> &gt; 1, <code>nums</code>, return an array <code>output</code>        such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>\n\n    <p>Solve it <b>without division</b> and in O(<i>n</i>).</p>\n\n    <p>For example, given <code>[1,2,3,4]</code>, return <code>[24,12,8,6]</code>.\n\n    </p>\n    <p><b>Follow up:</b><br> Could you solve it with constant space complexity? (Note: The output array <b>does not</b> count\n        as extra space for the purpose of space complexity analysis.)</p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">productExceptSelf</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        \n        result<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=1;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]*</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-2;</span> i<span style=\"color: #666666\">&gt;-1;</span> i<span style=\"color: #666666\">--)</span>\n            nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1]*</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        \n        result<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-2];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-2;</span> i<span style=\"color: #666666\">&gt;0;</span> i<span style=\"color: #666666\">--){</span>\n            result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]*</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1];</span>\n        <span style=\"color: #666666\">}</span>\n        result<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[1];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 234,
        "NUMBER": 240,
        "TITLE": "Search a 2D Matrix II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following\n        properties:</p>\n\n    <p>\n    </p>\n    <ul>\n        <li>Integers in each row are sorted in ascending from left to right.</li>\n        <li>Integers in each column are sorted in ascending from top to bottom.</li>\n    </ul>\n    <p></p>\n\n    <p>\n        For example,</p>\n    <p>\n        Consider the following matrix:\n    </p>\n    <pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre>\n\n    <p>Given <b>target</b> = <code>5</code>, return <code>true</code>.</p>\n    <p>Given <b>target</b> = <code>20</code>, return <code>false</code>.</p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/*</span>\n<span style=\"color: #408080; font-style: italic\">     * We start search the matrix from top right corner, </span>\n<span style=\"color: #408080; font-style: italic\">     * initialize the current position to top right corner, </span>\n<span style=\"color: #408080; font-style: italic\">     * if the target is greater than the value in current position, </span>\n<span style=\"color: #408080; font-style: italic\">     * then the target can not be in entire row of current position because </span>\n<span style=\"color: #408080; font-style: italic\">     * the row is sorted, if the target is less than the value in current position, </span>\n<span style=\"color: #408080; font-style: italic\">     * then the target can not in the entire column because the column is sorted too. </span>\n<span style=\"color: #408080; font-style: italic\">     * We can rule out one row or one column each time, </span>\n<span style=\"color: #408080; font-style: italic\">     * so the time complexity is O(m+n).</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">    */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">searchMatrix</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>matrix <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>col <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> row <span style=\"color: #666666\">&lt;=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">==</span> matrix<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                col<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&gt;</span> matrix<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                row<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 7",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 235,
        "NUMBER": 241,
        "TITLE": "Different Ways to Add Parentheses",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to\n        group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p>\n    <br>\n    <b>Example 1</b>\n    <p>Input: <code>\"2-1-1\"</code>.</p>\n    <pre>((2-1)-1) = 0\n(2-(1-1)) = 2</pre>\n    <p>Output: <code>[0, 2]</code></p>\n    <br>\n    <b>Example 2</b>\n    <p>Input: <code>\"2*3-4*5\"</code></p>\n    <pre>(2*(3-(4*5))) = -34\n((2*3)-(4*5)) = -14\n((2*(3-4))*5) = -10\n(2*((3-4)*5)) = -10\n(((2*3)-4)*5) = 10</pre>\n    <p>Output: <code>[-34, -14, -10, -10, 10]</code></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">diffWaysToCompute</span><span style=\"color: #666666\">(</span>String input<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isDigit</span><span style=\"color: #666666\">(</span>input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))){</span>\n                String part1 <span style=\"color: #666666\">=</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> i<span style=\"color: #666666\">);</span>\n                String part2 <span style=\"color: #666666\">=</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1);</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> part1Vals <span style=\"color: #666666\">=</span> diffWaysToCompute<span style=\"color: #666666\">(</span>part1<span style=\"color: #666666\">);</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> part2Vals <span style=\"color: #666666\">=</span> diffWaysToCompute<span style=\"color: #666666\">(</span>part2<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> part1Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++){</span>\n                    <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> part2Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> k<span style=\"color: #666666\">++){</span>\n                        <span style=\"color: #008000; font-weight: bold\">switch</span><span style=\"color: #666666\">(</span>input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)){</span>\n                            <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">:</span>\n                                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>part1Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> part2Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">));</span>\n                                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                            <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&#39;+&#39;</span><span style=\"color: #666666\">:</span>\n                                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>part1Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> part2Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">));</span>\n                                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                            <span style=\"color: #008000; font-weight: bold\">case</span> <span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">:</span>\n                                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>part1Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> part2Vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">));</span>\n                                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                        <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span> \n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>input<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 236,
        "NUMBER": 247,
        "TITLE": "Strobogrammatic Number II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<blockquote>\n    <p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n    <p>Find all strobogrammatic numbers that are of length = n.</p>\n    <p>For example, Given n = 2, return <code>[\"11\",\"69\",\"88\",\"96\"]</code>.</p>\n</blockquote>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findStrobogrammatic</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;1&quot;</span><span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;8&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String s <span style=\"color: #666666\">:</span> res<span style=\"color: #666666\">){</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;1&quot;</span> <span style=\"color: #666666\">+</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;1&quot;</span><span style=\"color: #666666\">);</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;6&quot;</span> <span style=\"color: #666666\">+</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;9&quot;</span><span style=\"color: #666666\">);</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;9&quot;</span> <span style=\"color: #666666\">+</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;6&quot;</span><span style=\"color: #666666\">);</span>\n                temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;8&quot;</span> <span style=\"color: #666666\">+</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;8&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            res <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 237,
        "NUMBER": 253,
        "TITLE": "Meeting Rooms II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...]\n    find the minimum number of conference rooms required.</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minMeetingRooms</span><span style=\"color: #666666\">(</span>Interval<span style=\"color: #666666\">[]</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>intervals <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Interval i1<span style=\"color: #666666\">,</span> Interval i2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> i1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">-</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">&lt;</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #666666\">}</span>\n            queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 238,
        "NUMBER": 260,
        "TITLE": "Single Number III",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p>\n        <p>\n                Given an array of numbers <code>nums</code>, in which exactly two elements appear only once and all the other\n                elements appear exactly twice. Find the two elements that appear only once.\n        </p>\n        <p>\n                For example:\n        </p>\n        <p>\n                Given <code>nums = [1, 2, 1, 3, 2, 5]</code>, return <code>[3, 5]</code>.\n        </p>\n        <p>\n                <b>Note</b>:<br>\n        </p>\n        <ol>\n                <li>The order of the result is not important. So in the above example, <code>[5, 3]</code> is also correct.</li>\n                <li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space\n                        complexity?</li>\n        </ol>\n        <p></p>\n</div>\n        ",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">singleNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> A <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> B <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> AXORB <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            AXORB <span style=\"color: #666666\">^=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        \n        <span style=\"color: #408080; font-style: italic\">// AXORB = (AXORB &amp; (AXORB - 1)) ^ AXORB; //find the different bit</span>\n        <span style=\"color: #B00040\">int</span> lowBit <span style=\"color: #666666\">=</span> AXORB <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">-</span>AXORB<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">&lt;</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>lowBit <span style=\"color: #666666\">&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                A <span style=\"color: #666666\">^=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                B <span style=\"color: #666666\">^=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>A<span style=\"color: #666666\">,</span> B<span style=\"color: #666666\">};</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 239,
        "NUMBER": 264,
        "TITLE": "Ugly Number II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n      <p></p>\n      <p>\n            Write a program to find the <code>n</code>-th ugly number.\n      </p>\n\n      <p>\n            Ugly numbers are positive numbers whose prime factors only include <code>2, 3, 5</code>. For example, <code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code>            is the sequence of the first <code>10</code> ugly numbers.\n      </p>\n\n      <p>\n            Note that <code>1</code> is typically treated as an ugly number, and <i>n</i> <b>does not exceed 1690</b>.\n      </p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">nthUglyNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n        \n        <span style=\"color: #B00040\">int</span> h <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> d2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> d3 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> d5 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">-1;</span> i<span style=\"color: #666666\">++){</span>\n            d2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(2</span> <span style=\"color: #666666\">*</span> h<span style=\"color: #666666\">);</span>\n            d3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(3</span> <span style=\"color: #666666\">*</span> h<span style=\"color: #666666\">);</span>\n            d5<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(5</span> <span style=\"color: #666666\">*</span> h<span style=\"color: #666666\">);</span>\n            h <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>d2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">(),</span> d3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()),</span> d5<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>h <span style=\"color: #666666\">==</span> d2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span>\n                d2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>h <span style=\"color: #666666\">==</span> d3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span>\n                d3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>h <span style=\"color: #666666\">==</span> d5<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span>\n                d5<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> h<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 240,
        "NUMBER": 274,
        "TITLE": "H-Index",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>\n        Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's\n        h-index.\n    </p>\n\n    <p>\n        According to the definition of h-index on Wikipedia:\n        \"A scientist has index <i>h</i> if <i>h</i> of his/her <i>N</i> papers have <b>at least</b> <i>h</i> citations each,\n        and the other <i>N − h</i> papers have <b>no more than</b> <i>h</i> citations each.\"\n    </p>\n\n    <p>\n        For example, given <code>citations = [3, 0, 6, 1, 5]</code>, which means the researcher has <code>5</code> papers\n        in total and each of them had received <code>3, 0, 6, 1, 5</code> citations respectively. Since the researcher has\n        <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining two with <b>no more than</b>        <code>3</code> citations each, his h-index is <code>3</code>.\n    </p>\n\n    <p>\n        <b>Note</b>: If there are several possible values for <code>h</code>, the maximum one is taken as the h-index.\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hIndex</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> citations<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>citations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>citations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> citations<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n\n\t\t<span style=\"color: #408080; font-style: italic\">// Map for citations numbers with paper count</span>\n\t\tMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;();</span>\n\t\t<span style=\"color: #B00040\">int</span> currentHIdex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> resHIndex<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> c <span style=\"color: #666666\">:</span> citations<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">))</span>\n\t\t\t\tmap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">else</span>\n\t\t\t\tmap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> uniqueCitations <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()];</span>\n\t\t<span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n\t\t\tuniqueCitations<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\tArrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">);</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>uniqueCitations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">&lt;=</span> \n\t\t    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>uniqueCitations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]))</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> uniqueCitations<span style=\"color: #666666\">[</span>uniqueCitations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n\t\tresHIndex <span style=\"color: #666666\">=</span> currentHIdex <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>uniqueCitations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> uniqueCitations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n\t\t\tmap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> \n\t\t\t    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">+</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]));</span>\n\t\t\tcurrentHIdex <span style=\"color: #666666\">=</span> uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">?</span> \n\t\t\t    uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>uniqueCitations<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n\t\t\tresHIndex <span style=\"color: #666666\">=</span> currentHIdex <span style=\"color: #666666\">&gt;</span> resHIndex <span style=\"color: #666666\">?</span> currentHIdex <span style=\"color: #666666\">:</span> resHIndex<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> resHIndex<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 241,
        "NUMBER": 275,
        "TITLE": "H-Index II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n<b>Follow up</b> for <a href=\"/problems/h-index/\" target=\"_blank\">H-Index</a>: What if the <code>citations</code> array is sorted in ascending order? Could you optimize your algorithm?\n</p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hIndex</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> citations<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> len <span style=\"color: #666666\">=</span> citations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> citations<span style=\"color: #666666\">[</span>len<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\t\t\n\t\t<span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> len<span style=\"color: #666666\">-1,</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">-</span>start<span style=\"color: #666666\">)/2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\t\t\t\t\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">){</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>citations<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> len <span style=\"color: #666666\">-</span> mid<span style=\"color: #666666\">)</span>\t<span style=\"color: #008000; font-weight: bold\">return</span> citations<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">];</span>\n\t\t\t\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>citations<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> len <span style=\"color: #666666\">-</span> mid<span style=\"color: #666666\">)</span>\n\t\t\t\tstart <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">+1;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">else</span>\n\t\t\t\tend <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">-1;</span>\n\t\t\tmid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">-</span>start<span style=\"color: #666666\">)/2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\t\t\t\t\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> len <span style=\"color: #666666\">-</span> end <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 242,
        "NUMBER": 279,
        "TITLE": "Perfect Squares",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a positive integer <i>n</i>, find the least number of perfect square numbers (for example, <code>1, 4, 9, 16, ...</code>) which sum to <i>n</i>.\n</p>\n\n<p>\nFor example, given <i>n</i> = <code>12</code>, return <code>3</code> because <code>12 = 4 + 4 + 4</code>; given <i>n</i> = <code>13</code>, return <code>2</code> because <code>13 = 4 + 9</code>.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numSquares</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dpArray <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n        dpArray<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=2;</span> i<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">+1;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> sqareRoot <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sqrt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sqareRoot<span style=\"color: #666666\">*</span>sqareRoot <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">){</span>\n                dpArray<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n                \n            <span style=\"color: #B00040\">int</span> minNumSquares <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> scanTo <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> i<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">:</span> i<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=1;</span> j<span style=\"color: #666666\">&lt;</span>scanTo<span style=\"color: #666666\">+1;</span> j<span style=\"color: #666666\">++){</span>\n                minNumSquares <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>dpArray<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> dpArray<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">&lt;</span> minNumSquares <span style=\"color: #666666\">?</span> \n                    <span style=\"color: #666666\">(</span>dpArray<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> dpArray<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">:</span> minNumSquares<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            dpArray<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> minNumSquares<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dpArray<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 9, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 243,
        "NUMBER": 280,
        "TITLE": "Wiggle Sort",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given an unsorted array <code>nums</code>, reorder it such that\n    <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>.\n</p>\n\n<p>\n    <b>Example:</b><br>\n    (1) Given <code>nums = [3, 5, 2, 1, 6, 4]</code>, one possible answer is <code>[1, 6, 2, 5, 3, 4]</code>.\n</p>\n\n<p>\n    <b>Note:</b><br>\n    You may assume all input has valid answer.\n</p>\n\n<p>\n    <b>Follow Up:</b><br>\n    Can you do it in O(n) time and/or in-place with O(1) extra space?\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Solution 1: sort first </span>\n    <span style=\"color: #408080; font-style: italic\">// Time Complexity: O(NlogN)</span>\n    <span style=\"color: #408080; font-style: italic\">// Space Complexity: O(1)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">wiggleSort</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Sort first</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Swap in pair</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">+=2){</span>\n            <span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Solution 2: Swap if any of following conditions are true:</span>\n    <span style=\"color: #408080; font-style: italic\">// 1. Odd index and nums[i] &lt; nums[i - 1]</span>\n    <span style=\"color: #408080; font-style: italic\">// 2. Even index and nums[i] &gt; nums[i - 1]</span>\n    <span style=\"color: #408080; font-style: italic\">// Time: O(N); Space: O(1)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">wiggleSort</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1])</span> <span style=\"color: #666666\">||</span> \n                <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1])){</span>\n                <span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n                nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 244,
        "NUMBER": 284,
        "TITLE": "Peeking Iterator",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p>\n\n<hr>\n<p>Here is an example. Assume that the iterator is initialized to the beginning of the list: <code>[1, 2, 3]</code>.</p>\n\n<p>Call <code>next()</code> gets you 1, the first element in the list.</p>\n\n<p>Now you call <code>peek()</code> and it returns 2, the next element. Calling <code>next()</code> after that <i><b>still</b></i> return 2.</p>\n\n<p>You call <code>next()</code> the final time and it returns 3, the last element. Calling <code>hasNext()</code> after that should return false.</p>\n\n<p>\n<b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">// Java Iterator interface reference:</span>\n<span style=\"color: #408080; font-style: italic\">// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</span>\n<span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">PeekingIterator</span> <span style=\"color: #008000; font-weight: bold\">implements</span> Iterator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> Iterator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> iterator<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> hasPeeked<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Integer peekedElement<span style=\"color: #666666\">;</span>\n    \n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">PeekingIterator</span><span style=\"color: #666666\">(</span>Iterator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> iterator<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t    <span style=\"color: #408080; font-style: italic\">// initialize any member here.</span>\n\t    <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">iterator</span> <span style=\"color: #666666\">=</span> iterator<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Returns the next element in the iteration without advancing the iterator.</span>\n\t<span style=\"color: #008000; font-weight: bold\">public</span> Integer <span style=\"color: #0000FF\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>hasPeeked<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            peekedElement <span style=\"color: #666666\">=</span> iterator<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n            hasPeeked <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> peekedElement<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #408080; font-style: italic\">// hasNext() and next() should behave the same as in the Iterator interface.</span>\n\t<span style=\"color: #408080; font-style: italic\">// Override them if needed.</span>\n\t<span style=\"color: #AA22FF\">@Override</span>\n\t<span style=\"color: #008000; font-weight: bold\">public</span> Integer <span style=\"color: #0000FF\">next</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>hasPeeked<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> iterator<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n        Integer result <span style=\"color: #666666\">=</span> peekedElement<span style=\"color: #666666\">;</span>\n        hasPeeked <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        peekedElement <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #AA22FF\">@Override</span>\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">hasNext</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n\t    <span style=\"color: #008000; font-weight: bold\">return</span> hasPeeked <span style=\"color: #666666\">||</span> iterator<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">hasNext</span><span style=\"color: #666666\">();</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 245,
        "NUMBER": 285,
        "TITLE": "Inorder Successor in BST",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.</p>>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TreeNode</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">;</span>\n        TreeNode left<span style=\"color: #666666\">;</span>\n        TreeNode right<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time is O(log(n)) and space is O(1).</span>\n<span style=\"color: #408080; font-style: italic\">     * @param root</span>\n<span style=\"color: #408080; font-style: italic\">     * @param p</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">inorderSuccessor</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> TreeNode p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Try to find the node p and track node larger than it</span>\n        TreeNode next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        TreeNode c <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">!=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                next <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n                c <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                c <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Node not found</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Node don&#39;t has right child</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> next<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Return left most node of right child</span>\n        c <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            c <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> c<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 246,
        "NUMBER": 287,
        "TITLE": "Find the Duplicate Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven an array <i>nums</i> containing <i>n</i> + 1 integers where each integer is between 1 and <i>n</i> (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n</p>\n\n<p>\n<b>Note:</b><br>\n</p><ol>\n<li>You <b>must not</b> modify the array (assume the array is read only).</li>\n<li>You must use only constant, <i>O</i>(1) extra space.</li>\n<li>Your runtime complexity should be less than <code>O(n<sup>2</sup>)</code>.</li>\n<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>\n</ol>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// https://segmentfault.com/a/1190000003817671</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findDuplicate</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> slow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> fast <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">// Find where the slow pointer meet fast pointer</span>\n        <span style=\"color: #008000; font-weight: bold\">do</span><span style=\"color: #666666\">{</span>\n            slow <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">];</span>\n            fast <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">[</span>fast<span style=\"color: #666666\">]];</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>slow <span style=\"color: #666666\">!=</span> fast<span style=\"color: #666666\">);</span>\n        \n        <span style=\"color: #408080; font-style: italic\">// Use a new pointer to start from begining until</span>\n        <span style=\"color: #408080; font-style: italic\">// it meet with the slow pointer</span>\n        <span style=\"color: #B00040\">int</span> find <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>find <span style=\"color: #666666\">!=</span> slow<span style=\"color: #666666\">){</span>\n            slow <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>slow<span style=\"color: #666666\">];</span>\n            find <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>find<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> find<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 247,
        "NUMBER": 289,
        "TITLE": "Game of Life",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nAccording to the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia's article</a>: \"The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n</p>\n\n<p>\nGiven a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n</p>\n\n<p>\n</p><ol>\n<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\n<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\n<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ol>\n<p></p>\n\n<p>\nWrite a function to compute the next state (after one update) of the board given its current state.</p>\n\n<p>\n<b>Follow up</b>: <br>\n</p><ol>\n<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>\n<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>\n</ol>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">gameOfLife</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t<span style=\"color: #B00040\">int</span> lives <span style=\"color: #666666\">=</span> liveNeighbors<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> m<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">);</span>\n\n\t\t\t\t<span style=\"color: #408080; font-style: italic\">// In the beginning, every 2nd bit is 0;</span>\n\t\t\t\t<span style=\"color: #408080; font-style: italic\">// So we only need to care about when the 2nd bit will become 1.</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> lives <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">&amp;&amp;</span> lives <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t\tboard<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span> <span style=\"color: #408080; font-style: italic\">// Make the 2nd bit 1: 01 ---&gt; 11</span>\n\t\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> lives <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\t\tboard<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> <span style=\"color: #408080; font-style: italic\">// Make the 2nd bit 1: 00 ---&gt; 10</span>\n\t\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #666666\">}</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\tboard<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;&gt;=</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// Get the 2nd state.</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">liveNeighbors</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #B00040\">int</span> lives <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">0);</span> x <span style=\"color: #666666\">&lt;=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span> x<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> y <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">0);</span> y <span style=\"color: #666666\">&lt;=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span> y<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t\tlives <span style=\"color: #666666\">+=</span> board<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">][</span>y<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\tlives <span style=\"color: #666666\">-=</span> board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> lives<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 248,
        "NUMBER": 299,
        "TITLE": "Bulls and Cows",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>You are playing the following <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\">Bulls and Cows</a> game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \"bulls\") and how many digits match the secret number but locate in the wrong position (called \"cows\"). Your friend will use successive guesses and hints to eventually derive the secret number.</p>\n\n<p>\nFor example:\n</p><pre>Secret number:  \"1807\"\nFriend's guess: \"7810\"\n</pre>\nHint: <code>1</code> bull and <code>3</code> cows. (The bull is <code>8</code>, the cows are <code>0</code>, <code>1</code> and <code>7</code>.)\n<p></p>\n\n<p>Write a function to return a hint according to the secret number and friend's guess, use <code>A</code> to indicate the bulls and <code>B</code> to indicate the cows. In the above example, your function should return <code>\"1A3B\"</code>. </p>\n\n<p>Please note that both secret number and friend's guess may contain duplicate digits, for example:\n</p><pre>Secret number:  \"1123\"\nFriend's guess: \"0111\"\n</pre>\nIn this case, the 1st <code>1</code> in friend's guess is a bull, the 2nd or 3rd <code>1</code> is a cow, and your function should return <code>\"1A1B\"</code>.\n<p></p>\n\n<p>You may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">getHint</span><span style=\"color: #666666\">(</span>String secret<span style=\"color: #666666\">,</span> String guess<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> bull<span style=\"color: #666666\">,</span> cow<span style=\"color: #666666\">;</span>\n        bull <span style=\"color: #666666\">=</span> cow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #408080; font-style: italic\">//store the digits of secrete</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> counter_secret <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[10];</span> \n        <span style=\"color: #408080; font-style: italic\">//store the digits of guess</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> counter_guess <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[10];</span> \n\n        <span style=\"color: #B00040\">int</span> L <span style=\"color: #666666\">=</span> secret<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>L<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            counter_secret<span style=\"color: #666666\">[</span>secret<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">]++;</span>\n            <span style=\"color: #408080; font-style: italic\">// if meets a bull, secrete counter should not change</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>secret<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)==</span>guess<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                bull<span style=\"color: #666666\">++;</span>\n                counter_secret<span style=\"color: #666666\">[</span>secret<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">]--;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                counter_guess<span style=\"color: #666666\">[</span>guess<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)-</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">]++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// check the two arrays item by item and sum up the cows</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">9;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            cow <span style=\"color: #666666\">+=</span> counter_secret<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> counter_guess<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">?</span> \n            counter_guess<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]:</span>counter_secret<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span> \n        <span style=\"color: #008000; font-weight: bold\">return</span> bull <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;A&quot;</span> <span style=\"color: #666666\">+</span> cow <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;B&quot;</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 249,
        "NUMBER": 300,
        "TITLE": "Longest Increasing Subsequence",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n</p>\n<p>\nFor example,<br>\nGiven <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br>\nThe longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is <code>4</code>. Note that there may be more than one LIS combination, it is only necessary for you to return the length.\n</p>\n<p>\nYour algorithm should run in O(<i>n<sup>2</sup></i>) complexity.\n</p>\n\n<p><b>Follow up:</b> Could you improve it to O(<i>n</i> log <i>n</i>) time complexity? </p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">lengthOfLIS</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">==0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// if(list.size() == 0 or num &gt; last element in list)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> num <span style=\"color: #666666\">&gt;</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1)){</span>\n                list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// replace element which is the smallest but bigger than num</span>\n            <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> j <span style=\"color: #666666\">=</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">){</span>\n                <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)/2;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>mid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">){</span>\n                    i <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    j <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">set</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 250,
        "NUMBER": 304,
        "TITLE": "Range Sum Query 2D - Immutable",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p>\n\n<p>\n<img src=\"/static/images/courses/range_sum_query_2d.png\" border=\"0\" alt=\"Range Sum Query 2D\"><br>\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\n</p>\n\n<p><b>Example:</b><br>\n</p><pre>Given matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n<p></p>\n\n<p><b>Note:</b><br>\n</p><ol>\n<li>You may assume that the matrix does not change.</li>\n<li>There are many calls to <i>sumRegion</i> function.</li>\n<li>You may assume that <i>row</i>1 ≤ <i>row</i>2 and <i>col</i>1 ≤ <i>col</i>2.</li>\n</ol>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">NumMatrix</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> sum<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">NumMatrix</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">matrix</span> <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">;</span>\n         \n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n         \n        sum <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n         \n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                sum<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> sum<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> sum<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> \n                            sum<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> matrix<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumRegion</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">[</span>row2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>col2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> sum<span style=\"color: #666666\">[</span>row2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>col1<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> \n               sum<span style=\"color: #666666\">[</span>row1<span style=\"color: #666666\">][</span>col2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> sum<span style=\"color: #666666\">[</span>row1<span style=\"color: #666666\">][</span>col1<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n\n<span style=\"color: #408080; font-style: italic\">// Your NumMatrix object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// NumMatrix numMatrix = new NumMatrix(matrix);</span>\n<span style=\"color: #408080; font-style: italic\">// numMatrix.sumRegion(0, 1, 2, 3);</span>\n<span style=\"color: #408080; font-style: italic\">// numMatrix.sumRegion(1, 2, 3, 4);</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 251,
        "NUMBER": 306,
        "TITLE": "Additive Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Additive number is a string whose digits can form additive sequence.</p>\n\n<p>A valid additive sequence should contain <b>at least</b> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\n\n<p>\nFor example:<br>\n<code>\"112358\"</code> is an additive number because the digits can form an additive sequence: <code>1, 1, 2, 3, 5, 8</code>.\n</p><pre>1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</pre>\n<code>\"199100199\"</code> is also an additive number, the additive sequence is: <code>1, 99, 100, 199</code>.\n<pre>1 + 99 = 100, 99 + 100 = 199</pre>\n<p></p>\n\n<p>\n<b>Note:</b> Numbers in the additive sequence <b>cannot</b> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.\n</p>\n\n<p>Given a string containing only digits <code>'0'-'9'</code>, write a function to determine if it's an additive number.</p>\n\n<p>\n<b>Follow up:</b><br>\nHow would you handle overflow for very large input integers?\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">java.math.BigInteger</span><span style=\"color: #666666\">;</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isAdditiveNumber</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> n <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> n <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>j<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>isValid<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValid</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> String num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        String sum<span style=\"color: #666666\">;</span>\n        Long x1 <span style=\"color: #666666\">=</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseLong</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> i<span style=\"color: #666666\">));</span>\n        Long x2 <span style=\"color: #666666\">=</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseLong</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> j<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> j<span style=\"color: #666666\">;</span> start <span style=\"color: #666666\">!=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> start <span style=\"color: #666666\">+=</span> sum<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            x2 <span style=\"color: #666666\">=</span> x2 <span style=\"color: #666666\">+</span> x1<span style=\"color: #666666\">;</span>\n            x1 <span style=\"color: #666666\">=</span> x2 <span style=\"color: #666666\">-</span> x1<span style=\"color: #666666\">;</span>\n            sum <span style=\"color: #666666\">=</span> x2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">startsWith</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 252,
        "NUMBER": 307,
        "TITLE": "Range Sum Query - Mutable",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> ≤ <i>j</i>), inclusive.</p>\n\nThe <i>update(i, val)</i> function modifies <i>nums</i> by updating the element at index <i>i</i> to <i>val</i>.\n\n<p><b>Example:</b><br>\n</p><pre>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n<p></p>\n\n<p><b>Note:</b><br>\n</p><ol>\n<li>The array is only modifiable by the <i>update</i> function.</li>\n<li>You may assume the number of calls to <i>update</i> and <i>sumRange</i> function is distributed evenly.</li>\n</ol>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">NumArray</span> <span style=\"color: #666666\">{</span>\n    \n    <span style=\"color: #408080; font-style: italic\">// http://www.cnblogs.com/grandyang/p/4985506.html</span>\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">;</span>\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bit<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">NumArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        num <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        bit <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            update<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">update</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> val <span style=\"color: #666666\">-</span> num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">&amp;-</span>j<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            bit<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> diff<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        num<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> val<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">sumRange</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> getSum<span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">-</span> getSum<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">-=</span> <span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">&amp;-</span>j<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            res <span style=\"color: #666666\">+=</span> bit<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n\n<span style=\"color: #408080; font-style: italic\">// Your NumArray object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// NumArray numArray = new NumArray(nums);</span>\n<span style=\"color: #408080; font-style: italic\">// numArray.sumRange(0, 1);</span>\n<span style=\"color: #408080; font-style: italic\">// numArray.update(1, 10);</span>\n<span style=\"color: #408080; font-style: italic\">// numArray.sumRange(1, 2);</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "26, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 253,
        "NUMBER": 309,
        "TITLE": "Best Time to Buy and Sell Stock with Cooldown",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\n\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like\n(ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<ul>\n    <li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\n    <li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\n</ul>\n\n<p><b>Example:</b><br></p>\n<pre>prices = [1, 2, 3, 0, 2]\nmaxProfit = 3\ntransactions = [buy, sell, cooldown, buy, sell]\n</pre>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> buy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n\t\t<span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> sell <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n\t\t\n\t\tbuy<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-</span>prices<span style=\"color: #666666\">[0];</span>\n\t\tbuy<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">&gt;</span> prices<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[1];</span>\n\t\tsell<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t\tsell<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">&gt;</span> prices<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[0])</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n\t\t\tbuy<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>sell<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-2]-</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> buy<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]);</span>\n\t\t\tsell<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>buy<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]+</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> sell<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> sell<span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 254,
        "NUMBER": 310,
        "TITLE": "Minimum Height Trees",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs).\n    Given such a graph, write a function to find all the MHTs and return a list of their root labels.\n</p>\n\n<p>\n    <b>Format</b><br>\n    The graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>.\n    You will be given the number <code>n</code> and a list of undirected <code>edges</code> (each edge is a pair of labels).\n</p>\n<p> \nYou can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are\n    undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in\n    <code>edges</code>.\n</p>\n<p>\n    <b>Example 1:</b>\n</p>\n<p>\n    Given <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\n</p>\n\n<pre>        0\n        |\n        1\n       / \\\n      2   3\n</pre>\n<p>\n    return <code> [1]</code>\n</p>\n\n<p>\n    <b>Example 2:</b>\n</p>\n<p>\n    Given <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\n</p>\n<pre>     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5\n</pre>\n<p>\n    return <code> [3, 4]</code>\n</p>\n\n<p>\n    <b>Note</b>:\n</p>\n<p>\n    (1) According to the definition of tree on Wikipedia: \"a tree is an undirected graph in which any two vertices are connected by\n    <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.\"\n</p>\n<p>\n    (2) The height of a rooted tree is the number of edges on the longest downward path between the root and a\n    leaf.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findMinHeightTrees</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> edges<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #408080; font-style: italic\">// Corner case: there is a single node and no edge at all</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> edges<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #408080; font-style: italic\">// Step 1: construct the graph</span>\n        List<span style=\"color: #666666\">&lt;</span>Set<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> adjList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;());</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> edge <span style=\"color: #666666\">:</span> edges<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> from <span style=\"color: #666666\">=</span> edge<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #B00040\">int</span> to <span style=\"color: #666666\">=</span> edge<span style=\"color: #666666\">[1];</span>\n            adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>from<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>to<span style=\"color: #666666\">);</span>\n            adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>to<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>from<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #408080; font-style: italic\">// Remove leaf nodes</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> leaves <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                leaves<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// identify and remove all leaf nodes</span>\n            n <span style=\"color: #666666\">-=</span> leaves<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> newLeaves <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> leaf <span style=\"color: #666666\">:</span> leaves<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> neighbor <span style=\"color: #666666\">=</span> adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>leaf<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n                adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>neighbor<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>leaf<span style=\"color: #666666\">);</span>\n                 \n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>adjList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>neighbor<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    newLeaves<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>neighbor<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n             \n            leaves <span style=\"color: #666666\">=</span> newLeaves<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #008000; font-weight: bold\">return</span> leaves<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19, 23",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 255,
        "NUMBER": 311,
        "TITLE": "Sparse Matrix Multiplication",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Given two sparse matrices A and B, return the result of AB. <br>\nYou may assume that A's column number is equal to B's row number. <br>\nExample: <br>\n\n<pre style=\"background-color: whitesmoke; border-radius: 4px; border: 1px solid rgb(204, 204, 204); box-sizing: border-box; color: #333333; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; line-height: 1.42857143; margin-bottom: 10px; overflow: auto; padding: 9.5px; word-break: break-all; word-wrap: break-word;\"><span style=\"box-sizing: border-box; font-weight: 700;\">A</span> = [\n  [ 1, 0, 0],\n  [-1, 0, 3]\n]\n\n<span style=\"box-sizing: border-box; font-weight: 700;\">B</span> = [\n  [ 7, 0, 0 ],\n  [ 0, 0, 0 ],\n  [ 0, 0, 1 ]\n]\n\n\n     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |\n<span style=\"box-sizing: border-box; font-weight: 700;\">AB</span> = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |\n                  | 0 0 1 |</pre>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * A sparse matrix can be represented as a sequence of rows,</span>\n<span style=\"color: #408080; font-style: italic\">     * each of which is a sequence of (column-number, value)</span>\n<span style=\"color: #408080; font-style: italic\">     * pairs of the nonzero values in the row.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> <span style=\"color: #0000FF\">multiply</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> B<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> nB <span style=\"color: #666666\">=</span> B<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>nB<span style=\"color: #666666\">];</span>\n\n        List<span style=\"color: #666666\">[]</span> indexA <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> List<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> numsA <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    numsA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">);</span>\n                    numsA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            indexA<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> numsA<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> numsA <span style=\"color: #666666\">=</span> indexA<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> p <span style=\"color: #666666\">&lt;</span> numsA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> p <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> colA <span style=\"color: #666666\">=</span> numsA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">);</span>\n                <span style=\"color: #B00040\">int</span> valA <span style=\"color: #666666\">=</span> numsA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> nB<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> valB <span style=\"color: #666666\">=</span> B<span style=\"color: #666666\">[</span>colA<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                    result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> valA <span style=\"color: #666666\">*</span> valB<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Solution 2 using map</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> <span style=\"color: #0000FF\">multiply</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> B<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span>\n                B <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> B<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[0][0];</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> B<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> C <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>l<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Step 1: convert the sparse A to dense format</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> denseA <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;());</span>\n                    <span style=\"color: #666666\">}</span>\n                    denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">,</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Step 2: convert the sparse B to dense format</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> denseB <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> l<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>B<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;());</span>\n                    <span style=\"color: #666666\">}</span>\n                    denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">,</span> B<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Step3: calculate the denseA * denseB</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">:</span> denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">:</span> denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">:</span> denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                    C<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> denseA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> denseB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> C<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "21",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 256,
        "NUMBER": 313,
        "TITLE": "Super Ugly Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Write a program to find the n<sup>th</sup> super ugly number.\n</p>\n\n<p>\n    Super ugly numbers are positive numbers whose all prime factors are in the given prime list\n    <code>primes</code> of size <code>k</code>. For example, <code>[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]\n</code> is the sequence of the first 12 super ugly numbers given <code>primes</code>\n    = <code>[2, 7, 13, 19]</code> of size 4.\n</p>\n\n<p>\n    <b>Note:</b><br>\n    (1) <code>1</code> is a super ugly number for any given <code>primes</code>.<br>\n    (2) The given numbers in <code>primes</code> are in ascending order.<br>\n    (3) 0 &lt; <code>k</code> ≤ 100, 0 &lt; <code>n</code> ≤ 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000.<br>\n    (4) The n<sup>th</sup> super ugly number is guaranteed to fit in a 32-bit signed integer.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Node</span> <span style=\"color: #008000; font-weight: bold\">implements</span> Comparable<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> prime<span style=\"color: #666666\">;</span>\n \n        Node<span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> prime<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> val<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">index</span> <span style=\"color: #666666\">=</span> index<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">prime</span> <span style=\"color: #666666\">=</span> prime<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n \n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compareTo</span><span style=\"color: #666666\">(</span>Node x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">-</span> x<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">nthSuperUglyNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> primes<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ugly_number <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n        ugly_number<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> primes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Node<span style=\"color: #666666\">(0,</span> primes<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> primes<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]));</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            Node cur <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n            ugly_number<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">do</span> <span style=\"color: #666666\">{</span>\n                cur <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> ugly_number<span style=\"color: #666666\">[++</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">index</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">prime</span><span style=\"color: #666666\">;</span>\n                q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> ugly_number<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ugly_number<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n \n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 257,
        "NUMBER": 318,
        "TITLE": "Maximum Product of Word Lengths",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters.\n    You may assume that each word will contain only lower case letters.\n    If no such two words exist, return 0.\n</p>\n\n<p>\n    <b>Example 1:</b><br>\n</p>\n<p>\n    Given <code>[\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]</code><br>\n    Return <code>16</code><br>\n    The two words can be <code>\"abcw\", \"xtfn\"</code>.\n</p>\n<p>\n    <b>Example 2:</b><br>\n</p>\n<p>\n    Given <code>[\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]</code><br>\n    Return <code>4</code><br>\n    The two words can be <code>\"ab\", \"cd\"</code>.\n</p>\n<p>\n    <b>Example 3:</b><br>\n</p>\n<p>\n    Given <code>[\"a\", \"aa\", \"aaa\", \"aaaa\"]</code><br>\n    Return <code>0</code><br>\n    No such pair of words.    \n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProduct</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> elements <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span>i<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">;</span>i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=0;</span>j<span style=\"color: #666666\">&lt;</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>j<span style=\"color: #666666\">++){</span>\n                elements<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">|=</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n \n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>elements<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> elements<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                    ans <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>ans<span style=\"color: #666666\">,</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">*</span> words<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 258,
        "NUMBER": 319,
        "TITLE": "Bulb Switcher",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nThere are <i>n</i> bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the <i>i</i>th round, you toggle every <i>i</i> bulb. For the <i>n</i>th round, you only toggle the last bulb.\n\nFind how many bulbs are on after <i>n</i> rounds.\n</p>\n\n<p>\n<b>Example:</b><br></p>\n<pre>Given <i>n</i> = 3. <br>\nAt first, the three bulbs are <b>[off, off, off]</b>.\nAfter first round, the three bulbs are <b>[on, on, on]</b>.\nAfter second round, the three bulbs are <b>[on, off, on]</b>.\nAfter third round, the three bulbs are <b>[on, off, off]</b>. <br>\nSo you should return 1, because there is only one bulb is on.\n</pre><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     *  A bulb ends up on iff it is switched an odd number of times.</span>\n<span style=\"color: #408080; font-style: italic\">     *   Call them bulb 1 to bulb n. </span>\n<span style=\"color: #408080; font-style: italic\">     *   Bulb i is switched in round d if and only if d divides i. </span>\n<span style=\"color: #408080; font-style: italic\">     *   So bulb i ends up on if and only if it has an odd number of divisors.</span>\n<span style=\"color: #408080; font-style: italic\">     *   Divisors come in pairs, like i=12 has divisors 1 and 12, 2 and 6, and 3 and 4. </span>\n<span style=\"color: #408080; font-style: italic\">     *   Except when i is a square, like 36 has divisors 1 and 36, 2 and 18, </span>\n<span style=\"color: #408080; font-style: italic\">     *   3 and 12, 4 and 9, and double divisor 6. </span>\n<span style=\"color: #408080; font-style: italic\">     *   So bulb i ends up on if and only if i is a square.</span>\n<span style=\"color: #408080; font-style: italic\">     *   So just count the square numbers. </span>\n<span style=\"color: #408080; font-style: italic\">     * </span>\n<span style=\"color: #408080; font-style: italic\">    */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">bulbSwitch</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sqrt</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 259,
        "NUMBER": 322,
        "TITLE": "Coin Change",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nYou are given coins of different denominations and a total amount of money <i>amount</i>. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.\n</p>\n\n<p>\n<b>Example 1:</b><br>\ncoins = <code>[1, 2, 5]</code>, amount = <code>11</code><br>\nreturn <code>3</code> (11 = 5 + 5 + 1)\n</p>\n\n<p>\n<b>Example 2:</b><br>\ncoins = <code>[2]</code>, amount = <code>3</code><br>\nreturn <code>-1</code>.\n</p>\n\n<p>\n<b>Note</b>:<br>\nYou may assume that you have an infinite number of each kind of coin.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/****************</span>\n<span style=\"color: #408080; font-style: italic\">     * </span>\n<span style=\"color: #408080; font-style: italic\">     * Let dp[v] to be the minimum number of coins required to get the amount v. </span>\n<span style=\"color: #408080; font-style: italic\">     * dp[i+a_coin] = min(dp[i+a_coin], dp[i]+1) if dp[i] is reachable. </span>\n<span style=\"color: #408080; font-style: italic\">     * dp[i+a_coin] = dp[i+a_coin] is dp[i] is not reachable. </span>\n<span style=\"color: #408080; font-style: italic\">     * We initially set dp[i] to be MAX_VALUE.</span>\n<span style=\"color: #408080; font-style: italic\">     * </span>\n<span style=\"color: #408080; font-style: italic\">     *************/</span>\n     \n     <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">coinChange</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> coins<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> amount<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n         <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>amount<span style=\"color: #666666\">==0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n \n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #666666\">[</span>amount<span style=\"color: #666666\">+1];</span>\n        dp<span style=\"color: #666666\">[0]=0;</span> <span style=\"color: #408080; font-style: italic\">// do not need any coin to get 0 amount</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=1;</span>i<span style=\"color: #666666\">&lt;=</span>amount<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;=</span>amount<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> coin<span style=\"color: #666666\">:</span> coins<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+</span>coin <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> i<span style=\"color: #666666\">+</span>coin <span style=\"color: #666666\">&lt;=</span>amount <span style=\"color: #666666\">&amp;&amp;</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]!=</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">){</span>\n                    dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+</span>coin<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+</span>coin<span style=\"color: #666666\">],</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]+1);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>amount<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>amount<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 260,
        "NUMBER": 324,
        "TITLE": "Wiggle Sort II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given an unsorted array <code>nums</code>, reorder it such that\n    <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.\n</p>\n\n<p>\n    <b>Example:</b><br>\n    (1) Given <code>nums = [1, 5, 1, 1, 6, 4]</code>, one possible answer is <code>[1, 4, 1, 5, 1, 6]</code>. <br>\n    (2) Given <code>nums = [1, 3, 2, 2, 3, 1]</code>, one possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.\n</p>\n\n<p>\n    <b>Note:</b><br>\n    You may assume all input has valid answer.\n</p>\n\n<p>\n    <b>Follow Up:</b><br>\n    Can you do it in O(n) time and/or in-place with O(1) extra space?\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * 1. Find the median of the input array</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. 3-way partition the array around median so that left contains greater than median, </span>\n<span style=\"color: #408080; font-style: italic\">     *      middle contains equal to median, and right contains less than median.</span>\n<span style=\"color: #408080; font-style: italic\">     * 3. Take one from each partition in the order of middle --&gt; left --&gt; right </span>\n<span style=\"color: #408080; font-style: italic\">     *      (as middle &lt; left &gt; right is wiggle order).  </span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">wiggleSort</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n         \n        <span style=\"color: #408080; font-style: italic\">// Step 1: Find median of the array, return the index of the median</span>\n        <span style=\"color: #408080; font-style: italic\">// Step 2: 3-way sort, put median in the middle, </span>\n        <span style=\"color: #408080; font-style: italic\">// numbers less than median on the left, </span>\n        <span style=\"color: #408080; font-style: italic\">// numbers greater than median on the right</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> median <span style=\"color: #666666\">=</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2);</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        \n        <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">           DNF order: [9,8,7,6  5,  4,3,2,1]</span>\n<span style=\"color: #408080; font-style: italic\">           DNF Index: [0,1,2,3, 4,  5,6,7,8]</span>\n<span style=\"color: #408080; font-style: italic\">           Wiggle order: [5, 9, 4, 8, 3, 7, 2, 6, 1]</span>\n<span style=\"color: #408080; font-style: italic\">           Wiggle Index: [0, 1, 2, 3, 4, 5, 6, 7, 8]</span>\n\n<span style=\"color: #408080; font-style: italic\">            Index Mapping: </span>\n<span style=\"color: #408080; font-style: italic\">            ---------------</span>\n<span style=\"color: #408080; font-style: italic\">            DNF --&gt; Wiggle (value)</span>\n<span style=\"color: #408080; font-style: italic\">            -----------------------</span>\n<span style=\"color: #408080; font-style: italic\">            0 --&gt; 1 (9)</span>\n<span style=\"color: #408080; font-style: italic\">            1 --&gt; 3 (8)</span>\n<span style=\"color: #408080; font-style: italic\">            2 --&gt; 5 (7)</span>\n<span style=\"color: #408080; font-style: italic\">            3 --&gt; 7 (6)</span>\n<span style=\"color: #408080; font-style: italic\">            4 --&gt; 0 (5)</span>\n<span style=\"color: #408080; font-style: italic\">            5 --&gt; 2 (4)</span>\n<span style=\"color: #408080; font-style: italic\">            6 --&gt; 4 (3)</span>\n<span style=\"color: #408080; font-style: italic\">            7 --&gt; 6 (2)</span>\n<span style=\"color: #408080; font-style: italic\">            8 --&gt; 8 (1) </span>\n\n<span style=\"color: #408080; font-style: italic\">            that is DNF(i) = WIGGLE((1+2*i)%n)</span>\n<span style=\"color: #408080; font-style: italic\">        **/</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;=</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>newIndex<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span>n<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&gt;</span> median<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> newIndex<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">++,</span>n<span style=\"color: #666666\">),</span> newIndex<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">++,</span>n<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>newIndex<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span>n<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&lt;</span> median<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> newIndex<span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">--,</span>n<span style=\"color: #666666\">),</span> newIndex<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span>n<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">newIndex</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2*</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">|</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n     \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">);</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #408080; font-style: italic\">// quick select: kth smallest</span>\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;</span> end<span style=\"color: #666666\">)</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\n\t\t<span style=\"color: #B00040\">int</span> pivot <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span><span style=\"color: #408080; font-style: italic\">// Take A[end] as the pivot,</span>\n\t\t<span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> pivot<span style=\"color: #666666\">)</span> <span style=\"color: #408080; font-style: italic\">// Put numbers &lt; pivot to pivot&#39;s left</span>\n\t\t\t\tswap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">++,</span> i<span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\tswap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">);</span><span style=\"color: #408080; font-style: italic\">// Finally, swap A[end] with A[left]</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Found kth smallest number</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Check right part</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #408080; font-style: italic\">// Check left part</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> k<span style=\"color: #666666\">);</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\t\tA<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n\t\tA<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 261,
        "NUMBER": 325,
        "TITLE": "Maximum Size Subarray Sum Equals k",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k.\n    If there isn't one, return 0 instead.</p>\n\n<p>Note:<br>\n    The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>\n\n<p>Example 1:<br>\n    Given nums = [1, -1, 5, -2, 3], k = 3,<br>\n    return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxSubArrayLen</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            sum <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> sum <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>diff<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>diff<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 262,
        "NUMBER": 328,
        "TITLE": "Odd Even Linked List",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>\n\n<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p><p>\n\n</p><p>\n<b>Example:</b><br>\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>,<br>\nreturn <code>1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code>.\n</p>\n<p>\n<b>Note:</b><br>\nThe relative order inside both the even and odd groups should remain as it was in the input. <br>\nThe first node is considered odd, the second node even and so on ...\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">oddEvenList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">,</span> tail <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n        \ttail <span style=\"color: #666666\">=</span> tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        \tlen<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n            \n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">&lt;=</span> len<span style=\"color: #666666\">/2){</span>\n            ListNode even <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> even<span style=\"color: #666666\">;</span>\n            tail <span style=\"color: #666666\">=</span> tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            count<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 263,
        "NUMBER": 331,
        "TITLE": "Verify Preorder Serialization of a Binary Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p>\n\n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre>\n\n<p>For example, the above binary tree can be serialized to the string <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>, where <code>#</code> represents a null node.\n</p>\n\n<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>\n\n<p>Each comma separated value in the string must be either an integer or a character <code>'#'</code> representing <code>null</code> pointer.</p>\n\n<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>\"1,,3\"</code>.</p>\n\n<p><strong>Example 1:</strong><br>\n<code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code><br>\nReturn <code>true</code></p>\n<p><strong>Example 2:</strong><br>\n<code>\"1,#\"</code><br>\nReturn <code>false</code></p>\n<p><strong>Example 3:</strong><br>\n<code>\"9,#,#,1\"</code><br>\nReturn <code>false</code></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidSerialization</span><span style=\"color: #666666\">(</span>String preorder<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String x <span style=\"color: #666666\">:</span> preorder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;,&quot;</span><span style=\"color: #666666\">)){</span>\n\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">);</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">&amp;&amp;</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;#&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> \n\t\t\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-2).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;#&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> \n\t\t\t\t\t<span style=\"color: #666666\">!</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-3).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;#&quot;</span><span style=\"color: #666666\">)){</span>\n\t\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n\t\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n\t\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n\t\t\t\tlist<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;#&quot;</span><span style=\"color: #666666\">);</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #666666\">}</span>\t\t        \n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1).</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;#&quot;</span><span style=\"color: #666666\">));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 264,
        "NUMBER": 332,
        "TITLE": "Reconstruct Itinerary",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.\n</p>\n<p>\n<b>Note:</b><br>\n</p><ol>\n<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[\"JFK\", \"LGA\"]</code> has a smaller lexical order than <code>[\"JFK\", \"LGB\"]</code>.</li>\n<li>All airports are represented by three capital letters (IATA code).</li>\n<li>You may assume all tickets form at least one valid itinerary.</li>\n</ol>\n<p></p>\n\n<p>\n    <b>Example 1:</b><br>\n    <code>tickets</code> = <code>[[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]</code><br>\n    Return <code>[\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]</code>.<br>\n</p>\n<p>\n    <b>Example 2:</b><br>\n    <code>tickets</code> = <code>[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]</code><br>\n    Return <code>[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]</code>.<br>\n    Another possible reconstruction is <code>[\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]</code>. But it is larger in lexical order.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;();</span>\n\tLinkedList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n \n\t<span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findItinerary</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[][]</span> tickets<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> ticket <span style=\"color: #666666\">:</span> tickets<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>ticket<span style=\"color: #666666\">[0]))</span> <span style=\"color: #666666\">{</span>\n\t\t\t\tPriorityQueue<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n\t\t\t\tmap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>ticket<span style=\"color: #666666\">[0],</span> q<span style=\"color: #666666\">);</span>\n\t\t\t<span style=\"color: #666666\">}</span>\n\t\t\tmap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>ticket<span style=\"color: #666666\">[0]).</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>ticket<span style=\"color: #666666\">[1]);</span>\n\t\t<span style=\"color: #666666\">}</span>\n \n\t\tdfs<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;JFK&quot;</span><span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n \n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">dfs</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\tPriorityQueue<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>q <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n\t\t\tdfs<span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\tresult<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addFirst</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 23",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 265,
        "NUMBER": 334,
        "TITLE": "Increasing Triplet Subsequence",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n</p>\n<p>\nFormally the function should:<br>\n</p><blockquote>Return true if there exists <i>i, j, k </i> <br>\nsuch that <i>arr[i]</i> &lt; <i>arr[j]</i> &lt; <i>arr[k]</i> given 0 ≤ <i>i</i> &lt; <i>j</i> &lt; <i>k</i> ≤ <i>n</i>-1 \nelse return false.\n</blockquote>\n<p></p>\n<p>\nYour algorithm should run in O(<i>n</i>) time complexity and O(<i>1</i>) space complexity.\n</p>\n<p>\n<b>Examples:</b><br>\nGiven <code>[1, 2, 3, 4, 5]</code>,<br>\nreturn <code>true</code>.\n</p>\n<p>\nGiven <code>[5, 4, 3, 2, 1]</code>,<br>\nreturn <code>false</code>.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">increasingTriplet</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> smallest <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> smallest<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    smallest <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span><span style=\"color: #408080; font-style: italic\">// update x to be a smaller value</span>\n\t\t    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> mid<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t    mid <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span> <span style=\"color: #408080; font-style: italic\">// update so that mid &gt; smallest  </span>\n\t\t    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n\t\t\t    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\t\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #666666\">}</span>\n    \t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 266,
        "NUMBER": 337,
        "TITLE": "House Robber III",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \"root.\" Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \"all houses in this place forms a binary tree\". It will automatically contact the police if two directly-linked houses were broken into on the same night.\n</p>\n\n<p>\nDetermine the maximum amount of money the thief can rob tonight without alerting the police.\n</p>\n\n<p><b>Example 1:</b><br>\n</p><pre>     <font color=\"red\">3</font>\n    / \\\n   2   3\n    \\   \\ \n     <font color=\"red\">3   1</font>\n</pre>\nMaximum amount of money the thief can rob = <font color=\"red\">3</font> + <font color=\"red\">3</font> + <font color=\"red\">1</font> = <b>7</b>.\n<p></p>\n\n<p><b>Example 2:</b><br>\n</p><pre>     3\n    / \\\n   <font color=\"red\">4</font>   <font color=\"red\">5</font>\n  / \\   \\ \n 1   3   1\n</pre>\nMaximum amount of money the thief can rob = <font color=\"red\">4</font> + <font color=\"red\">5</font> = <b>9</b>.\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">rob</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">[0],</span> result<span style=\"color: #666666\">[1]);</span>\n    <span style=\"color: #666666\">}</span>\n \n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{0,</span> <span style=\"color: #666666\">0};</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n \n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[2];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> left <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> right <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n \n        <span style=\"color: #408080; font-style: italic\">// result[0] is when root is selected, result[1] is when not. </span>\n        result<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> left<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">+</span> right<span style=\"color: #666666\">[1];</span>\n        result<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">[0],</span> left<span style=\"color: #666666\">[1])</span> <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">[0],</span> right<span style=\"color: #666666\">[1]);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 267,
        "NUMBER": 338,
        "TITLE": "Counting Bits",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 ≤ i ≤ num</b> calculate the number of 1's in their binary representation and return them as an array.\n</p>\n<p>\n<b>Example:</b><br>\nFor <code>num = 5</code> you should return <code>[0,1,1,2,1,2]</code>.\n</p>\n<p>\n<b>Follow up:</b>\n</p><ul>\n<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\n<li>Space complexity should be <b>O(n)</b>.</li>\n<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b>  in c++ or in any other language.</li>\n</ul>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">countBits</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>num<span style=\"color: #666666\">+1];</span>\n        <span style=\"color: #408080; font-style: italic\">//p tracks the index for number x</span>\n        <span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> \n        <span style=\"color: #B00040\">int</span> pow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> num<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> pow<span style=\"color: #666666\">){</span>\n                result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                pow <span style=\"color: #666666\">&lt;&lt;=</span> <span style=\"color: #666666\">1;</span>\n                p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">]+1;</span>\n                p<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 268,
        "NUMBER": 341,
        "TITLE": "Flatten Nested List Iterator",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a nested list of integers, implement an iterator to flatten it.</p>\n\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n\n<p><b>Example 1:</b><br>\nGiven the list <code>[[1,1],2,[1,1]]</code>,\n</p><p>\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,1,2,1,1]</code>.\n</p>\n<p></p>\n\n<p><b>Example 2:</b><br>\nGiven the list <code>[1,[4,[6]]]</code>,\n</p><p>\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,4,6]</code>.\n</p>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * // This is the interface that allows for creating nested lists.</span>\n<span style=\"color: #408080; font-style: italic\"> * // You should not implement it, or speculate about its implementation</span>\n<span style=\"color: #408080; font-style: italic\"> * public interface NestedInteger {</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return true if this NestedInteger holds a single integer, rather than a nested list.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public boolean isInteger();</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return the single integer that this NestedInteger holds, if it holds a single integer</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Return null if this NestedInteger holds a nested list</span>\n<span style=\"color: #408080; font-style: italic\"> *     public Integer getInteger();</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return the nested list that this NestedInteger holds, if it holds a nested list</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Return null if this NestedInteger holds a single integer</span>\n<span style=\"color: #408080; font-style: italic\"> *     public List&lt;NestedInteger&gt; getList();</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">NestedIterator</span> <span style=\"color: #008000; font-weight: bold\">implements</span> Iterator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">{</span>\n    List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curItems<span style=\"color: #666666\">;</span>\n    Iterator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> curItor<span style=\"color: #666666\">;</span>\n    <span style=\"color: #B00040\">int</span> curIndex<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">NestedIterator</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>NestedInteger<span style=\"color: #666666\">&gt;</span> nestedList<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        curItems <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>NestedInteger ni <span style=\"color: #666666\">:</span> nestedList<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isInteger</span><span style=\"color: #666666\">())</span>\n                curItems<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getInteger</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                addNestedInteger<span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getList</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        curItor <span style=\"color: #666666\">=</span> curItems<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addNestedInteger</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>NestedInteger<span style=\"color: #666666\">&gt;</span> nestedList<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>NestedInteger ni <span style=\"color: #666666\">:</span> nestedList<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isInteger</span><span style=\"color: #666666\">())</span>\n                curItems<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getInteger</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                addNestedInteger<span style=\"color: #666666\">(</span>ni<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getList</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> Integer <span style=\"color: #0000FF\">next</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curItor<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">hasNext</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curItor<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">hasNext</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your NestedIterator object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * NestedIterator i = new NestedIterator(nestedList);</span>\n<span style=\"color: #408080; font-style: italic\"> * while (i.hasNext()) v[f()] = i.next();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 269,
        "NUMBER": 343,
        "TITLE": "Integer Break",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a positive integer <i>n</i>, break it into the sum of <b>at least</b> two positive integers and maximize the product of those integers. Return the maximum product you can get.\n</p>\n\n<p>\nFor example, given <i>n</i> = 2, return 1 (2 = 1 + 1); given <i>n</i> = 10, return 36 (10 = 3 + 3 + 4).\n</p>\n\n<p>\n<b>Note</b>: You may assume that <i>n</i> is not less than 2 and not larger than 58.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Let dp[i] to be the max production value for breaking the number i.</span>\n    <span style=\"color: #408080; font-style: italic\">// Since dp[i+j] can be i*j, </span>\n    <span style=\"color: #408080; font-style: italic\">//  dp[i+j] = max(max(dp[i], i) * max(dp[j], j)), dp[i+j]).</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">integerBreak</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> i<span style=\"color: #666666\">+1;</span> j<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> j <span style=\"color: #666666\">&gt;</span> n<span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> \n                                Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">],</span>j<span style=\"color: #666666\">),</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 270,
        "NUMBER": 347,
        "TITLE": "Top K Frequent Elements",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a non-empty array of integers, return the <b><i>k</i></b> most frequent elements.</p>\n\n    <p>For example,<br>\n        Given <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.\n    </p>\n\n    <p><b>Note: </b><br>\n    </p><ul>\n    <li>You may assume <i>k</i> is always valid, 1 ≤ <i>k</i> ≤ number of unique elements.</li>\n    <li>Your algorithm's time complexity <b>must be</b> better than O(<i>n</i> log <i>n</i>), where <i>n</i> is the array's size.</li>\n</ul><p></p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">topKFrequent</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// map to store element and its freqency</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> elemMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            elemMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> elemMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// MaxHeap to get most frequent element</span>\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> pq <span style=\"color: #666666\">=</span>\n                <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;(</span>elemMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">(),</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;(){</span>\n\n                    <span style=\"color: #AA22FF\">@Override</span>\n                    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> elem1<span style=\"color: #666666\">,</span>\n                                       Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> elem2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #008000; font-weight: bold\">return</span> elem2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> elem1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">();</span>\n                    <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #666666\">});</span>\n\n        pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>elemMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">entrySet</span><span style=\"color: #666666\">());</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">// Get elements</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> k <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">getKey</span><span style=\"color: #666666\">());</span>\n            k<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 20",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 271,
        "NUMBER": 355,
        "TITLE": "Design Twitter",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:</p>\n\n<p>\n</p><ol>\n<li><b>postTweet(userId, tweetId)</b>: Compose a new tweet.</li>\n<li><b>getNewsFeed(userId)</b>: Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>\n<li><b>follow(followerId, followeeId)</b>: Follower follows a followee.</li>\n<li><b>unfollow(followerId, followeeId)</b>: Follower unfollows a followee.</li>\n</ol>\n<p></p>\n\n<p><b>Example:</b>\n</p><pre>Twitter twitter = new Twitter();\n\n// User 1 posts a new tweet (id = 5).\ntwitter.postTweet(1, 5);\n\n// User 1's news feed should return a list with 1 tweet id -&gt; [5].\ntwitter.getNewsFeed(1);\n\n// User 1 follows user 2.\ntwitter.follow(1, 2);\n\n// User 2 posts a new tweet (id = 6).\ntwitter.postTweet(2, 6);\n\n// User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5].\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.getNewsFeed(1);\n\n// User 1 unfollows user 2.\ntwitter.unfollow(1, 2);\n\n// User 1's news feed should return a list with 1 tweet id -&gt; [5],\n// since user 1 is no longer following user 2.\ntwitter.getNewsFeed(1);\n</pre>\n<p></p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Twitter</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Tweet</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> time<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> tweetId<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Tweet</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> tweetId<span style=\"color: #666666\">,</span><span style=\"color: #B00040\">int</span> time<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">time</span> <span style=\"color: #666666\">=</span> time<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">tweetId</span> <span style=\"color: #666666\">=</span> tweetId<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #B00040\">int</span> timeStamp <span style=\"color: #666666\">;</span>\n    <span style=\"color: #408080; font-style: italic\">// Each person&#39;s tweets</span>\n    Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span>List<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;&gt;</span> timelines<span style=\"color: #666666\">;</span>\n    <span style=\"color: #408080; font-style: italic\">// People&#39;s relationship</span>\n    Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span>HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> relations<span style=\"color: #666666\">;</span>\n    <span style=\"color: #408080; font-style: italic\">/** Initialize your data structure here. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Twitter</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">timelines</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">relations</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Compose a new tweet. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">postTweet</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> userId<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> tweetId<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>timelines<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>userId<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">){</span>\n            timelines<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>userId<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;());</span>\n        <span style=\"color: #666666\">}</span>\n        timelines<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>userId<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Tweet<span style=\"color: #666666\">(</span>tweetId<span style=\"color: #666666\">,</span>timeStamp<span style=\"color: #666666\">++));</span>\n\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Retrieve the 10 most recent tweet ids in the user&#39;s news feed. </span>\n<span style=\"color: #408080; font-style: italic\">        Each item in the news feed must be posted by users who the user followed or </span>\n<span style=\"color: #408080; font-style: italic\">        by the user herself. Tweets must be ordered from most recent to least recent. </span>\n<span style=\"color: #408080; font-style: italic\">    ***/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">getNewsFeed</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> userId<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> followees <span style=\"color: #666666\">=</span> relations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>userId<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;</span> candidates <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">// Choose each person&#39;s top 10 tweets</span>\n         List<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;</span> timeline <span style=\"color: #666666\">=</span> timelines<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>userId<span style=\"color: #666666\">);</span>\n         <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>timeline<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n             <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1;</span>i<span style=\"color: #666666\">&gt;=</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(0,</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-10);</span>i<span style=\"color: #666666\">--){</span>\n                    candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n                <span style=\"color: #666666\">}</span>\n         <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>followees <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span> \n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Integer followee<span style=\"color: #666666\">:</span>followees<span style=\"color: #666666\">){</span>\n                 timeline <span style=\"color: #666666\">=</span> timelines<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>followee<span style=\"color: #666666\">);</span>\n                 <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>timeline <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                 <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1;</span>i<span style=\"color: #666666\">&gt;=</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(0,</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-10);</span>i<span style=\"color: #666666\">--){</span>\n                    candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>timeline<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        Collections<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span><span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Tweet<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">(){</span>\n             <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Tweet o1<span style=\"color: #666666\">,</span> Tweet o2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                 <span style=\"color: #008000; font-weight: bold\">return</span> o2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">time</span> <span style=\"color: #666666\">-</span> o1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">time</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">});</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span>i<span style=\"color: #666666\">&lt;</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(10,</span>candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">());</span>i<span style=\"color: #666666\">++){</span>\n            list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">tweetId</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Follower follows a followee. If the operation is invalid, it should be a no-op. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">follow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> followerId<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> followeeId<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>followerId <span style=\"color: #666666\">==</span> followeeId<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>relations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>followerId<span style=\"color: #666666\">)==</span><span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">){</span>\n            relations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>followerId<span style=\"color: #666666\">,</span><span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;());</span>\n        <span style=\"color: #666666\">}</span>\n        relations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>followerId<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>followeeId<span style=\"color: #666666\">);</span>\n\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">unfollow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> followerId<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> followeeId<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> relations<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>followerId<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>list <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">;</span>\n        list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>followeeId<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Twitter object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Twitter obj = new Twitter();</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.postTweet(userId,tweetId);</span>\n<span style=\"color: #408080; font-style: italic\"> * List&lt;Integer&gt; param_2 = obj.getNewsFeed(userId);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.follow(followerId,followeeId);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.unfollow(followerId,followeeId);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 10, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 272,
        "NUMBER": 357,
        "TITLE": "Count Numbers with Unique Digits",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a <b>non-negative</b> integer n, count all numbers with unique digits, x, where 0 ≤ x &lt; 10<sup>n</sup>.</p>\n\n<p>\n    <b>Example:</b><br>\nGiven n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x &lt; 100, excluding <code>[11,22,33,44,55,66,77,88,99]</code>)\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countNumbersWithUniqueDigits</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        n <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,10);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1];</span>\n        dp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>i<span style=\"color: #666666\">&lt;=</span>n<span style=\"color: #666666\">;</span>i<span style=\"color: #666666\">++){</span>\n            dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">9;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">9;</span> x <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">9</span> <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2;</span>x<span style=\"color: #666666\">--){</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*=</span> x<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>i<span style=\"color: #666666\">&lt;</span>dp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>i<span style=\"color: #666666\">++)</span> ans <span style=\"color: #666666\">+=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 8, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 273,
        "NUMBER": 365,
        "TITLE": "Water and Jug Problem",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>You are given two jugs with capacities <i>x</i> and <i>y</i> litres. There is an infinite amount of water supply available.\nYou need to determine whether it is possible to measure exactly <i>z</i> litres using these two jugs.</p>\n\n<p>If <i>z</i> liters of water is measurable, you must have <i>z</i> liters of water contained within <b>one or both buckets</b> by the end.</p>\n\n<p>\nOperations allowed:\n</p><ul>\n<li>Fill any of the jugs completely with water.</li>\n<li>Empty any of the jugs.</li>\n<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\n</ul>\n<p></p>\n\n<p><b>Example 1:</b> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\" target=\"_blank\"><i>\"Die Hard\"</i> example</a>)\n</p><pre>Input: x = 3, y = 5, z = 4\nOutput: True\n</pre>\n<p></p>\n\n<p><b>Example 2:</b>\n</p><pre>Input: x = 2, y = 6, z = 5\nOutput: False\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// We can always find a and b to satisfy ax + bx = d where d = gcd(x, y)</span>\n    <span style=\"color: #408080; font-style: italic\">// So, everything is clear, if z % d == 0, </span>\n    <span style=\"color: #408080; font-style: italic\">// then we have (a*z/d)*x + (b*z/d)*y = z, which means m and n exist.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canMeasureWater</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> z<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> z <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">)</span>x <span style=\"color: #666666\">+</span> y <span style=\"color: #666666\">&gt;=</span> z <span style=\"color: #666666\">&amp;&amp;</span> z <span style=\"color: #666666\">%</span> gcd<span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">gcd</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> y <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> x <span style=\"color: #666666\">:</span> gcd<span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">%</span> y<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 274,
        "NUMBER": 368,
        "TITLE": "Largest Divisible Subset",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a set of <b>distinct</b> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies: S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.\n</p>\n\n<p>If there are multiple solutions, return any subset is fine.\n</p>\n\n<p><b>Example 1:</b>\n</p><pre>nums: [1,2,3]\n\nResult: [1,2] (of course, [1,3] will also be ok)\n</pre>\n<p></p>\n\n<p><b>Example 2:</b>\n</p><pre>nums: [1,2,4,8]\n\nResult: [1,2,4,8]\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">largestDivisibleSubset</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">||</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">==0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n \n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> t <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-1);</span>\n \n        <span style=\"color: #408080; font-style: italic\">// Record the largest element of it.</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">// index of the largest element in dp.</span>\n        <span style=\"color: #B00040\">int</span> maxIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">-1;</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">%</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> t<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]){</span>\n                    t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    index<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> j<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>max <span style=\"color: #666666\">&lt;</span> t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]){</span>\n                max <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                maxIndex <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Do a loop from the largest element to nums[0], </span>\n        <span style=\"color: #408080; font-style: italic\">// add every element belongs to the longest subset.</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> maxIndex<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0){</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            i <span style=\"color: #666666\">=</span> index<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 275,
        "NUMBER": 372,
        "TITLE": "Super Pow",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nYour task is to calculate <i>a</i><sup><i>b</i></sup> mod 1337 where <i>a</i> is a positive integer and <i>b</i> is an extremely large positive integer given in the form of an array.\n</p>\n\n<p><b>Example1:</b>\n</p><pre>a = 2\nb = [3]\n\nResult: 8\n</pre>\n<p></p>\n\n<p><b>Example2:</b>\n</p><pre>a = 2\nb = [1,0]\n\nResult: 1024\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * The main idea is cashed on the repeated pattern of the remainder of a^b.</span>\n<span style=\"color: #408080; font-style: italic\">        As long as we know the length of the pattern m, </span>\n<span style=\"color: #408080; font-style: italic\">        we just have to find an index point of this pattern based on b mod m.</span>\n<span style=\"color: #408080; font-style: italic\">        In addition, if a &gt; 1337, we can let a = a mod 1337.</span>\n<span style=\"color: #408080; font-style: italic\">        Because if we let a = (1337x + c) where c = a mod 1337,</span>\n<span style=\"color: #408080; font-style: italic\">        (1337x + c)(1337x + c)(1337x + c)...(1337x + c) mod 1337 == ccc...c mod 1337.</span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #B00040\">int</span> DIV <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1337;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">superPow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">==0</span> <span style=\"color: #666666\">||</span> a<span style=\"color: #666666\">==</span>DIV <span style=\"color: #666666\">||</span> b<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">==1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>a <span style=\"color: #666666\">&gt;</span> DIV<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> superPow<span style=\"color: #666666\">(</span> a <span style=\"color: #666666\">%</span> DIV<span style=\"color: #666666\">,</span> b<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> index <span style=\"color: #666666\">=</span> findLoop<span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> loopsize <span style=\"color: #666666\">=</span> index<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> rem <span style=\"color: #666666\">=</span> modBy<span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">,</span> loopsize<span style=\"color: #666666\">);</span>\n        rem <span style=\"color: #666666\">=</span> rem <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> loopsize<span style=\"color: #666666\">:</span> rem<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> index<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>rem<span style=\"color: #666666\">-1);</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findLoop</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a<span style=\"color: #666666\">){</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> index <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>DIV<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> rem <span style=\"color: #666666\">=</span> a <span style=\"color: #666666\">%</span> DIV<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">[</span>rem<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            set<span style=\"color: #666666\">[</span>rem<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            index<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>rem<span style=\"color: #666666\">);</span>\n            rem <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>rem<span style=\"color: #666666\">*</span>a<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> DIV<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> index<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">modBy</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> b<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> rem <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i <span style=\"color: #666666\">&lt;</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            rem <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>rem<span style=\"color: #666666\">*10+</span>b<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">%</span> m<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> rem<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 276,
        "NUMBER": 373,
        "TITLE": "Find K Pairs with Smallest Sums",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nYou are given two integer arrays <b>nums1</b> and <b>nums2</b> sorted in ascending order and an integer <b>k</b>. \n</p>\n\n<p>Define a pair <b>(u,v)</b> which consists of one element from the first array and one element from the second array.</p>\n\n<p>Find the k pairs <b>(u<sub>1</sub>,v<sub>1</sub>),(u<sub>2</sub>,v<sub>2</sub>) ...(u<sub>k</sub>,v<sub>k</sub>)</b> with the smallest sums.\n</p>\n\n<p><b>Example 1:</b><br>\n</p><pre>Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3\n\nReturn: [1,2],[1,4],[1,6]\n\nThe first 3 pairs are returned from the sequence:\n[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n<p></p>\n\n<p><b>Example 2:</b><br>\n</p><pre>Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2\n\nReturn: [1,1],[1,1]\n\nThe first 2 pairs are returned from the sequence:\n[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n<p></p>\n\n<p><b>Example 3:</b><br>\n</p><pre>Given nums1 = [1,2], nums2 = [3],  k = 3 \n\nReturn: [1,3],[2,3]\n\nAll possible pairs are returned from the sequence:\n[1,3],[2,3]\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> <span style=\"color: #0000FF\">kSmallestPairs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Queue<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> minHeap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;(</span>k<span style=\"color: #666666\">,</span> pairComparator<span style=\"color: #666666\">);</span>\n        \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n                minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]});</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        \n        List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    \n    Comparator<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> pairComparator <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;(){</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> pair1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> pair2<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> pair1<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> pair1<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> pair2<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> pair2<span style=\"color: #666666\">[1];</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">};</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 277,
        "NUMBER": 375,
        "TITLE": "Guess Number Higher or Lower II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>We are playing the Guess Game. The game is as follows:</p><p> \n\n</p><p>I pick a number from <strong>1</strong> to <strong>n</strong>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I'll tell you whether the number I picked is higher or lower. </p>\n\n<p>However, when you guess a particular number x,  and you guess wrong, you pay <b>$x</b>. You win the game when you guess the number I picked.</p>\n\n<p>\n<b>Example:</b>\n</p><pre>n = 10, I pick 8.\n\nFirst round:  You guess 5, I tell you that it's higher. You pay $5.\nSecond round: You guess 7, I tell you that it's higher. You pay $7.\nThird round:  You guess 9, I tell you that it's lower. You pay $9.\n\nGame over. 8 is the number I picked.\n\nYou end up paying $5 + $7 + $9 = $21.\n</pre>\n<p></p>\n\n<p>Given a particular <strong>n ≥ 1</strong>, find out how much money you need to have to guarantee a <b>win</b>.</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Definition of dp[i][j]: minimum number of money to guarantee win for subproblem [i, j].</span>\n<span style=\"color: #408080; font-style: italic\">        Target: dp[1][n]</span>\n<span style=\"color: #408080; font-style: italic\">        Corner case: dp[i][i] = 0 (because the only element must be correct)</span>\n<span style=\"color: #408080; font-style: italic\">        Equation: we can choose k (i&lt;=k&lt;=j) as our guess, and pay price k. </span>\n<span style=\"color: #408080; font-style: italic\">        After our guess, the problem is divided into two subproblems. </span>\n<span style=\"color: #408080; font-style: italic\">        Notice we do not need to pay the money for both subproblems. </span>\n<span style=\"color: #408080; font-style: italic\">        We only need to pay the worst case </span>\n<span style=\"color: #408080; font-style: italic\">        (because the system will tell us which side we should go) to guarantee win. </span>\n<span style=\"color: #408080; font-style: italic\">        So dp[i][j] = min (i&lt;=k&lt;=j) { k + max(dp[i][k-1], dp[k+1][j]) }</span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getMoneyAmount</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> jminusi <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> jminusi <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> jminusi<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">+</span> jminusi <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> jminusi<span style=\"color: #666666\">;</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> k <span style=\"color: #666666\">&lt;=</span> j<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">],</span>\n                                        k <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> i <span style=\"color: #666666\">?</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0,</span>\n                                                     j <span style=\"color: #666666\">&gt;=</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">?</span> dp<span style=\"color: #666666\">[</span>k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0));</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[1][</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 31",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 278,
        "NUMBER": 376,
        "TITLE": "Wiggle Subsequence",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A sequence of numbers is called a <strong>wiggle sequence</strong> if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence. </p>\n\n    <p>For example, <code>[1,7,4,9,2,5]</code> is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, <code>[1,4,7,2,5]</code> and <code>[1,7,4,5,5]</code> are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>\n\n    <p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>\n\n    <p><b>Examples:</b><br>\n    </p><pre><b>Input:</b> [1,7,4,9,2,5]\n<b>Output:</b> 6\nThe entire sequence is a wiggle sequence.\n\n<b>Input:</b> [1,17,5,10,13,15,10,5,16,8]\n<b>Output:</b> 7\nThere are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].\n\n<b>Input:</b> [1,2,3,4,5,6,7,8,9]\n<b>Output:</b> 2\n</pre>\n    <p></p>\n\n    <p><b>Follow up:</b><br>\n        Can you do it in O(<i>n</i>) time?\n    </p>\n\n    <p><b>Credits:</b><br>Special thanks to <a href=\"https://leetcode.com/agave/\">@agave</a> and <a href=\"https://leetcode.com/stefanpochmann/\">@StefanPochmann</a> for adding this problem and creating all test cases.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * 1.   If nums[i] &gt; nums[i-1], that means it wiggles up.</span>\n<span style=\"color: #408080; font-style: italic\">     * The element before it must be a down position.</span>\n<span style=\"color: #408080; font-style: italic\">     *  So up[i] = down[i-1] + 1 and down[i] = down[i-1].</span>\n<span style=\"color: #408080; font-style: italic\">     * 2.   If nums[i] &lt; nums[i-1], that means it wiggles down.</span>\n<span style=\"color: #408080; font-style: italic\">     * The element before it must be a up position.</span>\n<span style=\"color: #408080; font-style: italic\">     *  So down[i] = up[i-1] + 1, up[i] = up[i-1].</span>\n<span style=\"color: #408080; font-style: italic\">     * 3.   If nums[i] == nums[i-1], that means it will not</span>\n<span style=\"color: #408080; font-style: italic\">     *  change anything becaue it didn&#39;t wiggle at all.</span>\n<span style=\"color: #408080; font-style: italic\">     *  So both down[i] = down[i-1] and up[i] = up[i−1].</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * At the end, we can find the larger out of up[length-1]up[length−1] and down[length-1]down[length−1] to find the max. wiggle subsequence length, where lengthlength refers to the number of elements in the given array.</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">wiggleMaxLength</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> up <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> down <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        up<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> down<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                up<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> down<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                down<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> down<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                down<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> up<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                up<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> up<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                down<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> down<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n                up<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> up<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>down<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> up<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 279,
        "NUMBER": 377,
        "TITLE": "Combination Sum IV",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n\n    <p><b>Example:</b>\n    </p><pre><i><b>nums</b></i> = [1, 2, 3]\n<i><b>target</b></i> = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is <i><b>7</b></i>.\n</pre>\n    <p></p>\n\n    <p><b>Follow up:</b><br>\n        What if negative numbers are allowed in the given array?<br>\n        How does it change the problem?<br>\n        What limitation we need to add to the question to allow negative numbers? </p>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(n*target)</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(n)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * Similar to Coin change</span>\n<span style=\"color: #408080; font-style: italic\">     * dp[curNumber] = Sum(dp[reached target])</span>\n<span style=\"color: #408080; font-style: italic\">     * if reached target + curNum &lt; target</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * @param nums</span>\n<span style=\"color: #408080; font-style: italic\">     * @param target</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">combinationSum4</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>target <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        dp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> target<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> num <span style=\"color: #666666\">&lt;=</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> num<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>target<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 280,
        "NUMBER": 378,
        "TITLE": "Kth Smallest Element in a Sorted Matrix",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <i>n</i> x <i>n</i> matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\n\n    <p>\n        Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre>matrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n</pre>\n    <p></p>\n\n    <p><b>Note: </b><br>\n        You may assume k is always valid, 1 ≤ k ≤ n<sup>2</sup>.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Tuple</span> <span style=\"color: #008000; font-weight: bold\">implements</span> Comparable<span style=\"color: #666666\">&lt;</span>Tuple<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">{</span>\n\t\t<span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">,</span> val<span style=\"color: #666666\">;</span>\n\n\t\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Tuple</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">=</span> y<span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> val<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\n\t\t<span style=\"color: #AA22FF\">@Override</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compareTo</span><span style=\"color: #666666\">(</span>Tuple that<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">-</span> that<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t<span style=\"color: #666666\">}</span>\n\n\t<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">kthSmallest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\t    <span style=\"color: #B00040\">int</span> rows <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #B00040\">int</span> cols <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\t\tPriorityQueue<span style=\"color: #666666\">&lt;</span>Tuple<span style=\"color: #666666\">&gt;</span> pq <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;();</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> cols<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span>\n\t\t\tpq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Tuple<span style=\"color: #666666\">(0,</span> j<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]));</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n\t\t\tTuple t <span style=\"color: #666666\">=</span> pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">==</span> rows <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span>\n\t\t\t\t<span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n\t\t\tpq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Tuple<span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span><span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span><span style=\"color: #666666\">]));</span>\n\t\t<span style=\"color: #666666\">}</span>\n\t\t<span style=\"color: #008000; font-weight: bold\">return</span> pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n\t<span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 281,
        "NUMBER": 380,
        "TITLE": "Insert Delete GetRandom O(1)",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\n\n    <p>\n    </p><ol>\n    <li><code>insert(val)</code>: Inserts an item val to the set if not already present.</li>\n    <li><code>remove(val)</code>: Removes an item val from the set if present.</li>\n    <li><code>getRandom</code>: Returns a random element from current set of elements. Each element must have the <b>same probability</b> of being returned.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example:</b>\n    </p><pre>// Init an empty set.\nRandomizedSet randomSet = new RandomizedSet();\n\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomSet.insert(1);\n\n// Returns false as 2 does not exist in the set.\nrandomSet.remove(2);\n\n// Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomSet.insert(2);\n\n// getRandom should return either 1 or 2 randomly.\nrandomSet.getRandom();\n\n// Removes 1 from the set, returns true. Set now contains [2].\nrandomSet.remove(1);\n\n// 2 was already in the set, so return false.\nrandomSet.insert(2);\n\n// Since 2 is the only number in the set, getRandom always return 2.\nrandomSet.getRandom();\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">RandomizedSet</span> <span style=\"color: #666666\">{</span>\n\n    ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">;</span>\n    HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> locs<span style=\"color: #666666\">;</span>\n    java<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">util</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Random</span> rand <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> java<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">util</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Random</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #408080; font-style: italic\">/** Initialize your data structure here. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">RandomizedSet</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        nums <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        locs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">insert</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span> contain <span style=\"color: #666666\">=</span> locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span> contain <span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span> val<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">());</span>\n        nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Removes a value from the set. Returns true if the set contained the specified element. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">remove</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span> contain <span style=\"color: #666666\">=</span> locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span> <span style=\"color: #666666\">!</span> contain <span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> loc <span style=\"color: #666666\">=</span> locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>loc <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// not the last one than swap the last one with this val</span>\n            <span style=\"color: #B00040\">int</span> lastone <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">);</span>\n            nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">set</span><span style=\"color: #666666\">(</span> loc <span style=\"color: #666666\">,</span> lastone <span style=\"color: #666666\">);</span>\n            locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>lastone<span style=\"color: #666666\">,</span> loc<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        locs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Get a random element from the set. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRandom</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span> rand<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your RandomizedSet object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * RandomizedSet obj = new RandomizedSet();</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_1 = obj.insert(val);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_2 = obj.remove(val);</span>\n<span style=\"color: #408080; font-style: italic\"> * int param_3 = obj.getRandom();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1, 10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 282,
        "NUMBER": 381,
        "TITLE": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\n    <b>Note: Duplicate elements are allowed.</b>\n    <p>\n    </p><ol>\n    <li><code>insert(val)</code>: Inserts an item val to the collection.</li>\n    <li><code>remove(val)</code>: Removes an item val from the collection if present.</li>\n    <li><code>getRandom</code>: Returns a random element from current collection of elements. The probability of each element being returned is <b>linearly related</b> to the number of same value the collection contains.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example:</b>\n    </p><pre>// Init an empty collection.\nRandomizedCollection collection = new RandomizedCollection();\n\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\ncollection.insert(1);\n\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\ncollection.insert(1);\n\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\ncollection.insert(2);\n\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\ncollection.getRandom();\n\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\ncollection.remove(1);\n\n// getRandom should return 1 and 2 both equally likely.\ncollection.getRandom();\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">RandomizedCollection</span> <span style=\"color: #666666\">{</span>\n\n    ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> result<span style=\"color: #666666\">;</span>\n    HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> map<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">RandomizedCollection</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">insert</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Add item to map if it doesn&#39;t already exist.</span>\n        <span style=\"color: #B00040\">boolean</span> alreadyExists <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>alreadyExists<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;());</span>\n        <span style=\"color: #666666\">}</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">());</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">!</span>alreadyExists<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">remove</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Get arbitary index of the ArrayList that contains val</span>\n        LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> valSet <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> indexToReplace <span style=\"color: #666666\">=</span> valSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Obtain the set of the number in the last place of the ArrayList</span>\n        <span style=\"color: #B00040\">int</span> numAtLastPlace <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> replaceWith <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>numAtLastPlace<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Replace val at arbitary index with very last number</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">set</span><span style=\"color: #666666\">(</span>indexToReplace<span style=\"color: #666666\">,</span> numAtLastPlace<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Remove appropriate index</span>\n        valSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>indexToReplace<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Don&#39;t change set if we were replacing the removed item with the same number</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>indexToReplace <span style=\"color: #666666\">!=</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            replaceWith<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            replaceWith<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>indexToReplace<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Remove map entry if set is now empty, then return</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>valSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Get a random element from the collection. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRandom</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Get linearly random item</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">((</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">*</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your RandomizedCollection object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * RandomizedCollection obj = new RandomizedCollection();</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_1 = obj.insert(val);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_2 = obj.remove(val);</span>\n<span style=\"color: #408080; font-style: italic\"> * int param_3 = obj.getRandom();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1, 10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 283,
        "NUMBER": 382,
        "TITLE": "Linked List Random Node",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p>\n\n    <p><b>Follow up:</b><br>\n        What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre>// Init a singly linked list [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nsolution.getRandom();\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    ListNode head<span style=\"color: #666666\">;</span>\n    Random random<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** @param head The linked list&#39;s head.</span>\n<span style=\"color: #408080; font-style: italic\">        Note that the head is guaranteed to be not null, so it contains at least one node. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Solution</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">head</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">random</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Random<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns a random node&#39;s value. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRandom</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        ListNode c <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> r <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=1;</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            c <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// Reservoir Sampling</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>random<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">)</span>\n                r <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> r<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Solution object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Solution obj = new Solution(head);</span>\n<span style=\"color: #408080; font-style: italic\"> * int param_1 = obj.getRandom();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "33",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 284,
        "NUMBER": 384,
        "TITLE": "Shuffle an Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Shuffle a set of numbers without duplicates.\n</p>\n\n    <p><b>Example:</b>\n    </p><pre>// Init an array with set 1, 2, and 3.\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.\nsolution.shuffle();\n\n// Resets the array back to its original configuration [1,2,3].\nsolution.reset();\n\n// Returns the random shuffling of array [1,2,3].\nsolution.shuffle();\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Random random<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Solution</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nums</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">;</span>\n        random <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Random<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Resets the array to its original configuration and return it. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">reset</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns a random shuffling of the array. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">shuffle</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clone</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> random<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            swap<span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> t <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        a<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        a<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Solution object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Solution obj = new Solution(nums);</span>\n<span style=\"color: #408080; font-style: italic\"> * int[] param_1 = obj.reset();</span>\n<span style=\"color: #408080; font-style: italic\"> * int[] param_2 = obj.shuffle();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 33",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 285,
        "NUMBER": 385,
        "TITLE": "Mini Parser",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p>\n\n    <p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n\n    <p><b>Note:</b>\n        You may assume that the string is well-formed:\n    </p><ul>\n    <li>String is non-empty.</li>\n    <li>String does not contain white spaces.</li>\n    <li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\n</ul>\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre>Given s = \"324\",\n\nYou should return a NestedInteger object which contains a single integer 324.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>Given s = \"[123,[456,[789]]]\",\n\nReturn a NestedInteger object containing a nested list with 2 elements:\n\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * // This is the interface that allows for creating nested lists.</span>\n<span style=\"color: #408080; font-style: italic\"> * // You should not implement it, or speculate about its implementation</span>\n<span style=\"color: #408080; font-style: italic\"> * public interface NestedInteger {</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Constructor initializes an empty nested list.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public NestedInteger();</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Constructor initializes a single integer.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public NestedInteger(int value);</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return true if this NestedInteger holds a single integer, rather than a nested list.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public boolean isInteger();</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return the single integer that this NestedInteger holds, if it holds a single integer</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Return null if this NestedInteger holds a nested list</span>\n<span style=\"color: #408080; font-style: italic\"> *     public Integer getInteger();</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Set this NestedInteger to hold a single integer.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public void setInteger(int value);</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.</span>\n<span style=\"color: #408080; font-style: italic\"> *     public void add(NestedInteger ni);</span>\n<span style=\"color: #408080; font-style: italic\"> *</span>\n<span style=\"color: #408080; font-style: italic\"> *     // @return the nested list that this NestedInteger holds, if it holds a nested list</span>\n<span style=\"color: #408080; font-style: italic\"> *     // Return null if this NestedInteger holds a single integer</span>\n<span style=\"color: #408080; font-style: italic\"> *     public List&lt;NestedInteger&gt; getList();</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     1. If encounters &#39;[&#39;, push current NestedInteger to stack and start a new one.</span>\n<span style=\"color: #408080; font-style: italic\">     2. If encounters &#39;]&#39;, end current NestedInteger and</span>\n<span style=\"color: #408080; font-style: italic\">     pop a NestedInteger from stack to continue.</span>\n<span style=\"color: #408080; font-style: italic\">     3. If encounters &#39;,&#39;, append a new number to curr NestedInteger,</span>\n<span style=\"color: #408080; font-style: italic\">     if this comma is not right after a brackets.</span>\n<span style=\"color: #408080; font-style: italic\">     4. Update index l and r, where l shall point to the start of a integer substring,</span>\n<span style=\"color: #408080; font-style: italic\">     while r shall points to the end+1 of substring.</span>\n<span style=\"color: #408080; font-style: italic\">     ***/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> NestedInteger <span style=\"color: #0000FF\">deserialize</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;[&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #408080; font-style: italic\">// ERROR: special case</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> NestedInteger<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">));</span>\n\n        Stack<span style=\"color: #666666\">&lt;</span>NestedInteger<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        NestedInteger curr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// l shall point to the start of a number substring;</span>\n        <span style=\"color: #408080; font-style: italic\">// r shall point to the end+1 of a number substring</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> r <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> r <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> r<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span> ch <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>r<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;[&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curr <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                curr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> NestedInteger<span style=\"color: #666666\">();</span>\n                l <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;]&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                String num <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">,</span> r<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n                    curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> NestedInteger<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)));</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                    NestedInteger pop <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                    pop<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">);</span>\n                    curr <span style=\"color: #666666\">=</span> pop<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                l <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;,&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>r<span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;]&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    String num <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">,</span> r<span style=\"color: #666666\">);</span>\n                    curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> NestedInteger<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)));</span>\n                <span style=\"color: #666666\">}</span>\n                l <span style=\"color: #666666\">=</span> r<span style=\"color: #666666\">+1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curr<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 286,
        "NUMBER": 386,
        "TITLE": "Lexicographical Numbers",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.\n</p>\n\n    <p>\n        For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].\n    </p>\n\n    <p>\n        Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     The basic idea is to find the next number to add.</span>\n<span style=\"color: #408080; font-style: italic\">     Take 45 for example: if the current number is 45,</span>\n<span style=\"color: #408080; font-style: italic\">     the next one will be 450 (450 == 45 * 10)(if 450 &lt;= n),</span>\n<span style=\"color: #408080; font-style: italic\">     or 46 (46 == 45 + 1) (if 46 &lt;= n) or 5 (5 == 45 / 10 + 1)</span>\n<span style=\"color: #408080; font-style: italic\">     (5 is less than 45 so it is for sure less than n).</span>\n<span style=\"color: #408080; font-style: italic\">     We should also consider n = 600, and the current number = 499,</span>\n<span style=\"color: #408080; font-style: italic\">     the next number is 5 because there are all &quot;9&quot;s after &quot;4&quot; in &quot;499&quot;</span>\n<span style=\"color: #408080; font-style: italic\">     so we should divide 499 by 10 until the last digit is not &quot;9&quot;.</span>\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">lexicalOrder</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> curr <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curr <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                curr <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curr <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">9</span> <span style=\"color: #666666\">&amp;&amp;</span> curr <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                curr<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">((</span>curr <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10)</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">9)</span> <span style=\"color: #666666\">{</span>\n                    curr <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">10;</span>\n                <span style=\"color: #666666\">}</span>\n                curr <span style=\"color: #666666\">=</span> curr <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 287,
        "NUMBER": 388,
        "TITLE": "Longest Absolute File Path",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Suppose we abstract our file system by a string in the following manner:</p>\n\n    <p>The string <code>\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"</code> represents:</p>\n\n    <pre>dir\n    subdir1\n    subdir2\n        file.ext\n</pre>\n\n    <p>The directory <code>dir</code> contains an empty sub-directory <code>subdir1</code> and a sub-directory <code>subdir2</code> containing a file <code>file.ext</code>.</p>\n\n    <p>The string <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code> represents:</p>\n\n    <pre>dir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n</pre>\n\n    <p>The directory <code>dir</code> contains two sub-directories <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and an empty second-level sub-directory <code>subsubdir1</code>. <code>subdir2</code> contains a second-level sub-directory <code>subsubdir2</code> containing a file <code>file2.ext</code>.</p>\n\n    <p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is <code>\"dir/subdir2/subsubdir2/file2.ext\"</code>, and its length is <code>32</code> (not including the double quotes).</p>\n\n    <p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return <code>0</code>.</p>\n\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>The name of a file contains at least a <code>.</code> and an extension.</li>\n    <li>The name of a directory or sub-directory will not contain a <code>.</code>.</li>\n</ul>\n    <p></p>\n\n    <p>Time complexity required: <code>O(n)</code> where <code>n</code> is the size of the input string.</p>\n\n    <p>Notice that <code>a/aa/aaa/file1.txt</code> is not the longest file path, if there is another path <code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">lengthLongestPath</span><span style=\"color: #666666\">(</span>String input<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">-1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Deque<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n        stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(0);</span> <span style=\"color: #408080; font-style: italic\">// &quot;dummy&quot; length</span>\n        <span style=\"color: #B00040\">int</span> maxLen <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">:</span>input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\n&quot;</span><span style=\"color: #666666\">)){</span>\n            <span style=\"color: #408080; font-style: italic\">// number of &quot;\\t&quot;</span>\n            <span style=\"color: #B00040\">int</span> lev <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">lastIndexOf</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\t&quot;</span><span style=\"color: #666666\">)+1;</span>\n            <span style=\"color: #408080; font-style: italic\">// find parent</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>lev<span style=\"color: #666666\">+1&lt;</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #408080; font-style: italic\">// remove &quot;/t&quot;, add&quot;/&quot;</span>\n            <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()+</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()-</span>lev<span style=\"color: #666666\">+1;</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// check if it is file</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">))</span>\n                maxLen <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxLen<span style=\"color: #666666\">,</span> len<span style=\"color: #666666\">-1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxLen<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 288,
        "NUMBER": 390,
        "TITLE": "Elimination Game",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There is a list of sorted integers from 1 to <i>n</i>. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>\n\n    <p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p>\n\n    <p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>\n\n    <p>Find the last number that remains starting with a list of length <i>n</i>.</p>\n\n    <p><b>Example:</b>\n    </p><pre>Input:\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\nOutput:\n6\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">lastRemaining</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> remaining <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> step <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> head <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>remaining <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">||</span> remaining <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==1)</span> <span style=\"color: #666666\">{</span>\n                head <span style=\"color: #666666\">=</span> head <span style=\"color: #666666\">+</span> step<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            remaining <span style=\"color: #666666\">=</span> remaining <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            step <span style=\"color: #666666\">=</span> step <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">2;</span>\n            left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">!</span>left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 289,
        "NUMBER": 392,
        "TITLE": "Is Subsequence",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string <b>s</b> and a string <b>t</b>, check if <b>s</b> is subsequence of <b>t</b>.\n</p>\n\n    <p>\n        You may assume that there is only lower case English letters in both <b>s</b> and <b>t</b>. <b>t</b> is potentially a very long (length ~= 500,000) string, and <b>s</b> is a short string (&lt;=100).\n    </p>\n\n    <p>\n        A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).\n    </p>\n\n    <p><b>Example 1:</b><br>\n        <b>s</b> = <code>\"abc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\n    </p>\n    <p>\n        Return <code>true</code>.\n    </p>\n\n    <p><b>Example 2:</b><br>\n        <b>s</b> = <code>\"axc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\n    </p>\n    <p>\n        Return <code>false</code>.\n    </p>\n\n    <p><b>Follow up:</b><br>\n        If there are lots of incoming S, say S1, S2, ... , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p>\n\n    <p><b>Credits:</b><br>Special thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Same as fast and slow pointers.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isSubsequence</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> indexS <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> indexT <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>indexT <span style=\"color: #666666\">&lt;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>indexT<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>indexS<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                indexS<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>indexS <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            indexT<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 290,
        "NUMBER": 393,
        "TITLE": "UTF-8 Validation",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A character in UTF8 can be from <b>1 to 4 bytes</b> long, subjected to the following rules:</p>\n    <ol>\n        <li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>\n        <li>For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li>\n    </ol>\n    <p>This is how the UTF-8 encoding would work:</p>\n\n    <pre><code class=\"hljs lsl\">   Char. number range  |        UTF<span class=\"hljs-number\">-8</span> octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0000</span><span class=\"hljs-number\">-0000</span> <span class=\"hljs-number\">007</span>F | <span class=\"hljs-number\">0</span>xxxxxxx\n   <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0080</span><span class=\"hljs-number\">-0000</span> <span class=\"hljs-number\">07</span>FF | <span class=\"hljs-number\">110</span>xxxxx <span class=\"hljs-number\">10</span>xxxxxx\n   <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0800</span><span class=\"hljs-number\">-0000</span> FFFF | <span class=\"hljs-number\">1110</span>xxxx <span class=\"hljs-number\">10</span>xxxxxx <span class=\"hljs-number\">10</span>xxxxxx\n   <span class=\"hljs-number\">0001</span> <span class=\"hljs-number\">0000</span><span class=\"hljs-number\">-0010</span> FFFF | <span class=\"hljs-number\">11110</span>xxx <span class=\"hljs-number\">10</span>xxxxxx <span class=\"hljs-number\">10</span>xxxxxx <span class=\"hljs-number\">10</span>xxxxxx\n</code></pre>\n    <p>\n        Given an array of integers representing the data, return whether it is a valid utf-8 encoding.\n    </p>\n    <p>\n        <b>Note:</b><br>\n        The input is an array of integers. Only the <b>least significant 8 bits</b> of each integer is used to store the data. This means each integer represents only 1 byte of data.\n    </p>\n\n    <p>\n        <b>Example 1:</b>\n    </p><pre>data = [197, 130, 1], which represents the octet sequence: <b>11000101 10000010 00000001</b>.\n\nReturn <b>true</b>.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n</pre>\n    <p></p>\n\n    <p>\n        <b>Example 2:</b>\n    </p><pre>data = [235, 140, 4], which represented the octet sequence: <b>11101011 10001100 00000100</b>.\n\nReturn <b>false</b>.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">validUtf8</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> data<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>data <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> isValid <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// 1 after 8th digit, 100000000</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">255)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> numberOfBytes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #408080; font-style: italic\">// 0xxxxxxx, 1 byte, 128(10000000)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">128)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                numberOfBytes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">224)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">192)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// 110xxxxx, 2 bytes, 224(11100000), 192(11000000)</span>\n                numberOfBytes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">240)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">224)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// 1110xxxx, 3 bytes, 240(11110000), 224(11100000)</span>\n                numberOfBytes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">248)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">240)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// 11110xxx, 4 bytes, 248(11111000), 240(11110000)</span>\n                numberOfBytes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">4;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// check that the next n bytes start with 10xxxxxx</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> numberOfBytes<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> j <span style=\"color: #666666\">&gt;=</span> data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">((</span>data<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">192)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">128)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// 192(11000000), 128(10000000)</span>\n            <span style=\"color: #666666\">}</span>\n            i <span style=\"color: #666666\">+=</span> numberOfBytes<span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> isValid<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 291,
        "NUMBER": 394,
        "TITLE": "Decode String",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an encoded string, return it's decoded string.\n</p>\n    <p>\n        The encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times. Note that <i>k</i> is guaranteed to be a positive integer.</p>\n\n    <p>\n        You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n\n    <p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <i>k</i>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.\n    </p>\n\n    <p><b>Examples:</b>\n    </p><pre>s = \"3[a]2[bc]\", return \"aaabcbc\".\ns = \"3[a2[c]]\", return \"accaccacc\".\ns = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">decodeString</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        Stack<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span> ch <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> ch <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">)</span> i<span style=\"color: #666666\">++;</span>\n                count<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)));</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;[&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ch <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;]&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                String str <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n                <span style=\"color: #B00040\">int</span> times <span style=\"color: #666666\">=</span> count<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> times<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> ch<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            i <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 292,
        "NUMBER": 395,
        "TITLE": "Longest Substring with At Least K Repeating Characters",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Find the length of the longest substring <b><i>T</i></b> of a given string (consists of lowercase letters only) such that every character in <b><i>T</i></b> appears no less than <i>k</i> times.\n</p>\n\n    <p><b>Example 1:</b>\n    </p><pre>Input:\ns = \"aaabb\", k = 3\n\nOutput:\n3\n\nThe longest substring is \"aaa\", as 'a' is repeated 3 times.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>Input:\ns = \"ababbc\", k = 2\n\nOutput:\n5\n\nThe longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestSubstring</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> str <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// result</span>\n        <span style=\"color: #408080; font-style: italic\">// Try substrings with 1 to 26 unique chars</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> h <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> h <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">26;</span> h<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> counts <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n            <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// slow pointer</span>\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// fast pointer</span>\n            <span style=\"color: #B00040\">int</span> unique <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// count of unique chars</span>\n            <span style=\"color: #B00040\">int</span> noLessThanK <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// count of char more than K</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// When uniqu chars count less than h</span>\n                <span style=\"color: #408080; font-style: italic\">// fast pointer advance</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>unique <span style=\"color: #666666\">&lt;=</span> h<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                        unique<span style=\"color: #666666\">++;</span>\n                    counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]++;</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span>\n                        noLessThanK<span style=\"color: #666666\">++;</span>\n                    j<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span>\n                        noLessThanK<span style=\"color: #666666\">--;</span>\n                    counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]--;</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>counts<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                        unique<span style=\"color: #666666\">--;</span>\n                    i<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>unique <span style=\"color: #666666\">==</span> h <span style=\"color: #666666\">&amp;&amp;</span> unique <span style=\"color: #666666\">==</span> noLessThanK<span style=\"color: #666666\">)</span>\n                    max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 293,
        "NUMBER": 396,
        "TITLE": "Rotate Function",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of integers <code>A</code> and let <i>n</i> to be its length.\n</p>\n\n    <p>\n        Assume <code>B<sub>k</sub></code> to be an array obtained by rotating the array <code>A</code> <i>k</i> positions clock-wise, we define a \"rotation function\" <code>F</code> on <code>A</code> as follow:\n    </p>\n\n    <p>\n        <code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>.</p>\n\n    <p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>.\n    </p>\n\n    <p><b>Note:</b><br>\n        <i>n</i> is guaranteed to be less than 10<sup>5</sup>.\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre>A = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxRotateFunction</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> res <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> start <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> start<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> cur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> curStart <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">,</span> newStart <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>curStart <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">){</span>\n                    cur <span style=\"color: #666666\">+=</span> curStart<span style=\"color: #666666\">*</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                    curStart<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    cur <span style=\"color: #666666\">+=</span> newStart<span style=\"color: #666666\">*</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                    newStart<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            res <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 294,
        "NUMBER": 397,
        "TITLE": "Integer Replacement",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a positive integer <i>n</i> and you can do operations as follow:\n</p>\n\n    <p>\n    </p><ol>\n    <li>If <i>n</i> is even, replace <i>n</i> with <code><i>n</i>/2</code>.</li>\n    <li>If <i>n</i> is odd, you can replace <i>n</i> with either <code><i>n</i> + 1</code> or <code><i>n</i> - 1</code>.</li>\n</ol>\n    <p></p>\n\n    <p>\n        What is the minimum number of replacements needed for <i>n</i> to become 1?\n    </p>\n\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>Input:</b>\n8\n\n<b>Output:</b>\n3\n\n<b>Explanation:</b>\n8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>Input:</b>\n7\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\n7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor\n7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">integerReplacement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> c <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>n <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                n <span style=\"color: #666666\">&gt;&gt;&gt;=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">((</span>n <span style=\"color: #666666\">&gt;&gt;&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// if a number ends with 01 or 3</span>\n                <span style=\"color: #666666\">--</span>n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #666666\">++</span>n<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">++</span>c<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> c<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 295,
        "NUMBER": 398,
        "TITLE": "Random Pick Index",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n</p>\n\n    <p>\n        <b>Note:</b><br>\n        The array size can be very large. Solution that uses too much extra space will not pass the judge.\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre>int[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(3);\n\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(1);\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">;</span>\n    Random rnd<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Solution</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nums</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">rnd</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Random<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">pick</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> target<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>rnd<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(++</span>count<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                result <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Solution object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Solution obj = new Solution(nums);</span>\n<span style=\"color: #408080; font-style: italic\"> * int param_1 = obj.pick(target);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "33",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 296,
        "NUMBER": 399,
        "TITLE": "Evaluate Division",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Equations are given in the format <code>A / B = k</code>, where  <code>A</code> and <code>B</code> are variables represented as strings, and <code>k</code> is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return <code>-1.0</code>.\n</p>\n    <p><b>Example:</b><br>\n        Given <code> a / b = 2.0, b / c = 3.0.</code> <br>queries are: <code> a / c = ?,  b / a = ?, a / e = ?,  a / a = ?, x / x = ? .</code> <br>return <code> [6.0, 0.5, -1.0, 1.0, -1.0 ].</code>\n    </p>\n    <p>\n        The input is: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries </code>, where <code>equations.size() == values.size()</code>, and the values are positive. This represents the equations. Return <code> vector&lt;double&gt;</code>.\n    </p>\n\n    <p>According to the example above:\n    </p><pre>equations = [ [\"a\", \"b\"], [\"b\", \"c\"] ],\nvalues = [2.0, 3.0],\nqueries = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. </pre>\n    <p></p>\n\n    <p>\n        The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">calcEquation</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[][]</span> equations<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[]</span> values<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[][]</span> queries<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Double<span style=\"color: #666666\">&gt;&gt;</span> numMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> str <span style=\"color: #666666\">:</span> equations<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            insertPairs<span style=\"color: #666666\">(</span>numMap<span style=\"color: #666666\">,</span> str<span style=\"color: #666666\">[0],</span> str<span style=\"color: #666666\">[1],</span> values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            insertPairs<span style=\"color: #666666\">(</span>numMap<span style=\"color: #666666\">,</span> str<span style=\"color: #666666\">[1],</span> str<span style=\"color: #666666\">[0],</span> <span style=\"color: #666666\">1.0/</span>values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[</span>queries<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> q <span style=\"color: #666666\">:</span> queries<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            Double resObj <span style=\"color: #666666\">=</span> handleQuery<span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">[0],</span> q<span style=\"color: #666666\">[1],</span> numMap<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;());</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>resObj <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> resObj <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1.0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">insertPairs</span><span style=\"color: #666666\">(</span>Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Double<span style=\"color: #666666\">&gt;&gt;</span> numMap<span style=\"color: #666666\">,</span> String num<span style=\"color: #666666\">,</span> String denom<span style=\"color: #666666\">,</span> Double value<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Double<span style=\"color: #666666\">&gt;</span> denomMap <span style=\"color: #666666\">=</span> numMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>denomMap <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            denomMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n            numMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> denomMap<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        denomMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>denom<span style=\"color: #666666\">,</span> value<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> Double <span style=\"color: #0000FF\">handleQuery</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">,</span> String denom<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Double<span style=\"color: #666666\">&gt;&gt;</span> numMap<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> visitedSet<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String dupeKey <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;:&quot;</span><span style=\"color: #666666\">+</span>denom<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>visitedSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>dupeKey<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>numMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">!</span>numMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>denom<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>denom<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1.0;</span>\n\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Double<span style=\"color: #666666\">&gt;</span> denomMap <span style=\"color: #666666\">=</span> numMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        visitedSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>dupeKey<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String key <span style=\"color: #666666\">:</span> denomMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            Double res <span style=\"color: #666666\">=</span> handleQuery<span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> denom<span style=\"color: #666666\">,</span> numMap<span style=\"color: #666666\">,</span> visitedSet<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>res <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> denomMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> res<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        visitedSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>dupeKey<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "23",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 297,
        "NUMBER": 402,
        "TITLE": "Remove K Digits",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a non-negative integer <i>num</i> represented as a string, remove <i>k</i> digits from the number so that the new number is the smallest possible.\n</p>\n\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>The length of <i>num</i> is less than 10002 and will be ≥ <i>k</i>.</li>\n    <li>The given <i>num</i> does not contain any leading zero.</li>\n</ul>\n\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre>Input: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>Input: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b>\n    </p><pre>Input: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">removeKdigits</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">//corner case</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">==</span>len<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">;</span>\n\n        Stack<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">&lt;</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #408080; font-style: italic\">//whenever meet a digit which is less than the previous digit,</span>\n            <span style=\"color: #408080; font-style: italic\">// discard the previous one</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">&gt;0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()&gt;</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)){</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                k<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// corner case like &quot;1111&quot;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">&gt;0){</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            k<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//construct the number from the stack</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">());</span>\n        sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #408080; font-style: italic\">//remove all the 0 at the head</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()&gt;1</span> <span style=\"color: #666666\">&amp;&amp;</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)==</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">deleteCharAt</span><span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "15, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 298,
        "NUMBER": 406,
        "TITLE": "Queue Reconstruction by Height",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers <code>(h, k)</code>, where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.\n</p>\n\n    <p><b>Note:</b><br>\n        The number of people is less than 1,100.\n    </p>\n\n    <p><b>Example</b>\n    </p><pre>Input:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\nOutput:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> <span style=\"color: #0000FF\">reconstructQueue</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> people<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//pick up the tallest guy first</span>\n        <span style=\"color: #408080; font-style: italic\">//when insert the next tall guy, just need to insert him into kth position</span>\n        <span style=\"color: #408080; font-style: italic\">//repeat until all people are inserted into list</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>people <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> people<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> people<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[0][0];</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>people<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> a<span style=\"color: #666666\">[0])</span> <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[1];</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> b<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> a<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> people<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        ArrayList<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> tmp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>people<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1],</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>people<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0],</span> people<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1]});</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>people<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][2];</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> k <span style=\"color: #666666\">:</span> tmp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> k<span style=\"color: #666666\">[0];</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">++][1]</span> <span style=\"color: #666666\">=</span> k<span style=\"color: #666666\">[1];</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 299,
        "NUMBER": 413,
        "TITLE": "Arithmetic Slices",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\n\n    <p>For example, these are arithmetic sequence:</p>\n    <pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n    <p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre>\n    <br>\n\n    <p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p>\n\n    <p>A slice (P, Q) of array A is called arithmetic if the sequence:<br>\n        A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p>\n\n    <p>The function should return the number of arithmetic slices in the array A. </p>\n    <br>\n\n    <p><b>Example:</b>\n    </p><pre>A = [1, 2, 3, 4]\n\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numberOfArithmeticSlices</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> curr <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> A<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2])</span> <span style=\"color: #666666\">{</span>\n                curr <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n                sum <span style=\"color: #666666\">+=</span> curr<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                curr <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 300,
        "NUMBER": 416,
        "TITLE": "Partition Equal Subset Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>non-empty</b> array containing <b>only positive integers</b>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Each of the array element will not exceed 100.</li>\n    <li>The array size will not exceed 200.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre>Input: [1, 5, 11, 5]\n\nOutput: true\n\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>Input: [1, 2, 3, 5]\n\nOutput: false\n\nExplanation: The array cannot be partitioned into equal sum subsets.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Similar to backpack problem</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canPartition</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// check edge case</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// preprocess</span>\n        <span style=\"color: #B00040\">int</span> volumn <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            volumn <span style=\"color: #666666\">+=</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>volumn <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        volumn <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// dp def</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>volumn <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #408080; font-style: italic\">// dp init</span>\n        dp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// dp transition</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> volumn<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;=</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                dp<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">||</span> dp<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">-</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>volumn<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 301,
        "NUMBER": 417,
        "TITLE": "Pacific Atlantic Water Flow",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an <code>m x n</code> matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.</p>\n\n    <p>Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.</p>\n\n    <p>Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The order of returned grid coordinates does not matter.</li>\n    <li>Both <i>m</i> and <i>n</i> are less than 150.</li>\n</ol>\n    <p></p>\n    <p><b>Example:</b>\n    </p><pre>Given the following 5x5 matrix:\n\n  Pacific ~   ~   ~   ~   ~\n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * Atlantic\n\nReturn:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> <span style=\"color: #0000FF\">pacificAtlantic</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// the pacific boolean table</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> pacific <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">// the atlantic booean table</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> atlantic <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">//initially, all the top and left cells are flooded with pacific water</span>\n        <span style=\"color: #408080; font-style: italic\">//and all the right and bottom cells are flooded with atlantic water</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            pacific<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            atlantic<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            pacific<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            atlantic<span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//we go around the matrix and try to flood the matrix from 4 side.</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> pacificVisited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n            <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> atlanticVisited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n            water<span style=\"color: #666666\">(</span>pacific<span style=\"color: #666666\">,</span> pacificVisited<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n            water<span style=\"color: #666666\">(</span>atlantic<span style=\"color: #666666\">,</span> atlanticVisited<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> pacificVisited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n            <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> atlanticVisited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n            water<span style=\"color: #666666\">(</span>pacific<span style=\"color: #666666\">,</span> pacificVisited<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> i<span style=\"color: #666666\">);</span>\n            water<span style=\"color: #666666\">(</span>atlantic<span style=\"color: #666666\">,</span> atlanticVisited<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//check the shared points among 2 tables</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pacific<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> atlantic<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> element <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span>i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">};</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>element<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">//the flood function</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">water</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> wet<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> visited<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        wet<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        visited<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> x <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{0,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">-1};</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> y <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{1,</span> <span style=\"color: #666666\">-1,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0};</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span>\n                    <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>visited<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]][</span>j <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]]</span> <span style=\"color: #666666\">&amp;&amp;</span> matrix<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]][</span>j <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]]</span> <span style=\"color: #666666\">&gt;=</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                water<span style=\"color: #666666\">(</span>wet<span style=\"color: #666666\">,</span> visited<span style=\"color: #666666\">,</span> matrix<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">],</span> j <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 19",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 302,
        "NUMBER": 419,
        "TITLE": "Battleships in a Board",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Given an 2D board, count how many battleships are in it. The battleships are represented with <code>'X'</code>s, empty slots are represented with <code>'.'</code>s. You may assume the following rules:\n\n    </p><ul>\n    <li>You receive a valid board, made of only battleships or empty slots.</li>\n    <li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li>\n    <li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul>\n\n    <p><b>Example:</b><br>\n    </p><pre>X..X\n...X\n...X\n</pre>\n    In the above board there are 2 battleships.\n\n    <p><b>Invalid Example:</b><br>\n    </p><pre>...X\nXXXX\n...X\n</pre>\n    This is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n    <p></p>\n    <p><b>Follow up:</b><br>Could you do it in <b>one-pass</b>, using only <b>O(1) extra memory</b> and <b>without modifying</b> the value of the board?</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countBattleships</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> totalCount <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> row <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> row<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> col <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> col<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #408080; font-style: italic\">// Case 1: it is a .</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// Case 2: it is invalid</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">-1][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;X&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    col <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;X&#39;</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n                <span style=\"color: #408080; font-style: italic\">// Case 3: adjacent to X</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">-1][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;X&#39;</span> <span style=\"color: #666666\">||</span>\n                    col <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;X&#39;</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// Case 4: a new ship</span>\n                totalCount<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> totalCount<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 303,
        "NUMBER": 421,
        "TITLE": "Maximum XOR of Two Numbers in an Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>non-empty</b> array of numbers, a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, … , a<sub>n-1</sub>, where 0 ≤ a<sub>i</sub> &lt; 2<sup>31</sup>.</p>\n\n    <p>Find the maximum result of a<sub>i</sub> XOR a<sub>j</sub>, where 0 ≤ <i>i</i>, <i>j</i> &lt; <i>n</i>.</p>\n\n    <p>Could you do this in O(<i>n</i>) runtime?</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b> [3, 10, 5, 25, 2, 8]\n\n<b>Output:</b> 28\n\n<b>Explanation:</b> The maximum result is <b>5</b> ^ <b>25</b> = 28.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Trie</span> <span style=\"color: #666666\">{</span>\n        Trie<span style=\"color: #666666\">[]</span> children<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Trie</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n            children <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Trie<span style=\"color: #666666\">[2];</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMaximumXOR</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Init Trie.</span>\n        Trie root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Trie<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            Trie curNode <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">31;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> curBit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;&gt;&gt;</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Trie<span style=\"color: #666666\">();</span>\n                <span style=\"color: #666666\">}</span>\n                curNode <span style=\"color: #666666\">=</span> curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            Trie curNode <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> curSum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">31;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> curBit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;&gt;&gt;</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit <span style=\"color: #666666\">^</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    curSum <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n                    curNode <span style=\"color: #666666\">=</span> curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit <span style=\"color: #666666\">^</span> <span style=\"color: #666666\">1];</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    curNode <span style=\"color: #666666\">=</span> curNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">[</span>curBit<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #408080; font-style: italic\">// for this case: even if all left bits results are 1s,</span>\n                <span style=\"color: #408080; font-style: italic\">// curSum still cannot catch up max value</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curSum <span style=\"color: #666666\">&lt;</span> max <span style=\"color: #666666\">&amp;&amp;</span> max <span style=\"color: #666666\">-</span> curSum <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>curSum<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "11, 22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 304,
        "NUMBER": 423,
        "TITLE": "Reconstruct Original Digits from English",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a <b>non-empty</b> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Input contains only lowercase English letters.</li>\n    <li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.</li>\n    <li>Input length is less than 50,000.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre>Input: \"owoztneoer\"\n\nOutput: \"012\"\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre>Input: \"fviefuro\"\n\nOutput: \"45\"\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">originalDigits</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[10];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;z&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[0]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;w&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[2]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;x&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[6]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;s&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[7]++;</span> <span style=\"color: #408080; font-style: italic\">//7-6</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;g&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[8]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;u&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[4]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;f&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[5]++;</span> <span style=\"color: #408080; font-style: italic\">//5-4</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;h&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[3]++;</span> <span style=\"color: #408080; font-style: italic\">//3-8</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;i&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[9]++;</span> <span style=\"color: #408080; font-style: italic\">//9-8-5-6</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;o&#39;</span><span style=\"color: #666666\">)</span> count<span style=\"color: #666666\">[1]++;</span> <span style=\"color: #408080; font-style: italic\">//1-0-2-4</span>\n        <span style=\"color: #666666\">}</span>\n        count<span style=\"color: #666666\">[7]</span> <span style=\"color: #666666\">-=</span> count<span style=\"color: #666666\">[6];</span>\n        count<span style=\"color: #666666\">[5]</span> <span style=\"color: #666666\">-=</span> count<span style=\"color: #666666\">[4];</span>\n        count<span style=\"color: #666666\">[3]</span> <span style=\"color: #666666\">-=</span> count<span style=\"color: #666666\">[8];</span>\n        count<span style=\"color: #666666\">[9]</span> <span style=\"color: #666666\">=</span> count<span style=\"color: #666666\">[9]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[8]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[5]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[6];</span>\n        count<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> count<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">[4];</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">9;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> count<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span> j<span style=\"color: #666666\">++){</span>\n                sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 305,
        "NUMBER": 424,
        "TITLE": "Longest Repeating Character Replacement",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most <i>k</i> times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.</p>\n\n    <p><b>Note:</b><br>\n        Both the string's length and <i>k</i> will not exceed 10<sup>4</sup>.\n    </p>\n\n    <p>\n        <b>Example 1:</b>\n    </p><pre><b>Input:</b>\ns = \"ABAB\", k = 2\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\nReplace the two 'A's with two 'B's or vice versa.\n</pre>\n    <p></p>\n\n    <p>\n        <b>Example 2:</b>\n    </p><pre><b>Input:</b>\ns = \"AABABBA\", k = 1\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n\n<span style=\"color: #408080; font-style: italic\">     The problem says that we can make at most k changes to the string</span>\n<span style=\"color: #408080; font-style: italic\">     (any character can be replaced with any other character).</span>\n<span style=\"color: #408080; font-style: italic\">     So, let&#39;s say there were no constraints like the k.</span>\n<span style=\"color: #408080; font-style: italic\">     Given a string convert it to a string with all same characters with</span>\n<span style=\"color: #408080; font-style: italic\">     minimal changes. The answer to this is</span>\n\n<span style=\"color: #408080; font-style: italic\">     length of the entire string - number of times of the maximum occurring character in the string</span>\n<span style=\"color: #408080; font-style: italic\">     Given this, we can apply the at most k changes constraint and maintain a sliding window such that</span>\n\n<span style=\"color: #408080; font-style: italic\">     (length of substring - number of times of the maximum occurring character in the substring) &lt;= k</span>\n\n<span style=\"color: #408080; font-style: italic\">     **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">characterReplacement</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> maxCount <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> maxLength <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> end <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> end<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            maxCount <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxCount<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">++</span>count<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">-</span> maxCount <span style=\"color: #666666\">&gt;</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">]--;</span>\n                start<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            maxLength <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxLength<span style=\"color: #666666\">,</span> end <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxLength<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 306,
        "NUMBER": 433,
        "TITLE": "Minimum Genetic Mutation",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A gene string can be represented by an 8-character long string, with choices from <code>\"A\"</code>, <code>\"C\"</code>, <code>\"G\"</code>, <code>\"T\"</code>.</p>\n\n    <p>Suppose we need to investigate about a mutation (mutation from \"start\" to \"end\"), where ONE mutation is defined as ONE single character changed in the gene string.</p>\n\n    <p>For example, <code>\"AACCGGTT\"</code> -&gt; <code>\"AACCGGTA\"</code> is 1 mutation.</p>\n\n    <p>Also, there is a given gene \"bank\", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.</p>\n\n    <p>Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from \"start\" to \"end\". If there is no such a mutation, return -1.</p>\n\n    <p><b>Note:</b>\n    </p><ol>\n    <li>Starting point is assumed to be valid, so it might not be included in the bank.</li>\n    <li>If multiple mutations are needed, all mutations during in the sequence must be valid.</li>\n    <li>You may assume start and end string is not the same.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre>start: \"AACCGGTT\"\nend:   \"AACCGGTA\"\nbank: [\"AACCGGTA\"]\n\nreturn: 1\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre>start: \"AACCGGTT\"\nend:   \"AAACGGTA\"\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\n\nreturn: 2\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b>\n    </p><pre>start: \"AAAAACCC\"\nend:   \"AACCCCCC\"\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\n\nreturn: 3\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minMutation</span><span style=\"color: #666666\">(</span>String start<span style=\"color: #666666\">,</span> String end<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[]</span> bank<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;[]</span> graph <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> List<span style=\"color: #666666\">[</span>bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            graph<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>canMutate<span style=\"color: #666666\">(</span>bank<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> bank<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]))</span> graph<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> targetIdx <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>bank<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                targetIdx <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>targetIdx <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">-1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// endXXX means something calculated from end to start</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> endDist <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>endDist<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-1);</span>\n        endDist<span style=\"color: #666666\">[</span>targetIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> endQ <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">:</span> graph<span style=\"color: #666666\">[</span>targetIdx<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n            endQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>idx<span style=\"color: #666666\">);</span>\n            endDist<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// startXXX means something calculated from start to end</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> startDist <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>startDist<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-1);</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> startQ <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> bank<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>canMutate<span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> bank<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>bank<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n                startQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                startDist<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>startQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>endQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> startIdx <span style=\"color: #666666\">=</span> startQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> nextIdx <span style=\"color: #666666\">:</span> graph<span style=\"color: #666666\">[</span>startIdx<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>startDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">-1)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>endDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> startDist<span style=\"color: #666666\">[</span>startIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> endDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    startDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> startDist<span style=\"color: #666666\">[</span>startIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    startQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nextIdx<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #B00040\">int</span> endIdx <span style=\"color: #666666\">=</span> endQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> nextIdx <span style=\"color: #666666\">:</span> graph<span style=\"color: #666666\">[</span>endIdx<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>endDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">-1)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>startDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> startDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> endDist<span style=\"color: #666666\">[</span>endIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    endDist<span style=\"color: #666666\">[</span>nextIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> endDist<span style=\"color: #666666\">[</span>endIdx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    endQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>nextIdx<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canMutate</span><span style=\"color: #666666\">(</span>String gen1<span style=\"color: #666666\">,</span> String gen2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> gen1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span>\n            diff <span style=\"color: #666666\">+=</span> gen1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> gen2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> diff <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 307,
        "NUMBER": 435,
        "TITLE": "Non-overlapping Intervals",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>You may assume the interval's end point is always bigger than its start point.</li>\n    <li>Intervals like [1,2] and [2,3] have borders \"touching\" but they don't overlap each other.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> [1,3] can be removed and the rest of intervals are non-overlapping.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [ [1,2], [1,2], [1,2] ]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> You need to remove two [1,2] to make the rest of intervals non-overlapping.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> [ [1,2], [2,3] ]\n\n<b>Output:</b> 0\n\n<b>Explanation:</b> You don't need to remove any of the intervals since they're already non-overlapping.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for an interval.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class Interval {</span>\n<span style=\"color: #408080; font-style: italic\"> * int start;</span>\n<span style=\"color: #408080; font-style: italic\"> * int end;</span>\n<span style=\"color: #408080; font-style: italic\"> * Interval() { start = 0; end = 0; }</span>\n<span style=\"color: #408080; font-style: italic\"> * Interval(int s, int e) { start = s; end = e; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">eraseOverlapIntervals</span><span style=\"color: #666666\">(</span>Interval<span style=\"color: #666666\">[]</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #AA22FF\">@Override</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Interval o1<span style=\"color: #666666\">,</span> Interval o2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> o1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">-</span> o2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">;</span>  <span style=\"color: #408080; font-style: italic\">//first sort by end</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Interval interval <span style=\"color: #666666\">:</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">&gt;=</span> end<span style=\"color: #666666\">)</span> end <span style=\"color: #666666\">=</span> interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> count<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 308,
        "NUMBER": 436,
        "TITLE": "Find Right Interval",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the \"right\" of i.\n</p>\n\n    <p>\n        For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the \"right\" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.\n    </p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>You may assume the interval's end point is always bigger than its start point.</li>\n    <li>You may assume none of these intervals have the same start point.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [ [1,2] ]\n\n<b>Output:</b> [-1]\n\n<b>Explanation:</b> There is only one interval in the collection, so it outputs -1.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [ [3,4], [2,3], [1,2] ]\n\n<b>Output:</b> [-1, 0, 1]\n\n<b>Explanation:</b> There is no satisfied \"right\" interval for [3,4].\nFor [2,3], the interval [3,4] has minimum-\"right\" start point;\nFor [1,2], the interval [2,3] has minimum-\"right\" start point.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> [ [1,4], [2,3], [3,4] ]\n\n<b>Output:</b> [-1, 2, -1]\n\n<b>Explanation:</b> There is no satisfied \"right\" interval for [1,4] and [3,4].\nFor [2,3], the interval [3,4] has minimum-\"right\" start point.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for an interval.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class Interval {</span>\n<span style=\"color: #408080; font-style: italic\"> * int start;</span>\n<span style=\"color: #408080; font-style: italic\"> * int end;</span>\n<span style=\"color: #408080; font-style: italic\"> * Interval() { start = 0; end = 0; }</span>\n<span style=\"color: #408080; font-style: italic\"> * Interval(int s, int e) { start = s; end = e; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">findRightInterval</span><span style=\"color: #666666\">(</span>Interval<span style=\"color: #666666\">[]</span> intervals<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        TreeMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> intervalMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeMap<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            intervalMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> intervals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> entry <span style=\"color: #666666\">=</span>\n                    intervalMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">ceilingEntry</span><span style=\"color: #666666\">(</span>intervals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">);</span>\n            result<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>entry <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> entry<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 309,
        "NUMBER": 442,
        "TITLE": "Find All Duplicates in an Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array of integers, 1 ≤ a[i] ≤ <i>n</i> (<i>n</i> = size of array), some elements appear <b>twice</b> and others appear <b>once</b>.</p>\n\n    <p>Find all the elements that appear <b>twice</b> in this array.</p>\n\n    <p>Could you do it without extra space and in O(<i>n</i>) runtime?</p>\n    <p></p>\n    <p><b>Example:</b><br>\n    </p><pre><b>Input:</b>\n[4,3,2,7,8,2,3,1]\n\n<b>Output:</b>\n[2,3]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findDuplicates</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// creating a new List</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> newList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Taking the absolute value to find index</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>index <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                nums<span style=\"color: #666666\">[</span>index <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-</span>nums<span style=\"color: #666666\">[</span>index <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// If it is not greater than 0 (i.e)</span>\n                <span style=\"color: #408080; font-style: italic\">// negative then the number is a duplicate</span>\n                newList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> newList<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 310,
        "NUMBER": 445,
        "TITLE": "Add Two Numbers II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n\n    <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n    <p><b>Follow up:</b><br>\n        What if you cannot modify the input lists? In other words, reversing the lists is not allowed.\n    </p>\n\n    <p>\n        <b>Example:</b>\n    </p><pre><b>Input:</b> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<b>Output:</b> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">addTwoNumbers</span><span style=\"color: #666666\">(</span>ListNode l1<span style=\"color: #666666\">,</span> ListNode l2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> s1 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> s2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n            l1 <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l2 <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n            l2 <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        ListNode list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">!</span>s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">())</span> sum <span style=\"color: #666666\">+=</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">())</span> sum <span style=\"color: #666666\">+=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> sum <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10;</span>\n            ListNode head <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10);</span>\n            head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> list<span style=\"color: #666666\">;</span>\n            list <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n            sum <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">:</span> list<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 311,
        "NUMBER": 449,
        "TITLE": "Serialize and Deserialize BST",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. </p>\n\n    <p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n    <p>\n        <b>The encoded string should be as compact as possible.</b>\n    </p>\n\n    <p>\n        <b>Note:</b> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Codec</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">final</span> String SEP <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;,&quot;</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">final</span> String NULL <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;null&quot;</span><span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Encodes a tree to a single string.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">serialize</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> NULL<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//traverse it recursively if you want to, I am doing it iteratively here</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> st <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            root <span style=\"color: #666666\">=</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>SEP<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Decodes your encoded data to tree.</span>\n    <span style=\"color: #408080; font-style: italic\">// pre-order traversal</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">deserialize</span><span style=\"color: #666666\">(</span>String data<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>NULL<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        String<span style=\"color: #666666\">[]</span> strs <span style=\"color: #666666\">=</span> data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span>SEP<span style=\"color: #666666\">);</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String e <span style=\"color: #666666\">:</span> strs<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>e<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> getNode<span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// some notes:</span>\n    <span style=\"color: #408080; font-style: italic\">//   5</span>\n    <span style=\"color: #408080; font-style: italic\">//  3 6</span>\n    <span style=\"color: #408080; font-style: italic\">// 2   7</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> TreeNode <span style=\"color: #0000FF\">getNode</span><span style=\"color: #666666\">(</span>Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> q<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">//q: 5,3,2,6,7</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span><span style=\"color: #408080; font-style: italic\">//root (5)</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> samllerQueue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            samllerQueue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//smallerQueue : 3,2   storing elements smaller than 5 (root)</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> getNode<span style=\"color: #666666\">(</span>samllerQueue<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">//q: 6,7   storing elements bigger than 5 (root)</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> getNode<span style=\"color: #666666\">(</span>q<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">// Your Codec object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// Codec codec = new Codec();</span>\n<span style=\"color: #408080; font-style: italic\">// codec.deserialize(codec.serialize(root));</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 312,
        "NUMBER": 450,
        "TITLE": "Delete Node in a BST",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n\n    <p>Basically, the deletion can be divided into two stages:\n    </p><ol>\n    <li>Search for a node to remove.</li>\n    <li>If the node is found, delete the node.</li>\n</ol>\n    <p></p>\n\n    <p><b>Note:</b> Time complexity should be O(height of tree).</p>\n\n    <p><b>Example:</b>\n    </p><pre>root = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nGiven key to delete is 3. So we find the node with value 3 and delete it.\n\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\nAnother valid answer is [5,2,6,null,4,null,7].\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">deleteNode</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> key<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> replaceNode<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n\n        TreeNode parent <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        TreeNode current <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>key <span style=\"color: #666666\">&lt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">:</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>current <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>current <span style=\"color: #666666\">==</span> parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> replaceNode<span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> replaceNode<span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                parent <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">;</span>\n                current <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>key <span style=\"color: #666666\">&lt;</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">:</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    TreeNode <span style=\"color: #0000FF\">replaceNode</span><span style=\"color: #666666\">(</span>TreeNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\n        TreeNode parent <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">,</span> current <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            parent <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">;</span>\n            current <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> current<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            current<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> current<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 313,
        "NUMBER": 451,
        "TITLE": "Sort Characters By Frequency",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string, sort it in decreasing order based on the frequency of characters.</p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>Input:</b>\n\"tree\"\n\n<b>Output:</b>\n\"eert\"\n\n<b>Explanation:</b>\n'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>Input:</b>\n\"cccaaa\"\n\n<b>Output:</b>\n\"cccaaa\"\n\n<b>Explanation:</b>\nBoth 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b>\n    </p><pre><b>Input:</b>\n\"Aabb\"\n\n<b>Output:</b>\n\"bbAa\"\n\n<b>Explanation:</b>\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">frequencySort</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> charArray <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Character c <span style=\"color: #666666\">:</span> charArray<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n            <span style=\"color: #666666\">}</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n\n        List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;[]</span> array <span style=\"color: #666666\">=</span> buildArray<span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> buildString<span style=\"color: #666666\">(</span>array<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;[]</span> <span style=\"color: #0000FF\">buildArray</span><span style=\"color: #666666\">(</span>Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> maxCount<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;[]</span> array <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> List<span style=\"color: #666666\">[</span>maxCount <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Character c <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>array<span style=\"color: #666666\">[</span>count<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                array<span style=\"color: #666666\">[</span>count<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">();</span>\n            <span style=\"color: #666666\">}</span>\n            array<span style=\"color: #666666\">[</span>count<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> array<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> String <span style=\"color: #0000FF\">buildString</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;[]</span> array<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> array<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> array<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>list <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Character c <span style=\"color: #666666\">:</span> list<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                        sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 314,
        "NUMBER": 452,
        "TITLE": "Minimum Number of Arrows to Burst Balloons",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 10<sup>4</sup> balloons.</p>\n\n    <p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with x<sub>start</sub> and x<sub>end</sub> bursts by an arrow shot at x if x<sub>start</sub> ≤ x ≤ x<sub>end</sub>. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons. </p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\n[[10,16], [2,8], [1,6], [7,12]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nOne way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n\n<span style=\"color: #408080; font-style: italic\">     Idea:</span>\n<span style=\"color: #408080; font-style: italic\">     We know that eventually we have to shoot down every balloon, so for each ballon</span>\n<span style=\"color: #408080; font-style: italic\">     there must be an arrow whose position is between balloon[0] and balloon[1].</span>\n<span style=\"color: #408080; font-style: italic\">     Given that, we can sort the array of balloons by their ending position.</span>\n<span style=\"color: #408080; font-style: italic\">     Then we make sure that while we take care of each balloon from the beginning,</span>\n<span style=\"color: #408080; font-style: italic\">     we can shoot as many following balloons as possible.</span>\n\n<span style=\"color: #408080; font-style: italic\">     So what position should we pick? We should shoot as right as possible,</span>\n<span style=\"color: #408080; font-style: italic\">     because all balloons&#39; end position is to the right of the current one.</span>\n<span style=\"color: #408080; font-style: italic\">     Therefore the position should be currentBalloon[1],</span>\n<span style=\"color: #408080; font-style: italic\">     because we still need to shoot down the current one.</span>\n\n<span style=\"color: #408080; font-style: italic\">     This is exactly what I do in the for loop:</span>\n<span style=\"color: #408080; font-style: italic\">     check how many balloons I can shoot down with one shot aiming at</span>\n<span style=\"color: #408080; font-style: italic\">     the ending position of the current balloon.</span>\n<span style=\"color: #408080; font-style: italic\">     Then I skip all these balloons and start again from the next one</span>\n<span style=\"color: #408080; font-style: italic\">     (or the leftmost remaining one) that needs another arrow.</span>\n\n<span style=\"color: #408080; font-style: italic\">     ***/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMinArrowShots</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> points<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>points <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> points<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> b<span style=\"color: #666666\">[0])</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[1];</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        <span style=\"color: #B00040\">int</span> minArrows <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> arrowLimit <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[0][1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> baloon <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>baloon<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&lt;=</span> arrowLimit<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                arrowLimit <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>arrowLimit<span style=\"color: #666666\">,</span> baloon<span style=\"color: #666666\">[1]);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                minArrows<span style=\"color: #666666\">++;</span>\n                arrowLimit <span style=\"color: #666666\">=</span> baloon<span style=\"color: #666666\">[1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> minArrows<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 315,
        "NUMBER": 454,
        "TITLE": "4Sum II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p>\n\n    <p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -2<sup>28</sup> to 2<sup>28</sup> - 1 and the result is guaranteed to be at most 2<sup>31</sup> - 1.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nThe two tuples are:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity:  O(n^2)</span>\n    <span style=\"color: #408080; font-style: italic\">// Space complexity: O(n^2)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">fourSumCount</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> B<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> C<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> D<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> C<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> D<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> C<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> D<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> B<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                res <span style=\"color: #666666\">+=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(-1</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> B<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]),</span> <span style=\"color: #666666\">0);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 6",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 316,
        "NUMBER": 456,
        "TITLE": "132 Pattern",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a sequence of n integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, a 132 pattern is a subsequence a<sub><b>i</b></sub>, a<sub><b>j</b></sub>, a<sub><b>k</b></sub> such\n    that <b>i</b> &lt; <b>j</b> &lt; <b>k</b> and a<sub><b>i</b></sub> &lt; a<sub><b>k</b></sub> &lt; a<sub><b>j</b></sub>. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\n\n    <p><b>Note:</b> n will be less than 15,000.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1, 2, 3, 4]\n\n<b>Output:</b> False\n\n<b>Explanation:</b> There is no 132 pattern in the sequence.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [3, 1, 4, 2]\n\n<b>Output:</b> True\n\n<b>Explanation:</b> There is a 132 pattern in the sequence: [1, 4, 2].\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> [-1, 3, 2, 0]\n\n<b>Output:</b> True\n\n<b>Explanation:</b> There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Pair</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> min<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Pair</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> min<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span> <span style=\"color: #666666\">=</span> min<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span> <span style=\"color: #666666\">=</span> max<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">find132pattern</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Pair<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> n <span style=\"color: #666666\">&lt;</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">)</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Pair<span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&gt;</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                Pair last <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;</span> last<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                last<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span> <span style=\"color: #666666\">=</span> n<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> n <span style=\"color: #666666\">&gt;=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #408080; font-style: italic\">// At this time, n &lt; stack.peek().max (if stack not empty)</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">min</span> <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>last<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 317,
        "NUMBER": 462,
        "TITLE": "Minimum Moves to Equal Array Elements II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p></p><p>Given a <b>non-empty</b> integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>\n\n    <p>You may assume the array's length is at most 10,000.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\n[1,2,3]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nOnly two moves are needed (remember each move increments or decrements one element):\n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>\n    <p></p><p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minMoves2</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> median <span style=\"color: #666666\">=</span> quickselect<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            sum <span style=\"color: #666666\">+=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> median<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">quickselect</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">,</span> r <span style=\"color: #666666\">=</span> end<span style=\"color: #666666\">,</span> pivot <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[(</span>l <span style=\"color: #666666\">+</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2];</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> pivot<span style=\"color: #666666\">)</span> l<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> pivot<span style=\"color: #666666\">)</span> r<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&gt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            swap<span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">,</span> l<span style=\"color: #666666\">++,</span> r<span style=\"color: #666666\">--);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> k<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> quickselect<span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> l <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">==</span> k <span style=\"color: #666666\">&amp;&amp;</span> l <span style=\"color: #666666\">==</span> r<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> A<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> quickselect<span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">-</span> r <span style=\"color: #666666\">+</span> start <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> r <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 318,
        "NUMBER": 464,
        "TITLE": "Can I Win",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins. </p>\n\n    <p>What if we change the game so that players cannot re-use integers? </p>\n\n    <p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total &gt;= 100.</p>\n\n    <p>Given an integer <code>maxChoosableInteger</code> and another integer <code>desiredTotal</code>, determine if the first player to move can force a win, assuming both players play optimally. </p>\n\n    <p>You can always assume that <code>maxChoosableInteger</code> will not be larger than 20 and <code>desiredTotal</code> will not be larger than 300.\n    </p>\n\n    <p><b>Example</b>\n    </p><pre><b>Input:</b>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canIWin</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> maxChoosableInteger<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> desiredTotal<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(1+</span>maxChoosableInteger<span style=\"color: #666666\">)*</span>maxChoosableInteger<span style=\"color: #666666\">/2;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">&lt;</span> desiredTotal<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>desiredTotal <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Boolean<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> used <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>maxChoosableInteger<span style=\"color: #666666\">+1];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> helper<span style=\"color: #666666\">(</span>desiredTotal<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> desiredTotal<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> used<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Boolean<span style=\"color: #666666\">&gt;</span> map<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>desiredTotal <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> key <span style=\"color: #666666\">=</span> format<span style=\"color: #666666\">(</span>used<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">)){</span>\n            <span style=\"color: #408080; font-style: italic\">// try every unchosen number as next step</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> used<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// check whether this lead to a win (i.e. the other player lose)</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>helper<span style=\"color: #666666\">(</span>desiredTotal <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">,</span> used<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">)){</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">);</span>\n                    used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                used<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// transfer boolean[] to an Integer</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">format</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> used<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">boolean</span> b<span style=\"color: #666666\">:</span> used<span style=\"color: #666666\">){</span>\n            num <span style=\"color: #666666\">&lt;&lt;=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">)</span> num <span style=\"color: #666666\">|=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 33",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 319,
        "NUMBER": 468,
        "TITLE": "Validate IP Address",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n</p>\n\n    <p>\n        <b>IPv4</b> addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\".\"), e.g.,<code>172.16.254.1</code>;\n    </p>\n\n    <p>\n        Besides, leading zeros in the IPv4 is invalid. For example, the address <code>172.16.254.01</code> is invalid.\n    </p>\n\n    <p>\n        <b>IPv6</b> addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (\":\"). For example, the address <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so <code>2001:db8:85a3:0:0:8A2E:0370:7334</code> is also a valid IPv6 address(Omit leading zeros and using upper cases).\n    </p>\n\n\n    <p>\n        However, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, <code>2001:0db8:85a3::8A2E:0370:7334</code> is an invalid IPv6 address.\n    </p>\n\n    <p>\n        Besides, extra leading zeros in the IPv6 is also invalid. For example, the address <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is invalid.\n    </p>\n\n\n    <p><b>Note:</b>\n        You may assume there is no extra space or special characters in the input string.\n    </p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> \"172.16.254.1\"\n\n<b>Output:</b> \"IPv4\"\n\n<b>Explanation:</b> This is a valid IPv4 address, return \"IPv4\".\n</pre>\n    <p></p>\n\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\n<b>Output:</b> \"IPv6\"\n\n<b>Explanation:</b> This is a valid IPv6 address, return \"IPv6\".\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> \"256.256.256.256\"\n\n<b>Output:</b> \"Neither\"\n\n<b>Explanation:</b> This is neither a IPv4 address nor a IPv6 address.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">validIPAddress</span><span style=\"color: #666666\">(</span>String IP<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>isValidIPv4<span style=\"color: #666666\">(</span>IP<span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;IPv4&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>isValidIPv6<span style=\"color: #666666\">(</span>IP<span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;IPv6&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;Neither&quot;</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidIPv4</span><span style=\"color: #666666\">(</span>String ip<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> tokens <span style=\"color: #666666\">=</span> ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\\\.&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">7</span> <span style=\"color: #666666\">||</span> ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span> <span style=\"color: #666666\">||</span>\n                ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span> <span style=\"color: #666666\">||</span> tokens<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">4)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String token <span style=\"color: #666666\">:</span> tokens<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">startsWith</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;0&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">try</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> parsedInt <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>token<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>parsedInt <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> parsedInt <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">255</span> <span style=\"color: #666666\">||</span>\n                        parsedInt <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">catch</span> <span style=\"color: #666666\">(</span>NumberFormatException nfe<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValidIPv6</span><span style=\"color: #666666\">(</span>String ip<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String<span style=\"color: #666666\">[]</span> tokens <span style=\"color: #666666\">=</span> ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;:&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">15</span> <span style=\"color: #666666\">||</span> ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;:&#39;</span> <span style=\"color: #666666\">||</span>\n                ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>ip<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;:&#39;</span> <span style=\"color: #666666\">||</span> tokens<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">8)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String token <span style=\"color: #666666\">:</span> tokens<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">||</span> token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chars <span style=\"color: #666666\">=</span> token<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> chars<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isDigit</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!((</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;A&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">5)</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                        <span style=\"color: #666666\">!((</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">5))</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 320,
        "NUMBER": 473,
        "TITLE": "Matchsticks to Square",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used <b>exactly</b> one time.</p>\n\n    <p> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [1,1,2,2,2]\n<b>Output:</b> true\n\n<b>Explanation:</b> You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [3,3,3,3,4]\n<b>Output:</b> false\n\n<b>Explanation:</b> You cannot find a way to form a square with all the matchsticks.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The length sum of the given matchsticks is in the range of <code>0</code> to <code>10^9</code>.\n    </li><li>The length of the given matchstick array will not exceed <code>15</code>.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">makesquare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> sum <span style=\"color: #666666\">+=</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        reverse<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> dfs<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[4],</span> <span style=\"color: #666666\">0,</span> sum <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">4);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">dfs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> sums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">==</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sums<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">&amp;&amp;</span> sums<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">&amp;&amp;</span> sums<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">==</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dfs<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> sums<span style=\"color: #666666\">,</span> index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> target<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-=</span> nums<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> j <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n            nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            i<span style=\"color: #666666\">++;</span>\n            j<span style=\"color: #666666\">--;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 321,
        "NUMBER": 474,
        "TITLE": "Ones and Zeroes",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>\n    <p>For now, suppose you are a dominator of <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code> respectively. On the other hand, there is an array with strings consisting of only <code>0s</code> and <code>1s</code>.</p>\n\n    <p>\n        Now your task is to find the maximum number of strings that you can form with given <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code>. Each <code>0</code> and <code>1</code> can be used at most <b>once</b>.\n    </p>\n\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The given numbers of <code>0s</code> and <code>1s</code> will both not exceed <code>100</code></li>\n    <li>The size of given string array won't exceed <code>600</code>.</li>\n</ol>\n    <p></p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\n<b>Output:</b> 4\n\n<b>Explanation:</b> This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n<b>Output:</b> 2\n\n<b>Explanation:</b> You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMaxForm</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> strs<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            String str <span style=\"color: #666666\">=</span> strs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #B00040\">int</span> neededZero <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #B00040\">int</span> neededOne <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    neededZero<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    neededOne<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> newMax <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> zero <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> zero <span style=\"color: #666666\">&lt;=</span> m<span style=\"color: #666666\">;</span> zero<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> one <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> one <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> one<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>zero <span style=\"color: #666666\">&gt;=</span> neededZero <span style=\"color: #666666\">&amp;&amp;</span> one <span style=\"color: #666666\">&gt;=</span> neededOne<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #B00040\">int</span> zeroLeft <span style=\"color: #666666\">=</span> zero <span style=\"color: #666666\">-</span> neededZero<span style=\"color: #666666\">;</span>\n                        <span style=\"color: #B00040\">int</span> oneLeft <span style=\"color: #666666\">=</span> one <span style=\"color: #666666\">-</span> neededOne<span style=\"color: #666666\">;</span>\n                        <span style=\"color: #408080; font-style: italic\">// Since we have one valid combination so +1</span>\n                        newMax<span style=\"color: #666666\">[</span>zero<span style=\"color: #666666\">][</span>one<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">+</span> max<span style=\"color: #666666\">[</span>zeroLeft<span style=\"color: #666666\">][</span>oneLeft<span style=\"color: #666666\">],</span> max<span style=\"color: #666666\">[</span>zero<span style=\"color: #666666\">][</span>one<span style=\"color: #666666\">]);</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        newMax<span style=\"color: #666666\">[</span>zero<span style=\"color: #666666\">][</span>one<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> max<span style=\"color: #666666\">[</span>zero<span style=\"color: #666666\">][</span>one<span style=\"color: #666666\">];</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            max <span style=\"color: #666666\">=</span> newMax<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 322,
        "NUMBER": 477,
        "TITLE": "Total Hamming Distance",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\n\n    <p>Now your job is to find the total Hamming distance between all pairs of the given numbers.\n\n\n    </p><p><b>Example:</b><br>\n</p><pre><b>Input:</b> 4, 14, 2\n\n<b>Output:</b> 6\n\n<b>Explanation:</b> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case). So the answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>Elements of the given array are in the range of <code>0 </code> to <code>10^9</code>\n    </li><li>Length of the array will not exceed <code>10^4</code>. </li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">totalHammingDistance</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> total <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">32;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> bitCount <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n                bitCount <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;&gt;</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">1;</span>\n            total <span style=\"color: #666666\">+=</span> bitCount <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">-</span> bitCount<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> total<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 323,
        "NUMBER": 481,
        "TITLE": "Magical String",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    A magical string <b>S</b> consists of only '1' and '2' and obeys the following rules:\n</p>\n    <p>\n        The string <b>S</b> is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string <b>S</b> itself.\n    </p>\n\n    <p>\n        The first few elements of string <b>S</b> is the following:\n        <b>S</b> = \"1221121221221121122……\"\n    </p>\n\n    <p>\n        If we group the consecutive '1's and '2's in <b>S</b>, it will be:\n    </p>\n    <p>\n        1   22  11  2  1  22  1  22  11  2  11  22 ......\n    </p>\n    <p>\n        and the occurrences of '1's or '2's in each group are:\n    </p>\n    <p>\n        1   2\t   2    1   1    2     1    2     2    1    2    2 ......\n    </p>\n\n    <p>\n        You can see that the occurrence sequence above is the <b>S</b> itself.\n    </p>\n\n    <p>\n        Given an integer N as input, return the number of '1's in the first N number in the magical string <b>S</b>.\n    </p>\n\n    <p><b>Note:</b>\n        N will not exceed 100,000.\n    </p>\n\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> 6\n<b>Output:</b> 3\n<b>Explanation:</b> The first 6 elements of magical string S is \"12211\" and it contains three 1's, so return 3.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">magicalString</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Create an int array a and initialize the first 3 elements</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        a<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        a<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        a<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// head is the index to generate new numbers</span>\n        <span style=\"color: #B00040\">int</span> head <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// tail is the index to put the new number</span>\n        <span style=\"color: #B00040\">int</span> tail <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span>\n        <span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// current number</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>tail <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Generate number with count of a[head]</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> a<span style=\"color: #666666\">[</span>head<span style=\"color: #666666\">];</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                a<span style=\"color: #666666\">[</span>tail<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> tail <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">)</span>\n                    result<span style=\"color: #666666\">++;</span>\n                tail<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// flip number back and forth between 1 and 2</span>\n            num <span style=\"color: #666666\">=</span> num <span style=\"color: #666666\">^</span> <span style=\"color: #666666\">3;</span>\n            head<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 324,
        "NUMBER": 523,
        "TITLE": "Continuous Subarray Sum",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a list of <b>non-negative</b> numbers and a target <b>integer</b> k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of <b>k</b>, that is, sums up to n*k where n is also an <b>integer</b>.\n</p>\n\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> [23, 2, 4, 6, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n</pre>\n    <p></p>\n\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> [23, 2, 6, 4, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The length of the array won't exceed 10,000.</li>\n    <li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// if a % c == b % c，then (a-b) / c == 0</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">checkSubarraySum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #666666\">-1);</span>\n        <span style=\"color: #B00040\">int</span> runningSum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            runningSum <span style=\"color: #666666\">+=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span>\n                runningSum <span style=\"color: #666666\">%=</span> k<span style=\"color: #666666\">;</span>\n            Integer prev <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>runningSum<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prev <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> prev <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>runningSum<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 325,
        "NUMBER": 592,
        "TITLE": "Fraction Addition and Subtraction",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href=\"https://en.wikipedia.org/wiki/Irreducible_fraction\">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\"-1/2+1/2\"\n<b>Output:</b> \"0/1\"\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b>\"-1/2+1/2+1/3\"\n<b>Output:</b> \"1/3\"\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b>\"1/3-1/2\"\n<b>Output:</b> \"-1/6\"\n</pre>\n    <p></p>\n\n    <p><b>Example 4:</b><br>\n    </p><pre><b>Input:</b>\"5/3+1/3\"\n<b>Output:</b> \"2/1\"\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li>\n    <li>Each fraction (input and output) has format <code>±numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li>\n    <li>The input only contains valid <b>irreducible fractions</b>, where the <b>numerator</b> and <b>denominator</b> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.</li>\n    <li>The number of given fractions will be in the range [1,10].</li>\n    <li>The numerator and denominator of the <b>final result</b> are guaranteed to be valid and in the range of 32-bit int.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">gcd</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>y <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> gcd<span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">%</span> y<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">fractionAddition</span><span style=\"color: #666666\">(</span>String expression<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">// Split the expression to get fracs</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;-&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;+&#39;</span><span style=\"color: #666666\">)</span>\n            expression <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">+</span> expression<span style=\"color: #666666\">;</span>\n        String<span style=\"color: #666666\">[]</span> fracs <span style=\"color: #666666\">=</span> expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;[+-]&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Get signs of each fracs</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> signs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>fracs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> signInd <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">)</span>\n                signs<span style=\"color: #666666\">[</span>signInd<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> expression<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// x is sum of nomerator and y is total denominator</span>\n        <span style=\"color: #408080; font-style: italic\">// starts with x/y = 0/1</span>\n        <span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> y <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> fracs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            String f <span style=\"color: #666666\">=</span> fracs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            String<span style=\"color: #666666\">[]</span> ft <span style=\"color: #666666\">=</span> f<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// numerator</span>\n            <span style=\"color: #B00040\">int</span> a <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>ft<span style=\"color: #666666\">[0])*</span>signs<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #408080; font-style: italic\">// denominator</span>\n            <span style=\"color: #B00040\">int</span> b <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>ft<span style=\"color: #666666\">[1]);</span>\n            x <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">*</span>b <span style=\"color: #666666\">+</span> a<span style=\"color: #666666\">*</span>y<span style=\"color: #666666\">;</span>\n            y <span style=\"color: #666666\">*=</span> b<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// If x &lt;= 0</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            y <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0){</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">);</span>\n            x <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// x and y &gt; 0</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> y <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #B00040\">int</span> g <span style=\"color: #666666\">=</span> gcd<span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">);</span>\n            x <span style=\"color: #666666\">/=</span> g<span style=\"color: #666666\">;</span>\n            y <span style=\"color: #666666\">/=</span> g<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&#39;/&#39;</span> <span style=\"color: #666666\">+</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 326,
        "NUMBER": 593,
        "TITLE": "Valid Square",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given the coordinates of four points in 2D space, return whether the four points could construct a square.</p>\n\n    <p>The coordinate (x,y) of a point is represented by an integer array with two integers.</p>\n\n    <p><b>Example:</b><br>\n    </p><pre><b>Input:</b> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<b>Output:</b> True\n</pre>\n    <p></p>\n\n    <p> Note:\n    </p><ol>\n    <li>All the input integers are in the range [-10000, 10000].</li>\n    <li>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</li>\n    <li>Input points have no order.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">validSquare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p3<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p4<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span>p1<span style=\"color: #666666\">,</span>p2<span style=\"color: #666666\">,</span>p3<span style=\"color: #666666\">,</span>p4<span style=\"color: #666666\">};</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> checkAllPermutations<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">checkAllPermutations</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> p<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> check<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">[0],</span> p<span style=\"color: #666666\">[1],</span> p<span style=\"color: #666666\">[2],</span> p<span style=\"color: #666666\">[3]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">boolean</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> l<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            swap<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">,</span> l<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n            res <span style=\"color: #666666\">|=</span> checkAllPermutations<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">,</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            swap<span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">,</span> l<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">check</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p3<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p4<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dist<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">,</span>p2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> dist<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">,</span> p2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> dist<span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">,</span> p3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span>\n            dist<span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">,</span> p3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> dist<span style=\"color: #666666\">(</span>p3<span style=\"color: #666666\">,</span> p4<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> dist<span style=\"color: #666666\">(</span>p3<span style=\"color: #666666\">,</span> p4<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> dist<span style=\"color: #666666\">(</span>p4<span style=\"color: #666666\">,</span> p1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span>\n            dist<span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">,</span> p3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> dist<span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">,</span> p4<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">dist</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> p1<span style=\"color: #666666\">[1])</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> p1<span style=\"color: #666666\">[1])</span> <span style=\"color: #666666\">+</span>\n            <span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> p1<span style=\"color: #666666\">[0])</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> p1<span style=\"color: #666666\">[0]);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> p<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> temp <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">];</span>\n        p<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">[</span>y<span style=\"color: #666666\">];</span>\n        p<span style=\"color: #666666\">[</span>y<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 327,
        "NUMBER": 609,
        "TITLE": "Find Duplicate File in System",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p>\n\n    <p>A group of duplicate files consists of at least <b>two</b> files that have exactly the same content.</p>\n\n    <p>A single directory info string in the <b>input</b> list has the following format: </p>\n    <p><code>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</code><br></p>\n    <p>It means there are <b>n</b> files (<code>f1.txt</code>, <code>f2.txt</code> ... <code>fn.txt</code> with content <code>f1_content</code>, <code>f2_content</code> ... <code>fn_content</code>, respectively) in directory <code>root/d1/d2/.../dm</code>. Note that n &gt;= 1 and m &gt;= 0. If m = 0, it means the directory is just the root directory.</p>\n\n    <p>The <b>output</b> is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format: </p>\n    <p><code>\"directory_path/file_name.txt\"</code></p>\n\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\n[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"]\n<b>Output:</b>\n[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre>\n    <p></p>\n\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>No order is required for the final output.</li>\n    <li>You may assume the directory name, file name and file content only has letters and digits, and the length of file content is in the range of [1,50].</li>\n    <li>The number of files given is in the range of [1,20000].</li>\n    <li>You may assume no files or directories share the same name in the same directory.</li>\n    <li>You may assume each given directory info represents a unique directory. Directory path and file info are separated by a single blank space.</li>\n</ol>\n    <p></p>\n\n\n    <b>Follow-up beyond contest:</b>\n    <ol>\n        <li> Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\n        <li> If the file content is very large (GB level), how will you modify your solution?</li>\n        <li> If you can only read the file by 1kb each time, how will you modify your solution?</li>\n        <li> What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?</li>\n        <li> How to make sure the duplicated files you find are not false positive?</li>\n    </ol><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity : O(n*x). n strings of average length x is parsed.</span>\n    <span style=\"color: #408080; font-style: italic\">// Space complexity : O(n*x). map and res size grows upto n*x.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">findDuplicate</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> paths<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String path<span style=\"color: #666666\">:</span> paths<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            String<span style=\"color: #666666\">[]</span> values <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> values<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                String<span style=\"color: #666666\">[]</span> name_cont <span style=\"color: #666666\">=</span> values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;\\\\(&quot;</span><span style=\"color: #666666\">);</span>\n                name_cont<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> name_cont<span style=\"color: #666666\">[1].</span><span style=\"color: #7D9029\">replace</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;)&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n                List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>name_cont<span style=\"color: #666666\">[1],</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;());</span>\n                list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>values<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;/&quot;</span> <span style=\"color: #666666\">+</span> name_cont<span style=\"color: #666666\">[0]);</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>name_cont<span style=\"color: #666666\">[1],</span> list<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String key<span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 328,
        "NUMBER": 611,
        "TITLE": "Valid Triangle Number",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n\n    </p><p><b>Example 1:</b><br>\n</p><pre><b>Input:</b> [2,2,3,4]\n<b>Output:</b> 3\n<b>Explanation:</b>\nValid combinations are:\n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The length of the given array won't exceed 1000.</li>\n    <li>The integers in the given array are in the range of [0, 1000].</li>\n</ol>\n    <p></p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">triangleNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                    result <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">);</span>\n                    right<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    left<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 329,
        "NUMBER": 621,
        "TITLE": "Task Scheduler",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>\n\n    <p>However, there is a non-negative cooling interval <b>n</b> that means between two <b>same tasks</b>, there must be at least n intervals that CPU are doing different tasks or just be idle. </p>\n\n    <p>You need to return the <b>least</b> number of intervals the CPU will take to finish all the given tasks.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> tasks = ['A','A','A','B','B','B'], n = 2\n<b>Output:</b> 8\n<b>Explanation:</b> A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The number of tasks is in the range [1, 10000].</li>\n    <li>The integer n is in the range [0, 100].</li>\n</ol>\n    <p></p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">leastInterval</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> tasks<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Map task to number of tasks</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> task <span style=\"color: #666666\">:</span> tasks<span style=\"color: #666666\">){</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>task<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>task<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Sort tasks based on frequency</span>\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> pq <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;(</span>\n                <span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">,</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-&gt;</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">?</span>\n                        b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">:</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getKey</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getKey</span><span style=\"color: #666666\">()</span>\n        <span style=\"color: #666666\">);</span>\n        pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">entrySet</span><span style=\"color: #666666\">());</span>\n\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #B00040\">int</span> cycle <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> <span style=\"color: #408080; font-style: italic\">// total time to execute a task</span>\n            List<span style=\"color: #666666\">&lt;</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> remainingTasks <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>cycle <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n                Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> top <span style=\"color: #666666\">=</span> pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #408080; font-style: italic\">// Update count of this task if still has left</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0){</span>\n                    top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">setValue</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n                    remainingTasks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                cycle<span style=\"color: #666666\">--;</span> <span style=\"color: #408080; font-style: italic\">// Update time left in this cycle</span>\n                count<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// Successfully executed task</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">Entry</span><span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> t <span style=\"color: #666666\">:</span> remainingTasks<span style=\"color: #666666\">){</span>\n                pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pq<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            count <span style=\"color: #666666\">+=</span> cycle<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 17, 18",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 330,
        "NUMBER": 623,
        "TITLE": "Add One Row to Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given the root of a binary tree, then value <code>v</code> and depth <code>d</code>, you need to add a row of nodes with value <code>v</code> at the given depth <code>d</code>. The root node is at depth 1. </p>\n\n    <p>The adding rule is: given a positive integer depth <code>d</code>, for each NOT null tree nodes <code>N</code> in depth <code>d-1</code>, create two tree nodes with value <code>v</code> as <code>N's</code> left subtree root and right subtree root. And <code>N's</code> <b>original left subtree</b> should be the left subtree of the new left subtree root, its <b>original right subtree</b> should be the right subtree of the new right subtree root. If depth <code>d</code> is 1 that means there is no depth d-1 at all, then create a tree node with value <b>v</b> as the new root of the whole original tree, and the original tree is the new root's left subtree.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b>\nA binary tree as following:\n       4\n     /   \\\n    2     6\n   / \\   /\n  3   1 5\n\n<b>v = 1</b>\n\n<b>d = 2</b>\n\n<b>Output:</b>\n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     /\n 3   1   5\n\n</pre>\n    <p></p>\n\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b>\nA binary tree as following:\n      4\n     /\n    2\n   / \\\n  3   1\n\n<b>v = 1</b>\n\n<b>d = 3</b>\n\n<b>Output:</b>\n      4\n     /\n    2\n   / \\\n  1   1\n /     \\\n3       1\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The given d is in range [1, maximum depth of the given tree + 1].</li>\n    <li>The given binary tree has at least one tree node.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">addOneRow</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> v<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> d<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>d <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n\t\t\tTreeNode newRoot <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>v<span style=\"color: #666666\">);</span>\n\t\t\tnewRoot<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n\t\t\t<span style=\"color: #008000; font-weight: bold\">return</span> newRoot<span style=\"color: #666666\">;</span>\n\t\t<span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> curDepth <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> parentLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n        parentLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>curDepth <span style=\"color: #666666\">&lt;</span> d <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1){</span>\n            Deque<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> nextLevel <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayDeque<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>parentLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n                TreeNode top <span style=\"color: #666666\">=</span> parentLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pollFirst</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    nextLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offerFirst</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            parentLevel <span style=\"color: #666666\">=</span> nextLevel<span style=\"color: #666666\">;</span>\n            curDepth<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>parentLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            TreeNode top <span style=\"color: #666666\">=</span> parentLevel<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pollFirst</span><span style=\"color: #666666\">();</span>\n            TreeNode temp <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>v<span style=\"color: #666666\">);</span>\n            top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n            temp <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>v<span style=\"color: #666666\">);</span>\n            top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 331,
        "NUMBER": 625,
        "TITLE": "Minimum Factorization",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a positive integer <code>a</code>, find the smallest positive integer <code>b</code> whose multiplication of each digit equals to <code>a</code>. </p>\n\n    <p>\n        If there is no answer or the answer is not fit in 32-bit signed integer, then return 0.</p>\n\n    <p>\n        <b>Example 1</b><br>\n        Input:\n    </p><pre>48 </pre>\n    Output:\n    <pre>68</pre>\n    <p></p>\n\n    <p>\n        <b>Example 2</b><br>\n        Input:\n    </p><pre>15</pre>\n\n    Output:\n    <pre>35</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">smallestFactorization</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Case 1: If number is smaller than 10</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">10)</span> <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Case 2: Start with 9 and try every possible digit</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">9;</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// If current digit divides n, then store all</span>\n            <span style=\"color: #408080; font-style: italic\">// occurrences of current digit in res</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">%</span> i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                n <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">/</span> i<span style=\"color: #666666\">;</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// If n could not be broken in form of digits</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Get the result from the array in reverse order</span>\n        <span style=\"color: #B00040\">long</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            result <span style=\"color: #666666\">=</span> result <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">+</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>result <span style=\"color: #666666\">&gt;</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span>result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 32",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 332,
        "NUMBER": 629,
        "TITLE": "K Inverse Pairs Array",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two integers <code>n</code> and <code>k</code>, find how many different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> inverse pairs.\n</p>\n    <p>\n        We define an inverse pair as following:\n        For <code>i<sub>th</sub></code> and <code>j<sub>th</sub></code> element in the array, if <code>i</code> &lt; <code>j</code> and <code>a[i]</code> &gt; <code>a[j]</code> then it's an inverse pair; Otherwise, it's not.\n    </p>\n\n    <p>\n        Since the answer may very large, the answer should be modulo 10<sup>9</sup> + 7.\n    </p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> n = 3, k = 0\n<b>Output:</b> 1\n<b>Explanation:</b>\nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> n = 3, k = 1\n<b>Output:</b> 2\n<b>Explanation:</b>\nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The integer <code>n</code> is in the range [1, 1000] and <code>k</code> is in the range [0, 1000].</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * dp[n][k] denotes the number of arrays that have k inverse pairs for array composed of 1 to n</span>\n<span style=\"color: #408080; font-style: italic\">we can establish the recursive relationship between dp[n][k] and dp[n-1][i]:</span>\n\n<span style=\"color: #408080; font-style: italic\">if we put n as the last number then all the k inverse pair should come from the first n-1 numbers</span>\n<span style=\"color: #408080; font-style: italic\">if we put n as the second last number then there&#39;s 1 inverse pair involves n so the rest k-1 comes from the first n-1 numbers</span>\n<span style=\"color: #408080; font-style: italic\">...</span>\n<span style=\"color: #408080; font-style: italic\">if we put n as the first number then there&#39;s n-1 inverse pairs involve n so the rest k-(n-1) comes from the first n-1 numbers</span>\n\n<span style=\"color: #408080; font-style: italic\">dp[n][k] = dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+...+dp[n-1][k+1-n+1]+dp[n-1][k-n+1]</span>\n\n<span style=\"color: #408080; font-style: italic\">It&#39;s possible that some where in the right hand side the second array index become negative,</span>\n<span style=\"color: #408080; font-style: italic\">since we cannot generate negative inverse pairs we just treat them as 0,</span>\n<span style=\"color: #408080; font-style: italic\">but still leave the item there as a place holder.</span>\n\n<span style=\"color: #408080; font-style: italic\">dp[n][k] = dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+...+dp[n-1][k+1-n+1]+dp[n-1][k-n+1]</span>\n<span style=\"color: #408080; font-style: italic\">dp[n][k+1] = dp[n-1][k+1]+dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+...+dp[n-1][k+1-n+1]</span>\n\n<span style=\"color: #408080; font-style: italic\">so by deducting the first line from the second line, we have</span>\n\n<span style=\"color: #408080; font-style: italic\">dp[n][k+1] = dp[n][k]+dp[n-1][k+1]-dp[n-1][k+1-n]</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">    **/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">kInversePairs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> mod <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1000000007;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&gt;</span> n<span style=\"color: #666666\">*(</span>n<span style=\"color: #666666\">-1)/2</span> <span style=\"color: #666666\">||</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> k <span style=\"color: #666666\">==</span> n<span style=\"color: #666666\">*(</span>n<span style=\"color: #666666\">-1)/2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[][]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">+1][</span>k<span style=\"color: #666666\">+1];</span>\n        dp<span style=\"color: #666666\">[2][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        dp<span style=\"color: #666666\">[2][1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">3;</span> i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">*(</span>i<span style=\"color: #666666\">-1)/2);</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">+</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;=</span> i<span style=\"color: #666666\">)</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">];</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]+</span>mod<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> mod<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> dp<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">][</span>k<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 333,
        "NUMBER": 630,
        "TITLE": "Course Schedule III",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. Each course has some duration(course length)  <code>t</code> and closed on <code>d<sub>th</sub></code> day. A course should be taken <b>continuously</b> for <code>t</code> days and must be finished before or on the <code>d<sub>th</sub></code> day. You will start at the <code>1<sub>st</sub></code> day.\n</p>\n\n    <p>\n        Given <code>n</code> online courses represented by pairs <code>(t,d)</code>, your task is to find the maximal number of courses that can be taken.\n    </p>\n\n\n    <p><b>Example:</b><br>\n    </p><pre><b>Input:</b> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<b>Output:</b> 3\n<b>Explanation:</b>\nThere're totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day.\nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day.\nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n</pre>\n    <p></p>\n\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The integer 1 &lt;= d, t, n &lt;= 10,000. </li>\n    <li>You can't take two courses simultaneously.</li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">scheduleCourse</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> courses<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Sort the courses by their deadlines</span>\n        <span style=\"color: #408080; font-style: italic\">// (Greedy! We have to deal with courses with early deadlines first)</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>courses<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">,</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-&gt;</span> a<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">[1]);</span>\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;((</span>a<span style=\"color: #666666\">,</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-&gt;</span> b <span style=\"color: #666666\">-</span> a<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> time <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> c<span style=\"color: #666666\">:</span> courses<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>time <span style=\"color: #666666\">+</span> c<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&lt;=</span> c<span style=\"color: #666666\">[1])</span> <span style=\"color: #666666\">{</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">[0]);</span>\n                time <span style=\"color: #666666\">+=</span> c<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> c<span style=\"color: #666666\">[0])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// If time exceeds, drop the previous course which costs the most time.</span>\n                <span style=\"color: #408080; font-style: italic\">// (That must be the best choice!)</span>\n                time <span style=\"color: #666666\">+=</span> c<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">[0]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 334,
        "NUMBER": 4,
        "TITLE": "Median of Two Sorted Arrays",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p>\n    <p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\n\n    <p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n\n    <p><b>Example 1:</b><br>\n    </p>\n    <pre>nums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p>\n    <pre>nums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n</pre>\n\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: O(log(n+m))</span>\n<span style=\"color: #408080; font-style: italic\">     * Space Complexity: O(1)</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * if total count is odd then find the one in the middle</span>\n<span style=\"color: #408080; font-style: italic\">     * else find the another one on the left and get average</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * the method of find middle can be converted to find the kth</span>\n<span style=\"color: #408080; font-style: italic\">     * element recursively</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">findMedianSortedArrays</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> totalCount <span style=\"color: #666666\">=</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">+</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> getKthElement<span style=\"color: #666666\">(</span>totalCount<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> nums1<span style=\"color: #666666\">,</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>totalCount <span style=\"color: #666666\">%2</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1.0*</span>right<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> getKthElement<span style=\"color: #666666\">(</span>totalCount<span style=\"color: #666666\">/2,</span> nums1<span style=\"color: #666666\">,</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">+</span> right<span style=\"color: #666666\">)/2.0;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getKthElement</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start2<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start1 <span style=\"color: #666666\">&gt;=</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums2<span style=\"color: #666666\">[</span>start2 <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start2 <span style=\"color: #666666\">&gt;=</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums1<span style=\"color: #666666\">[</span>start1 <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>nums1<span style=\"color: #666666\">[</span>start1<span style=\"color: #666666\">],</span> nums2<span style=\"color: #666666\">[</span>start2<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #B00040\">int</span> mid1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>start1 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> nums1<span style=\"color: #666666\">[</span>start1 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">:</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> mid2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>start2 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> nums2<span style=\"color: #666666\">[</span>start2 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">:</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Key is to use k - k/2 not k/2</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>mid1 <span style=\"color: #666666\">&lt;</span> mid2<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> getKthElement<span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">/2,</span> nums1<span style=\"color: #666666\">,</span> nums2<span style=\"color: #666666\">,</span> start1 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2,</span> start2<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> getKthElement<span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">/2,</span> nums1<span style=\"color: #666666\">,</span> nums2<span style=\"color: #666666\">,</span> start1<span style=\"color: #666666\">,</span> start2 <span style=\"color: #666666\">+</span> k<span style=\"color: #666666\">/2);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6, 7",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 335,
        "NUMBER": 10,
        "TITLE": "Regular Expression Matching",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement regular expression matching with support for <code>'.'</code> and <code>'*'</code>.</p>\n\n    <pre>'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the <b>entire</b> input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") → false\nisMatch(\"aa\",\"aa\") → true\nisMatch(\"aaa\",\"aa\") → false\nisMatch(\"aa\", \"a*\") → true\nisMatch(\"aa\", \".*\") → true\nisMatch(\"ab\", \".*\") → true\nisMatch(\"aab\", \"c*a*b\") → true\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];</span>\n<span style=\"color: #408080; font-style: italic\">     2, If p.charAt(j) == &#39;.&#39; : dp[i][j] = dp[i-1][j-1];</span>\n<span style=\"color: #408080; font-style: italic\">     3, If p.charAt(j) == &#39;*&#39;: here are two sub conditions:</span>\n<span style=\"color: #408080; font-style: italic\">     3.1, if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty</span>\n<span style=\"color: #408080; font-style: italic\">     3.2, if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == &#39;.&#39;:</span>\n<span style=\"color: #408080; font-style: italic\">     dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a</span>\n<span style=\"color: #408080; font-style: italic\">     or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a</span>\n<span style=\"color: #408080; font-style: italic\">     or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty</span>\n<span style=\"color: #408080; font-style: italic\">     ***/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isMatch</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> p <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        dp<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> dp<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">-1])</span> <span style=\"color: #666666\">{</span>\n                dp<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">+1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span> <span style=\"color: #666666\">||</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">!=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">+1]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">-1];</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">+1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">||</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">+1]</span> <span style=\"color: #666666\">||</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">-1]);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()][</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 8, 9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 336,
        "NUMBER": 23,
        "TITLE": "Merge k Sorted Lists",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Merge <i>k</i> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> * ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">mergeKLists</span><span style=\"color: #666666\">(</span>ListNode<span style=\"color: #666666\">[]</span> lists<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>lists <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>ListNode<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;(</span>lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>ListNode<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #AA22FF\">@Override</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>ListNode o1<span style=\"color: #666666\">,</span> ListNode o2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>o1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&lt;</span> o2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>o1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">==</span> o2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        ListNode dummy <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(0);</span>\n        ListNode tail <span style=\"color: #666666\">=</span> dummy<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>ListNode node <span style=\"color: #666666\">:</span> lists<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            tail <span style=\"color: #666666\">=</span> tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dummy<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2, 7, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 337,
        "NUMBER": 25,
        "TITLE": "Reverse Nodes in k-Group",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a linked list, reverse the nodes of a linked list <i>k</i> at a time and return its modified list.\n</p>\n\n    <p>\n        <i>k</i> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <i>k</i> then left-out nodes in the end should remain as it is.</p>\n\n    <p>You may not alter the values in the nodes, only nodes itself may be changed.</p>\n\n    <p>Only constant memory is allowed.</p>\n\n    <p>\n        For example,<br>\n        Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>\n    </p>\n\n    <p>\n        For <i>k</i> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code>\n    </p>\n\n    <p>\n        For <i>k</i> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code>\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverseKGroup</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode begin<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode dummyhead <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ListNode<span style=\"color: #666666\">(-1);</span>\n        ListNode cur <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        dummyhead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">;</span>\n        begin <span style=\"color: #666666\">=</span> dummyhead<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                begin <span style=\"color: #666666\">=</span> reverse<span style=\"color: #666666\">(</span>begin<span style=\"color: #666666\">,</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n                cur <span style=\"color: #666666\">=</span> begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dummyhead<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> ListNode <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span>ListNode begin<span style=\"color: #666666\">,</span> ListNode end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode curr <span style=\"color: #666666\">=</span> begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            ListNode temp <span style=\"color: #666666\">=</span> begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curr<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 338,
        "NUMBER": 30,
        "TITLE": "Substring with Concatenation of All Words",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    You are given a string, <b>s</b>, and a list of words, <b>words</b>, that are all of the same length. Find all starting indices of substring(s) in <b>s</b> that is a concatenation of each word in <b>words</b> exactly once and without any intervening characters.\n</p>\n\n    <p>\n        For example, given:<br>\n        <b>s</b>: <code>\"barfoothefoobarman\"</code><br>\n        <b>words</b>: <code>[\"foo\", \"bar\"]</code>\n    </p>\n\n    <p>\n        You should return the indices: <code>[0,9]</code>.<br>\n        (order does not matter).\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findSubstring</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">(),</span> cnt <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> cnt <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// init word occurence</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> dict <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> cnt<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// travel all sub string combinations</span>\n        <span style=\"color: #B00040\">int</span> wl <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> wl<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">,</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> tdict <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&lt;=</span> n <span style=\"color: #666666\">-</span> wl<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">+=</span> wl<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                String str <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">,</span> j <span style=\"color: #666666\">+</span> wl<span style=\"color: #666666\">);</span>\n                <span style=\"color: #408080; font-style: italic\">// a valid word, accumulate results</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">,</span> tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">))</span>\n                        count<span style=\"color: #666666\">++;</span>\n                    <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #408080; font-style: italic\">// a more word, advance the window left side possiablly</span>\n                        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                            String str1 <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> wl<span style=\"color: #666666\">);</span>\n                            tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>str1<span style=\"color: #666666\">,</span> tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n                            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>str1<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                                count<span style=\"color: #666666\">--;</span>\n                            <span style=\"color: #666666\">}</span>\n                            left <span style=\"color: #666666\">+=</span> wl<span style=\"color: #666666\">;</span>\n                        <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #408080; font-style: italic\">// come to a result</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> cnt<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        ans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">);</span>\n                        <span style=\"color: #408080; font-style: italic\">// advance one word</span>\n                        tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> wl<span style=\"color: #666666\">),</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> wl<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n                        count<span style=\"color: #666666\">--;</span>\n                        left <span style=\"color: #666666\">+=</span> wl<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    tdict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n                    count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                    left <span style=\"color: #666666\">=</span> j <span style=\"color: #666666\">+</span> wl<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 339,
        "NUMBER": 32,
        "TITLE": "Longest Valid Parentheses",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a string containing just the characters <code>'('</code> and <code>')'</code>, find the length of the longest valid (well-formed) parentheses substring.\n</p>\n    <p>\n        For <code>\"(()\"</code>, the longest valid parentheses substring is <code>\"()\"</code>, which has length = 2.\n    </p>\n    <p>\n        Another example is <code>\")()())\"</code>, where the longest valid parentheses substring is <code>\"()()\"</code>, which has length = 4.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Solution with Stack</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestValidParentheses</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> indexStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;)&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n                    res <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    res <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                indexStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    Solution without stack\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestValidParentheses</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> maxlength <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                left<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                right<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                maxlength <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxlength<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">*</span> right<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">&gt;=</span> left<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                left <span style=\"color: #666666\">=</span> right <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        left <span style=\"color: #666666\">=</span> right <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                left<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                right<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                maxlength <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxlength<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">*</span> left<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&gt;=</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                left <span style=\"color: #666666\">=</span> right <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxlength<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 340,
        "NUMBER": 37,
        "TITLE": "Sudoku Solver",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n\n    <p>Empty cells are indicated by the character <code>'.'</code>.</p>\n\n    <p>You may assume that there will be only one unique solution.\n\n    </p><p>\n    <img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"><br>\n</p><p style=\"font-size: 11px\">A sudoku puzzle...</p>\n    <p></p>\n\n    <p>\n        <img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"><br>\n    </p><p style=\"font-size: 11px\">...and its solution numbers marked in red.\n</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">solveSudoku</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        solve<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">solve</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//all cells satisfy the constraints and valid, board is full</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">9)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> nextRow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>col <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">8)</span> <span style=\"color: #666666\">?</span> row <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> row<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> nextCol <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>col <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">8)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> col <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #408080; font-style: italic\">//already filled, fill rest of board and return truw if sol exists</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> solve<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> nextRow<span style=\"color: #666666\">,</span> nextCol<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//if cur char is &#39;.&#39;, try diff numbers and see if sol possible, if doesnt, backtrack</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">9;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">+</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>isValid<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> row<span style=\"color: #666666\">,</span> col<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> solve<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> nextRow<span style=\"color: #666666\">,</span> nextCol<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//none of the above solutions fitted, so set to its initital value</span>\n        board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Method to validate current board</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isValid</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span> cur <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">9;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> cur <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">!=</span> col <span style=\"color: #666666\">||</span> board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> cur <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">!=</span> row<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> bx <span style=\"color: #666666\">=</span> row <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3;</span>\n        <span style=\"color: #B00040\">int</span> by <span style=\"color: #666666\">=</span> col <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> bx <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3;</span> i <span style=\"color: #666666\">&lt;</span> bx <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">3;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> by <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3;</span> j <span style=\"color: #666666\">&lt;</span> by <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">3;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> cur <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!(</span>i <span style=\"color: #666666\">==</span> row <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">==</span> col<span style=\"color: #666666\">))</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 8",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 341,
        "NUMBER": 41,
        "TITLE": "First Missing Positive",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an unsorted integer array, find the first missing positive integer.\n</p>\n\n    <p>\n        For example,<br>\n        Given <code>[1,2,0]</code> return <code>3</code>,<br>\n        and <code>[3,4,-1,1]</code> return <code>2</code>.\n    </p>\n\n    <p>\n        Your algorithm should run in <i>O</i>(<i>n</i>) time and uses constant space.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">firstMissingPositive</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">+1</span> <span style=\"color: #666666\">||</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]-1]</span> <span style=\"color: #666666\">!=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> swap<span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]-1);</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">+1)</span> i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> i<span style=\"color: #666666\">+1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> temp <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 342,
        "NUMBER": 42,
        "TITLE": "Trapping Rain Water",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given <i>n</i> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\n</p>\n\n    <p>\n        For example, <br>\n        Given <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.\n    </p>\n\n    <p>\n        <img src=\"http://www.leetcode.com/static/images/problemset/rainwatertrap.png\"><br>\n    </p><p style=\"font-size: 11px\">The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <b>Thanks Marcos</b> for contributing this image!</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">trap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right <span style=\"color: #666666\">=</span> height<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> left_max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> right_max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Find shorter line to iterate</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> height<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> left_max<span style=\"color: #666666\">)</span>\n                    left_max <span style=\"color: #666666\">=</span> height<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    ans <span style=\"color: #666666\">+=</span> left_max <span style=\"color: #666666\">-</span> height<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">++</span>left<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> right_max<span style=\"color: #666666\">)</span>\n                    right_max <span style=\"color: #666666\">=</span> height<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    ans <span style=\"color: #666666\">+=</span> right_max <span style=\"color: #666666\">-</span> height<span style=\"color: #666666\">[</span>right<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">--</span>right<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 4 ,15",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 343,
        "NUMBER": 44,
        "TITLE": "Wildcard Matching",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code>.</p>\n\n    <pre>'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the <b>entire</b> input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") → false\nisMatch(\"aa\",\"aa\") → true\nisMatch(\"aaa\",\"aa\") → false\nisMatch(\"aa\", \"*\") → true\nisMatch(\"aa\", \"a*\") → true\nisMatch(\"ab\", \"?*\") → true\nisMatch(\"aab\", \"c*a*b\") → false\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// DP solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isMatch</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()+1];</span>\n        dp<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)==</span><span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">)</span>\n            dp<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)!=</span><span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">-1)==</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">||</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">-1)==</span><span style=\"color: #BA2121\">&#39;?&#39;</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">||</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">-1];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()][</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Two pointer solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isMatch</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isMatch</span><span style=\"color: #666666\">(</span>String str<span style=\"color: #666666\">,</span> String pattern<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> s <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> p <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> match <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> starIdx <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">&lt;</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n                <span style=\"color: #408080; font-style: italic\">// advancing both pointers</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span>  <span style=\"color: #666666\">&amp;&amp;</span>\n                        <span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;?&#39;</span> <span style=\"color: #666666\">||</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">))){</span>\n                    s<span style=\"color: #666666\">++;</span>\n                    p<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">){</span>\n                    <span style=\"color: #408080; font-style: italic\">// * found, only advancing pattern pointer</span>\n                    starIdx <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">;</span>\n                    match <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">;</span>\n                    p<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>starIdx <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">-1){</span>\n                    <span style=\"color: #408080; font-style: italic\">// set pattern pointer to after * and advance string pointer</span>\n                    p <span style=\"color: #666666\">=</span> starIdx <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    match<span style=\"color: #666666\">++;</span>\n                    s <span style=\"color: #666666\">=</span> match<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">//check for remaining characters in pattern</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>p <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;*&#39;</span><span style=\"color: #666666\">)</span>\n                p<span style=\"color: #666666\">++;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">return</span> p <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 8, 9, 17",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 344,
        "NUMBER": 45,
        "TITLE": "Jump Game II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n</p>\n    <p>\n        Each element in the array represents your maximum jump length at that position.\n    </p>\n    <p>\n        Your goal is to reach the last index in the minimum number of jumps.\n    </p>\n\n    <p>\n        For example:<br>\n        Given array A = <code>[2,3,1,1,4]</code>\n    </p>\n    <p>\n        The minimum number of jumps to reach the last index is <code>2</code>. (Jump <code>1</code> step from index 0 to 1, then <code>3</code> steps to the last index.)\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        You can assume that you can always reach the last index.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">jump</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> nextMax <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            nextMax <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>nextMax<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                max <span style=\"color: #666666\">=</span> nextMax<span style=\"color: #666666\">;</span>\n                count<span style=\"color: #666666\">++;</span> <span style=\"color: #408080; font-style: italic\">// Only need to more steps when reach the max</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// if there is no way to get to the end, return -1</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max <span style=\"color: #666666\">&gt;=</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">?</span> count <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 17",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 345,
        "NUMBER": 51,
        "TITLE": "N-Queens",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>The <i>n</i>-queens puzzle is the problem of placing <i>n</i> queens on an <i>n</i>×<i>n</i> chessboard such that no two queens attack each other.</p>\n\n    <p>Given an integer <i>n</i>, return all distinct solutions to the <i>n</i>-queens puzzle.</p>\n\n    <p>Each solution contains a distinct board configuration of the <i>n</i>-queens' placement, where <code>'Q'</code> and <code>'.'</code> both indicate a queen and an empty space respectively.</p>\n\n    <p>For example,<br>\n        There exist two distinct solutions to the 4-queens puzzle:</p>\n    <pre>[\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n</pre><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">solveNQueens</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> place <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n        placeQueens<span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">,</span> place<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">placeQueens</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> place<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> level<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>level <span style=\"color: #666666\">==</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>shape<span style=\"color: #666666\">(</span>place<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>canplace<span style=\"color: #666666\">(</span>level<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> place<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                place<span style=\"color: #666666\">[</span>level<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                placeQueens<span style=\"color: #666666\">(</span>re<span style=\"color: #666666\">,</span> place<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">,</span> level <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                place<span style=\"color: #666666\">[</span>level<span style=\"color: #666666\">][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canplace</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> place<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>place<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> m <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> m<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>m <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> place<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">shape</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> p<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> strs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            StringBuilder temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;.&quot;</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;Q&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            strs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> strs<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 346,
        "NUMBER": 52,
        "TITLE": "N-Queens II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "Follow up for N-Queens problem.\n<br>\nNow, instead outputting board configurations, return the total number of distinct solutions.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">totalNQueens</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">&lt;=0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> place <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[1];</span>\n\n        placeQueens<span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">,</span>place<span style=\"color: #666666\">,</span>n<span style=\"color: #666666\">,0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">[0];</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">placeQueens</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> place<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> level<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>level <span style=\"color: #666666\">==</span> n<span style=\"color: #666666\">){</span>\n            count<span style=\"color: #666666\">[0]++;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>canplace<span style=\"color: #666666\">(</span>level<span style=\"color: #666666\">,</span>place<span style=\"color: #666666\">,</span>i<span style=\"color: #666666\">)){</span>\n                place<span style=\"color: #666666\">[</span>level<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                placeQueens<span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">,</span>place<span style=\"color: #666666\">,</span>n<span style=\"color: #666666\">,</span>level<span style=\"color: #666666\">+1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canplace</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> place<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=0;</span> j<span style=\"color: #666666\">&lt;</span>i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>place<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]==</span>n<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">-</span>place<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">==</span> i<span style=\"color: #666666\">-</span>j<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 347,
        "NUMBER": 57,
        "TITLE": "Insert Interval",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a set of <i>non-overlapping</i> intervals, insert a new interval into the intervals (merge if necessary).</p>\n\n    <p>You may assume that the intervals were initially sorted according to their start times.</p>\n\n    <p>\n        <b>Example 1:</b><br>\n        Given intervals <code>[1,3],[6,9]</code>, insert and merge <code>[2,5]</code> in as <code>[1,5],[6,9]</code>.\n    </p>\n\n    <p>\n        <b>Example 2:</b><br>\n        Given <code>[1,2],[3,5],[6,7],[8,10],[12,16]</code>, insert and merge <code>[4,9]</code> in as <code>[1,2],[3,10],[12,16]</code>.\n    </p>\n\n    <p>\n        This is because the new interval <code>[4,9]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for an interval.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class Interval {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int start;</span>\n<span style=\"color: #408080; font-style: italic\"> *     int end;</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval() { start = 0; end = 0; }</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval(int s, int e) { start = s; end = e; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">insert</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> intervals<span style=\"color: #666666\">,</span> Interval newInterval<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Interval interval<span style=\"color: #666666\">:</span> intervals<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// new interval is behind cur interval</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">&lt;</span> newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">){</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">&gt;</span> newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// cur interval is behind new interval</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>newInterval<span style=\"color: #666666\">);</span>\n                newInterval <span style=\"color: #666666\">=</span> interval<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">&gt;=</span> newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">||</span> interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">&lt;=</span> newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// merge the current interval with new interval as new interval</span>\n                newInterval <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Interval<span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">,</span> newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">),</span>\n                        Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>newInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">,</span> interval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>newInterval<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 13",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 348,
        "NUMBER": 65,
        "TITLE": "Valid Number",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Validate if a given string is numeric.</p>\n\n    <p>\n        Some examples:<br>\n        <code>\"0\"</code> =&gt; <code>true</code><br>\n        <code>\"   0.1  \"</code> =&gt; <code>true</code><br>\n        <code>\"abc\"</code> =&gt; <code>false</code><br>\n        <code>\"1 a\"</code> =&gt; <code>false</code><br>\n        <code>\"2e10\"</code> =&gt; <code>true</code><br>\n    </p>\n\n    <p><b>Note:</b> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n    </p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isNumber</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        s <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">boolean</span> hasdot <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> hase <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> hasnum <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// deal with &quot;+&quot; and &quot;-&quot;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">)</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// start validation</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// deal with &#39;.&#39;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;.&#39;</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>hasdot<span style=\"color: #666666\">)</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                hasdot <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;e&#39;</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">//different invalid casse: e34, 34ee, 34e+</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>hasnum <span style=\"color: #666666\">||</span> hase <span style=\"color: #666666\">||</span> i <span style=\"color: #666666\">==</span> len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span>\n                        <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1)==</span><span style=\"color: #BA2121\">&#39;+&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1)==</span><span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">))){</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span><span style=\"color: #666666\">)</span>\n                    i<span style=\"color: #666666\">++;</span>\n                hase <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                hasdot <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// after &quot;e&quot; we cannot have any &quot;.&quot;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">){</span>\n                hasnum <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> hasnum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 349,
        "NUMBER": 68,
        "TITLE": "Text Justification",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given an array of words and a length <i>L</i>, format the text such that each line has exactly <i>L</i> characters and is fully (left and right) justified.\n</p>\n\n    <p>\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>' '</code> when necessary so that each line has exactly <i>L</i> characters.\n    </p>\n\n    <p>\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n    </p>\n\n    <p>\n        For the last line of text, it should be left justified and no extra space is inserted between words.\n    </p>\n\n    <p>\n        For example,<br>\n        <b>words</b>: <code>[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]</code><br>\n        <b>L</b>: <code>16</code>.\n    </p>\n\n    <p>\n        Return the formatted lines as:<br>\n    </p><pre>[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b> Each word is guaranteed not to exceed <i>L</i> in length.\n    </p>\n\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show corner cases.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><b>Corner Cases:</b>\n        <p>\n        </p><ul>\n            <li>A line other than the last line might contain only one word. What should you do in this case?<br>\n                In this case, that line should be left-justified.</li>\n            <p></p>\n        </ul></div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">fullJustify</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> maxWidth<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            len <span style=\"color: #666666\">+=</span> words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;=</span> maxWidth<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                i<span style=\"color: #666666\">++;</span>\n                count<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            fillString<span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">,</span> count<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">,</span> maxWidth<span style=\"color: #666666\">);</span>\n            len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        fillString<span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">,</span> count<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> count<span style=\"color: #666666\">,</span> maxWidth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">fillString</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> count<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> maxWidth<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>maxWidth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> totalspace <span style=\"color: #666666\">=</span> maxWidth<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> start <span style=\"color: #666666\">+</span> count<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            totalspace <span style=\"color: #666666\">-=</span> words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Only one word in this line or last line</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> start <span style=\"color: #666666\">+</span> count <span style=\"color: #666666\">==</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> start <span style=\"color: #666666\">+</span> count<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>totalspace <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n                    totalspace<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>totalspace <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n                totalspace<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> extraspacelen <span style=\"color: #666666\">=</span> totalspace <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        StringBuilder evenSpaces <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>totalspace <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> totalspace <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span> i<span style=\"color: #666666\">++)</span>\n            evenSpaces<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> start <span style=\"color: #666666\">+</span> count <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>evenSpaces<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>extraspacelen <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n                extraspacelen<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>start <span style=\"color: #666666\">+</span> count <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 350,
        "NUMBER": 72,
        "TITLE": "Edit Distance",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to convert <i>word1</i> to <i>word2</i>. (each operation is counted as 1 step.)\n</p>\n\n    <p>\n        You have the following 3 operations permitted on a word:\n    </p>\n\n    <p>\n        a) Insert a character<br>\n        b) Delete a character<br>\n        c) Replace a character<br>\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minDistance</span><span style=\"color: #666666\">(</span>String word1<span style=\"color: #666666\">,</span> String word2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> len1 <span style=\"color: #666666\">=</span> word1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> len2 <span style=\"color: #666666\">=</span> word2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len1 <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> len2 <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len2 <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> len1 <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> mat <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>len1<span style=\"color: #666666\">][</span>len2<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> len2<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            mat<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> len1<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            mat<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> len1<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> len2<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                mat<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> word1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> word2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">?</span> mat<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">:</span>\n                        Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>mat<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>mat<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">],</span> mat<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]))</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> mat<span style=\"color: #666666\">[</span>len1 <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>len2 <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 351,
        "NUMBER": 76,
        "TITLE": "Minimum Window Substring",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n</p>\n\n    <p>\n        For example,<br>\n        <b>S</b> = <code>\"ADOBECODEBANC\"</code><br>\n        <b>T</b> = <code>\"ABC\"</code><br>\n    </p>\n    <p>\n        Minimum window is <code>\"BANC\"</code>.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        If there is no such window in S that covers all characters in T, return the empty string <code>\"\"</code>.\n    </p>\n    <p>\n        If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">minWindow</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String result <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[256];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> window <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[256];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)]++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> minLength <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> letterCounter <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> slow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> fast <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> fast <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> fast<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&lt;=</span> map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)])</span> <span style=\"color: #666666\">{</span>\n                    letterCounter<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>letterCounter <span style=\"color: #666666\">&gt;=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&gt;</span> map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)])</span> <span style=\"color: #666666\">{</span>\n                    window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]--;</span>\n                    slow<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>fast <span style=\"color: #666666\">-</span> slow <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> minLength<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    minLength <span style=\"color: #666666\">=</span> fast <span style=\"color: #666666\">-</span> slow <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    result <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">,</span> slow <span style=\"color: #666666\">+</span> minLength<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 5",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 352,
        "NUMBER": 84,
        "TITLE": "Largest Rectangle in Histogram",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given <i>n</i> non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n</p>\n\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/histogram.png\"><br>\n    </p><p style=\"font-size: 11px\">Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p>\n    <p></p>\n\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/histogram_area.png\"><br>\n    </p><p style=\"font-size: 11px\">The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p>\n    <p></p>\n\n    <p>\n        For example,<br>\n        Given heights = <code>[2,1,5,6,2,3]</code>,<br>\n        return <code>10</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">largestRectangleArea</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> heights<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>heights <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> heights<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> heights<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">//push index to stack when the current height is larger than the previous one</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> heights<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> heights<span style=\"color: #666666\">[</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()])</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">//calculate max value when the current height is less than the previous one</span>\n                <span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> heights<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">]*(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">?</span> i <span style=\"color: #666666\">:</span> i <span style=\"color: #666666\">-</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> p <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> heights<span style=\"color: #666666\">[</span>p<span style=\"color: #666666\">]*(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">?</span> i <span style=\"color: #666666\">:</span> i <span style=\"color: #666666\">-</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 15",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 353,
        "NUMBER": 85,
        "TITLE": "Maximal Rectangle",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n</p>\n\n    <p>For example, given the following matrix:\n    </p><pre>1 0 1 0 0\n1 0 <font color=\"red\">1</font> <font color=\"red\">1</font> <font color=\"red\">1</font>\n1 1 <font color=\"red\">1</font> <font color=\"red\">1</font> <font color=\"red\">1</font>\n1 0 0 1 0\n</pre>\n    Return 6.\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// This problem can be converted to the &quot;Largest Rectangle in Histogram&quot; problem.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maximalRectangle</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> height <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n\n        <span style=\"color: #B00040\">int</span> maxArea <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    height<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    height<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> height<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> area <span style=\"color: #666666\">=</span> maxAreaInHist<span style=\"color: #666666\">(</span>height<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>area <span style=\"color: #666666\">&gt;</span> maxArea<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                maxArea <span style=\"color: #666666\">=</span> area<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxArea<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxAreaInHist</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> height<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> height<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> height<span style=\"color: #666666\">[</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()]</span> <span style=\"color: #666666\">&lt;=</span> height<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">++);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> t <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> height<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">]*(</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">?</span> i <span style=\"color: #666666\">:</span> i <span style=\"color: #666666\">-</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 1, 9, 15",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 354,
        "NUMBER": 87,
        "TITLE": "Scramble String",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string <i>s1</i>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\n</p>\n    <p>\n        Below is one possible representation of <i>s1</i> = <code>\"great\"</code>:\n    </p>\n    <pre>    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre>\n    <p>\n        To scramble the string, we may choose any non-leaf node and swap its two children.\n    </p>\n    <p>\n        For example, if we choose the node <code>\"gr\"</code> and swap its two children, it produces a scrambled string <code>\"rgeat\"</code>.\n    </p>\n    <pre>    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre>\n    <p>\n        We say that <code>\"rgeat\"</code> is a scrambled string of <code>\"great\"</code>.\n    </p>\n    <p>\n        Similarly, if we continue to swap the children of nodes <code>\"eat\"</code> and <code>\"at\"</code>, it produces a scrambled string <code>\"rgtae\"</code>.\n    </p>\n    <pre>    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre>\n    <p>\n        We say that <code>\"rgtae\"</code> is a scrambled string of <code>\"great\"</code>.\n    </p>\n    <p>\n        Given two strings <i>s1</i> and <i>s2</i> of the same length, determine if <i>s2</i> is a scrambled string of <i>s1</i>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/*************</span>\n<span style=\"color: #408080; font-style: italic\">     * memo[i][j][k] means state: for s1.substring(i, i + k) and s2.substring(j, j + k), if they are scramble string</span>\n<span style=\"color: #408080; font-style: italic\">     * Two conditions we can regard as scramble, for range of word1(i -&gt; i+k) or word2(j -&gt; j+k):</span>\n<span style=\"color: #408080; font-style: italic\">     * i -&gt; i + split = j -&gt; j + split (len = split) and split + i -&gt; i + k = split + i -&gt; j + k (len = k - split)</span>\n<span style=\"color: #408080; font-style: italic\">     * i -&gt; i + split = j + (k - split) -&gt; j+k [len = split] and i + split -&gt; i+k = j -&gt; j + (k - split)(len = k - split)</span>\n<span style=\"color: #408080; font-style: italic\">     * Consider about the initialization:</span>\n<span style=\"color: #408080; font-style: italic\">     * for k == 1, we only check if word1[i] == word2[j]</span>\n<span style=\"color: #408080; font-style: italic\">     ***********/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isScramble</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// check length</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s1 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s2 <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// check anagram</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> c1 <span style=\"color: #666666\">=</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> c2 <span style=\"color: #666666\">=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>c1<span style=\"color: #666666\">);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>c2<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>c1<span style=\"color: #666666\">,</span> c2<span style=\"color: #666666\">))</span>  <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">// state: for s1.substring(i, i + k) and s2.substring(j, j + k), if they are scramble string</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][][]</span> memo <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>len<span style=\"color: #666666\">][</span>len<span style=\"color: #666666\">][</span>len<span style=\"color: #666666\">+1];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// initial, only check if s1[i] == s2[j]</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span>\n                memo<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">][1]</span> <span style=\"color: #666666\">=</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> k <span style=\"color: #666666\">&lt;=</span> len<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> len <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;=</span> len <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// split point should start from 1 to k - 1</span>\n                    <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> split <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> split <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">;</span> split<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                        memo<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">][</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> memo<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">][</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">||</span>\n                                <span style=\"color: #666666\">(</span>memo<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">][</span>split<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> memo<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> split<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">+</span> split<span style=\"color: #666666\">][</span>k <span style=\"color: #666666\">-</span> split<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">||</span>\n                                <span style=\"color: #666666\">(</span>memo<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> split<span style=\"color: #666666\">)][</span>split<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&amp;&amp;</span> memo<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> split<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">][</span>k <span style=\"color: #666666\">-</span> split<span style=\"color: #666666\">]);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> memo<span style=\"color: #666666\">[0][0][</span>len<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 355,
        "NUMBER": 97,
        "TITLE": "Interleaving String",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given <i>s1</i>, <i>s2</i>, <i>s3</i>, find whether <i>s3</i> is formed by the interleaving of <i>s1</i> and <i>s2</i>.\n</p>\n\n    <p>\n        For example,<br>\n        Given:<br>\n        <i>s1</i> = <code>\"aabcc\"</code>,<br>\n        <i>s2</i> = <code>\"dbbca\"</code>,\n    </p>\n    <p>\n        When <i>s3</i> = <code>\"aadbbcbcac\"</code>, return true.<br>\n        When <i>s3</i> = <code>\"aadbbbaccc\"</code>, return false.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * Match[i][j]  =   (s3.lastChar == s1.lastChar) &amp;&amp; Match[i-1][j] || (s3.lastChar == s2.lastChar) &amp;&amp; Match[i][j-1]</span>\n<span style=\"color: #408080; font-style: italic\">     * Initial Condition：</span>\n<span style=\"color: #408080; font-style: italic\">     *    i=0 &amp;&amp; j=0，Match[0][0] = true;</span>\n<span style=\"color: #408080; font-style: italic\">     *    i=0， s3[j] = s2[j], Match[0][j] |= Match[0][j-1]</span>\n<span style=\"color: #408080; font-style: italic\">     *           s3[j] != s2[j], Match[0][j] = false;</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     *   j=0， s3[i] = s1[i], Match[i][0] |= Match[i-1][0]</span>\n<span style=\"color: #408080; font-style: italic\">     *          s3[i] != s1[i], Match[i][0] = false;</span>\n<span style=\"color: #408080; font-style: italic\">     *******************/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isInterleave</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">,</span> String s3<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> l1 <span style=\"color: #666666\">=</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">(),</span> l2 <span style=\"color: #666666\">=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">(),</span> l3 <span style=\"color: #666666\">=</span> s3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">+</span> l2 <span style=\"color: #666666\">!=</span> l3<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dptable <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>l2 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>l1 <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #408080; font-style: italic\">// Initial condition 1</span>\n        dptable<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #408080; font-style: italic\">// Initial condition 2</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> l1<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dptable<span style=\"color: #666666\">[0][</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> s3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l3 <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">))</span>\n                dptable<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                dptable<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Initial condition 3</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> l2<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dptable<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> s3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l3 <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l2 <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">))</span>\n                dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> l2<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;=</span> l1<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dptable<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                    dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dptable<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l3 <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l2 <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                        <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l3 <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n                        <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span>\n                    dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> dptable<span style=\"color: #666666\">[</span>l2<span style=\"color: #666666\">][</span>l1<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">true</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 356,
        "NUMBER": 99,
        "TITLE": "Recover Binary Search Tree",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Two elements of a binary search tree (BST) are swapped by mistake.</p>\n\n    <p>Recover the tree without changing its structure.\n    </p>\n\n    <b>Note:</b><br>\n    A solution using O(<i>n</i>) space is pretty straight forward. Could you devise a constant space solution?\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for binary tree</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">recoverTree</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TreeNode pre <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        TreeNode first <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> second <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Morris Traversal</span>\n        TreeNode temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// connect threading for root</span>\n                temp <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> root<span style=\"color: #666666\">)</span>\n                    temp <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// the threading already exists</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pre<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">){</span>\n                        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>first<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>first <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>second <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;}</span>\n                        <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>second <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;}</span>\n                    <span style=\"color: #666666\">}</span>\n                    pre <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// construct the threading</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>pre<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">&gt;</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">){</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>first<span style=\"color: #666666\">==</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>first <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>second <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;}</span>\n                    <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>second <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;}</span>\n                <span style=\"color: #666666\">}</span>\n                pre <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// swap two node values;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>first<span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> second <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> t <span style=\"color: #666666\">=</span> first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            first<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n            second<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 357,
        "NUMBER": 115,
        "TITLE": "Distinct Subsequences",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string <b>S</b> and a string <b>T</b>, count the number of distinct subsequences of <b>S</b> which equals <b>T</b>.\n</p>\n\n    <p>\n        A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ACE\"</code> is a subsequence of <code>\"ABCDE\"</code> while <code>\"AEC\"</code> is not).\n    </p>\n\n    <p>\n        Here is an example:<br>\n        <b>S</b> = <code>\"rabbbit\"</code>, <b>T</b> = <code>\"rabbit\"</code>\n    </p>\n    <p>\n        Return <code>3</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numDistinct</span><span style=\"color: #666666\">(</span>String S<span style=\"color: #666666\">,</span> String T<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> si <span style=\"color: #666666\">=</span> S<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">(),</span> ti <span style=\"color: #666666\">=</span> T<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>si <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> ti <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> si <span style=\"color: #666666\">&lt;</span> ti<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dptable <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>si<span style=\"color: #666666\">][</span>ti<span style=\"color: #666666\">];</span>\n        dptable<span style=\"color: #666666\">[0][0]</span> <span style=\"color: #666666\">=</span> S<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> T<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> ti<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> si<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>S<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> T<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    dptable<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> dptable<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dptable<span style=\"color: #666666\">[</span>si <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>ti <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5, 9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 358,
        "NUMBER": 123,
        "TITLE": "Best Time to Buy and Sell Stock III",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\n\n    <p>Design an algorithm to find the maximum profit. You may complete at most <i>two</i> transactions.</p>\n\n    <p><b>Note:</b><br>\n        You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prices <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//highest profit in 0 ... i</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> left <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> right <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// DP from left to right</span>\n        left<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            left<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> min<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// DP from right to left</span>\n        right<span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            right<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1],</span> max <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> profit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            profit <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>profit<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> right<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> profit<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 359,
        "NUMBER": 124,
        "TITLE": "Binary Tree Maximum Path Sum",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a binary tree, find the maximum path sum.\n</p>\n\n    <p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <b>at least one node</b> and does not need to go through the root.</p>\n\n    <p>\n        For example:<br>\n        Given the below binary tree,\n    </p><pre>       1\n      / \\\n     2   3\n</pre>\n    <p></p>\n    <p>\n        Return <code>6</code>.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxPathSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> max<span style=\"color: #666666\">[]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[1];</span>\n        max<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        calculateSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max<span style=\"color: #666666\">[0];</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">calculateSum</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> calculateSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> calculateSum<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #B00040\">int</span> current <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> left<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> right<span style=\"color: #666666\">));</span>\n        max<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">[0],</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>current<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> right<span style=\"color: #666666\">));</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> current<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 14",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 360,
        "NUMBER": 126,
        "TITLE": "Word Ladder II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given two words (<i>beginWord</i> and <i>endWord</i>), and a dictionary's word list, find all shortest transformation sequence(s) from <i>beginWord</i> to <i>endWord</i>, such that:\n</p>\n    <ol>\n        <li>Only one letter can be changed at a time</li>\n        <li>Each transformed word must exist in the word list. Note that <i>beginWord</i> is <i>not</i> a transformed word.</li>\n    </ol>\n\n    <p>\n        For example,\n    </p>\n    <p>\n        Given:<br>\n        <i>beginWord</i> = <code>\"hit\"</code><br>\n        <i>endWord</i> = <code>\"cog\"</code><br>\n        <i>wordList</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]</code><br>\n    </p>\n    <p>\n        Return<br>\n    </p><pre>  [\n    [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n    [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n  ]\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b><br>\n    </p><ul>\n    <li>Return an empty list if there is no such transformation sequence.</li>\n    <li>All words have the same length.</li>\n    <li>All words contain only lowercase alphabetic characters.</li>\n    <li>You may assume no duplicates in the word list.</li>\n    <li>You may assume <i>beginWord</i> and <i>endWord</i> are non-empty and are not the same.</li>\n</ul>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">WordNode</span> <span style=\"color: #666666\">{</span>\n        String word<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> numSteps<span style=\"color: #666666\">;</span>\n        WordNode pre<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">WordNode</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> numSteps<span style=\"color: #666666\">,</span> WordNode pre<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">numSteps</span> <span style=\"color: #666666\">=</span> numSteps<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Single direction BFS</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">findLadders</span><span style=\"color: #666666\">(</span>String beginWord<span style=\"color: #666666\">,</span> String endWord<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> wordList<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        LinkedList<span style=\"color: #666666\">&lt;</span>WordNode<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> WordNode<span style=\"color: #666666\">(</span>beginWord<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">));</span>\n        <span style=\"color: #B00040\">int</span> minStep <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        HashSet<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        HashSet<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> unvisited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        unvisited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>wordList<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> preNumSteps <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            WordNode top <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">();</span>\n            String word <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> currNumSteps <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">numSteps</span><span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>endWord<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>minStep <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    minStep <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">numSteps</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">numSteps</span> <span style=\"color: #666666\">==</span> minStep <span style=\"color: #666666\">&amp;&amp;</span> minStep <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> t <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n                    t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">);</span>\n                        top <span style=\"color: #666666\">=</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// The used word is only removed when steps change.</span>\n            <span style=\"color: #408080; font-style: italic\">// Start of the next level</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>preNumSteps <span style=\"color: #666666\">&lt;</span> currNumSteps<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                unvisited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeAll</span><span style=\"color: #666666\">(</span>visited<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            preNumSteps <span style=\"color: #666666\">=</span> currNumSteps<span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span> c <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;z&#39;</span><span style=\"color: #666666\">;</span> c<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">char</span> temp <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n\n                    String newWord <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>unvisited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> WordNode<span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">,</span> top<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">numSteps</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> top<span style=\"color: #666666\">));</span>\n                        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>newWord<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                    arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Bi-direction BFS</span>\n    <span style=\"color: #408080; font-style: italic\">//flag of whether we have connected two parts</span>\n    <span style=\"color: #B00040\">boolean</span> isConnected <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">findLadders</span><span style=\"color: #666666\">(</span>String beginWord<span style=\"color: #666666\">,</span> String endWord<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> wordList<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">//we use bi-directional BFS to find shortest path</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> fwd <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        fwd<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>beginWord<span style=\"color: #666666\">);</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> bwd <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        bwd<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>endWord<span style=\"color: #666666\">);</span>\n\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> hs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        BFS<span style=\"color: #666666\">(</span>fwd<span style=\"color: #666666\">,</span> bwd<span style=\"color: #666666\">,</span> wordList<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">,</span> hs<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">//if two parts cannot be connected, then return empty list</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>isConnected<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">//we need to add start node to temp list as there is no other node can get start node</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>beginWord<span style=\"color: #666666\">);</span>\n\n        DFS<span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">,</span> temp<span style=\"color: #666666\">,</span> beginWord<span style=\"color: #666666\">,</span> endWord<span style=\"color: #666666\">,</span> hs<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">BFS</span><span style=\"color: #666666\">(</span>Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> forward<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> backward<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> dict<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">boolean</span> swap<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> hs<span style=\"color: #666666\">){</span>\n        <span style=\"color: #408080; font-style: italic\">//boundary check</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>forward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> backward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//we always do BFS on direction with less nodes</span>\n        <span style=\"color: #408080; font-style: italic\">//here we assume forward set has less nodes, if not, we swap them</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>forward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> backward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()){</span>\n            BFS<span style=\"color: #666666\">(</span>backward<span style=\"color: #666666\">,</span> forward<span style=\"color: #666666\">,</span> dict<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">!</span>swap<span style=\"color: #666666\">,</span> hs<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//remove all forward/backward words from dict to avoid duplicate addition</span>\n        dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeAll</span><span style=\"color: #666666\">(</span>forward<span style=\"color: #666666\">);</span>\n        dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">removeAll</span><span style=\"color: #666666\">(</span>backward<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">//new set contains all new nodes from forward set</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> set3 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n\n        <span style=\"color: #408080; font-style: italic\">//do BFS on every node of forward direction</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String str <span style=\"color: #666666\">:</span> forward<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">//try to change each char of str</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n                <span style=\"color: #408080; font-style: italic\">//try to replace current char with every chars from a to z</span>\n                <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> ary <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #BA2121\">&#39;z&#39;</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++){</span>\n                    ary<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> j<span style=\"color: #666666\">;</span>\n                    String temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>ary<span style=\"color: #666666\">);</span>\n\n                    <span style=\"color: #408080; font-style: italic\">//we skip this string if it is not in dict nor in backward</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>backward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">)){</span>\n                        <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n\n                    <span style=\"color: #408080; font-style: italic\">//we follow forward direction</span>\n                    String key <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">!</span>swap<span style=\"color: #666666\">?</span> str <span style=\"color: #666666\">:</span> temp<span style=\"color: #666666\">;</span>\n                    String val <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">!</span>swap<span style=\"color: #666666\">?</span> temp <span style=\"color: #666666\">:</span> str<span style=\"color: #666666\">;</span>\n\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span>\n                        hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;());</span>\n                    <span style=\"color: #408080; font-style: italic\">//if temp string is in backward set, then it will connect two parts</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>backward<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">)){</span>\n                        hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n                        isConnected <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n\n                    <span style=\"color: #408080; font-style: italic\">//if temp is in dict, then we can add it to set3 as new nodes in next layer</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>isConnected <span style=\"color: #666666\">&amp;&amp;</span> dict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">)){</span>\n                        hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n                        set3<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//to force our path to be shortest, we will not do BFS if we have found shortest path(isConnected = true)</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>isConnected<span style=\"color: #666666\">){</span>\n            BFS<span style=\"color: #666666\">(</span>set3<span style=\"color: #666666\">,</span> backward<span style=\"color: #666666\">,</span> dict<span style=\"color: #666666\">,</span> swap<span style=\"color: #666666\">,</span> hs<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">DFS</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> result<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> temp<span style=\"color: #666666\">,</span> String start<span style=\"color: #666666\">,</span> String end<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;&gt;</span> hs<span style=\"color: #666666\">){</span>\n        <span style=\"color: #408080; font-style: italic\">//we will use DFS, more specifically backtracking to build paths</span>\n        <span style=\"color: #408080; font-style: italic\">//boundary case</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">)){</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;(</span>temp<span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//not each node in hs is valid node in shortest path, if we found current node does not have children node,</span>\n        <span style=\"color: #408080; font-style: italic\">//then it means it is not in shortest path</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">)){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>String s <span style=\"color: #666666\">:</span> hs<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">)){</span>\n            temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">);</span>\n            DFS<span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">,</span> temp<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">,</span> hs<span style=\"color: #666666\">);</span>\n            temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()-1);</span>\n\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 5, 14, 19",
        "COMPANIES": "0",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 361,
        "NUMBER": 128,
        "TITLE": "Longest Consecutive Sequence",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\n</p>\n    <p>\n        For example,<br>\n        Given <code>[100, 4, 200, 1, 3, 2]</code>,<br>\n        The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Return its length: <code>4</code>.\n    </p>\n    <p>\n        Your algorithm should run in O(<i>n</i>) complexity.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     *  Use a map to store ranges</span>\n<span style=\"color: #408080; font-style: italic\">     *  Get lower bound with smaller value</span>\n<span style=\"color: #408080; font-style: italic\">     *  Get upper bound with larger value</span>\n<span style=\"color: #408080; font-style: italic\">     *  Update max length with new bound</span>\n<span style=\"color: #408080; font-style: italic\">     *  Put all possible ranges into map</span>\n<span style=\"color: #408080; font-style: italic\">     *  1. num, num</span>\n<span style=\"color: #408080; font-style: italic\">     *  2. low, upp</span>\n<span style=\"color: #408080; font-style: italic\">     *  3. upp, low</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestConsecutive</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> rangeMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> maxLen <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// Ignore duplicates</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> low <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> upp <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1))</span>\n                low <span style=\"color: #666666\">=</span> rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1))</span>\n                upp <span style=\"color: #666666\">=</span> rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            maxLen <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxLen<span style=\"color: #666666\">,</span> upp <span style=\"color: #666666\">-</span> low <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #408080; font-style: italic\">// All possible ranges</span>\n            rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">);</span>\n            rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>low<span style=\"color: #666666\">,</span> upp<span style=\"color: #666666\">);</span>\n            rangeMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>upp<span style=\"color: #666666\">,</span> low<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxLen<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 16",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 362,
        "NUMBER": 132,
        "TITLE": "Palindrome Partitioning II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\n</p>\n    <p>\n        Return the minimum cuts needed for a palindrome partitioning of <i>s</i>.\n    </p>\n    <p>\n        For example, given <i>s</i> = <code>\"aab\"</code>,<br>\n        Return <code>1</code> since the palindrome partitioning <code>[\"aa\",\"b\"]</code> could be produced using 1 cut.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minCut</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">boolean</span> dp<span style=\"color: #666666\">[][]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> cut<span style=\"color: #666666\">[]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            cut<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> j<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">//set maximum # of cut</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> j<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]))</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// if [0...j] is palindrome, no need to cut</span>\n                <span style=\"color: #408080; font-style: italic\">// else need to cut, add 1 to the previous cut[i-1]</span>\n                cut<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>cut<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">],</span> cut<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cut<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 363,
        "NUMBER": 135,
        "TITLE": "Candy",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    There are <i>N</i> children standing in a line. Each child is assigned a rating value.\n</p>\n    <p>\n        You are giving candies to these children subjected to the following requirements:\n    </p>\n    <ul>\n        <li>Each child must have at least one candy.</li>\n        <li>Children with a higher rating get more candies than their neighbors.</li>\n    </ul>\n    <p>\n        What is the minimum candies you must give?\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">candy</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ratings<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candys <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">// Each person get one</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>candys<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #408080; font-style: italic\">// This ensure the right advanced child has more candy than child on left</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>ratings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> ratings<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                candys<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> candys<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// This ensure the advanced child on the right has more than child on right</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>ratings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> ratings<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">&amp;&amp;</span> candys<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> candys<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                candys<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> candys<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> candys<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            n <span style=\"color: #666666\">+=</span> candys<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// One pass and constant space</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">candy</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ratings<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> candies <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> up <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> down <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> old_slope <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> ratings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> new_slope <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>ratings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> ratings<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">(</span>ratings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> ratings<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>old_slope <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> new_slope <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>old_slope <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> new_slope <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0))</span> <span style=\"color: #666666\">{</span>\n                candies <span style=\"color: #666666\">+=</span> count<span style=\"color: #666666\">(</span>up<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> count<span style=\"color: #666666\">(</span>down<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>up<span style=\"color: #666666\">,</span> down<span style=\"color: #666666\">);</span>\n                up <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                down <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>new_slope <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n                up<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>new_slope <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span>\n                down<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>new_slope <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n                candies<span style=\"color: #666666\">++;</span>\n\n            old_slope <span style=\"color: #666666\">=</span> new_slope<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        candies <span style=\"color: #666666\">+=</span> count<span style=\"color: #666666\">(</span>up<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> count<span style=\"color: #666666\">(</span>down<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>up<span style=\"color: #666666\">,</span> down<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> candies<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">count</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1))</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 364,
        "NUMBER": 140,
        "TITLE": "Word Break II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a <b>non-empty</b> string <i>s</i> and a dictionary <i>wordDict</i> containing a list of <b>non-empty</b> words, add spaces in <i>s</i> to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.\n</p>\n\n    <p>\n        Return all such possible sentences.\n    </p>\n\n    <p>\n        For example, given<br>\n        <i>s</i> = <code>\"catsanddog\"</code>,<br>\n        <i>dict</i> = <code>[\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]</code>.\n    </p>\n\n    <p>\n        A solution is <code>[\"cats and dog\", \"cat sand dog\"]</code>.\n    </p>\n\n    <p>\n        <b><font color=\"red\">UPDATE (2017/1/4):</font></b><br>\n        The <i>wordDict</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// http://www.programcreek.com/2014/03/leetcode-word-break-ii-java/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">wordBreak</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> wordDict<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;[]</span> pos <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        pos<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">// Construct a graph for positions with related words</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pos<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                String sub <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>wordDict<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>sub<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pos<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    pos<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n                <span style=\"color: #666666\">}</span>\n                pos<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>sub<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pos<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            dfs<span style=\"color: #666666\">(</span>pos<span style=\"color: #666666\">,</span> result<span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">dfs</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;[]</span> pos<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> result<span style=\"color: #666666\">,</span> String curr<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> curInd<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>curInd <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String s <span style=\"color: #666666\">:</span> pos<span style=\"color: #666666\">[</span>curInd<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n            String combined <span style=\"color: #666666\">=</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> curr<span style=\"color: #666666\">;</span>\n            dfs<span style=\"color: #666666\">(</span>pos<span style=\"color: #666666\">,</span> result<span style=\"color: #666666\">,</span> combined<span style=\"color: #666666\">,</span> curInd <span style=\"color: #666666\">-</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 365,
        "NUMBER": 145,
        "TITLE": "Binary Tree Postorder Traversal",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>postorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>{1,#,2,3}</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[3,2,1]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">postorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>postorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>postorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">postorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> parentStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        TreeNode lastnodevisited <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">,</span> peekNode<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                peekNode <span style=\"color: #666666\">=</span> parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #408080; font-style: italic\">// If right child exists AND traversing node from left child, move right</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> lastnodevisited <span style=\"color: #666666\">!=</span> peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    root <span style=\"color: #666666\">=</span> peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    lastnodevisited <span style=\"color: #666666\">=</span> peekNode<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 366,
        "NUMBER": 146,
        "TITLE": "LRU Cache",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.\n</p>\n\n    <p>\n        <code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\n        <code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\n    </p>\n\n    <p><b>Follow up:</b><br>\n        Could you do both operations in <b>O(1)</b> time complexity?</p>\n\n    <p><b>Example:</b>\n    </p><pre>LRUCache cache = new LRUCache( 2 /* capacity */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.put(4, 4);    // evicts key 1\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">LRUCache</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">DoubleLinkedListNode</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">,</span> key<span style=\"color: #666666\">;</span>\n        DoubleLinkedListNode pre<span style=\"color: #666666\">,</span> post<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">DoubleLinkedListNode</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> value<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> value<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">key</span> <span style=\"color: #666666\">=</span> key<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> LRUCache<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">DoubleLinkedListNode</span><span style=\"color: #666666\">&gt;</span> table<span style=\"color: #666666\">;</span>\n    DoubleLinkedListNode head<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">;</span>\n    <span style=\"color: #B00040\">int</span> capacity<span style=\"color: #666666\">,</span> len<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">LRUCache</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> capacity<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">table</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> LRUCache<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">DoubleLinkedListNode</span><span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">capacity</span> <span style=\"color: #666666\">=</span> capacity<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">len</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">get</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        removeNode<span style=\"color: #666666\">(</span>table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">));</span>\n        setHead<span style=\"color: #666666\">(</span>table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> value<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            DoubleLinkedListNode cur <span style=\"color: #666666\">=</span> table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n            cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> value<span style=\"color: #666666\">;</span>\n            removeNode<span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">);</span>\n            setHead<span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            DoubleLinkedListNode cur <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> DoubleLinkedListNode<span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> value<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&lt;</span> capacity<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                setHead<span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">);</span>\n                table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> cur<span style=\"color: #666666\">);</span>\n                len<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">key</span><span style=\"color: #666666\">);</span>\n                end <span style=\"color: #666666\">=</span> end<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    end<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">post</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                setHead<span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">);</span>\n                table<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> cur<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">removeNode</span><span style=\"color: #666666\">(</span>DoubleLinkedListNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        DoubleLinkedListNode cur <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">,</span> pre <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">,</span> post <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">post</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Link to pre</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pre <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            pre<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">post</span> <span style=\"color: #666666\">=</span> post<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            head <span style=\"color: #666666\">=</span> post<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Link to post</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>post <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            post<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            end <span style=\"color: #666666\">=</span> pre<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">setHead</span><span style=\"color: #666666\">(</span>DoubleLinkedListNode node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">post</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// check head</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> end <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// check end</span>\n        head <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 367,
        "NUMBER": 149,
        "TITLE": "Max Points on a Line",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">package</span> <span style=\"color: #0000FF; font-weight: bold\">maxPointsOnaLine</span><span style=\"color: #666666\">;</span>\n\n<span style=\"color: #008000; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">java.util.HashMap</span><span style=\"color: #666666\">;</span>\n<span style=\"color: #008000; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">java.util.Map</span><span style=\"color: #666666\">;</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/*</span>\n<span style=\"color: #408080; font-style: italic\">     *  A line is determined by two factors,say y=ax+b  </span>\n<span style=\"color: #408080; font-style: italic\">     *  If two points(x1,y1) (x2,y2) are on the same line(Of course). </span>\n<span style=\"color: #408080; font-style: italic\">     *  Consider the gap between two points.</span>\n<span style=\"color: #408080; font-style: italic\">     *  We have (y2-y1)=a(x2-x1),a=(y2-y1)/(x2-x1) a is a rational, </span>\n<span style=\"color: #408080; font-style: italic\">     *  b is canceled since b is a constant.</span>\n<span style=\"color: #408080; font-style: italic\">     *  If a third point (x3,y3) are on the same line. So we must have y3=ax3+b</span>\n<span style=\"color: #408080; font-style: italic\">     *  Thus,(y3-y1)/(x3-x1)=(y2-y1)/(x2-x1)=a</span>\n<span style=\"color: #408080; font-style: italic\">     *  Since a is a rational, there exists y0 and x0, y0/x0=(y3-y1)/(x3-x1)=(y2-y1)/(x2-x1)=a</span>\n<span style=\"color: #408080; font-style: italic\">     *  So we can use y0&amp;x0 to track a line;</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxPoints</span><span style=\"color: #666666\">(</span>Point<span style=\"color: #666666\">[]</span> points<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>points <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">2)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #B00040\">int</span> overlap <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span> j <span style=\"color: #666666\">&lt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">-</span> points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">x</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #B00040\">int</span> y <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">-</span> points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">y</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> y <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    overlap<span style=\"color: #666666\">++;</span>\n                    <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #B00040\">int</span> gcd <span style=\"color: #666666\">=</span> generateGCD<span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>gcd <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    x <span style=\"color: #666666\">/=</span> gcd<span style=\"color: #666666\">;</span>\n                    y <span style=\"color: #666666\">/=</span> gcd<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> m <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n                    m<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">,</span> m<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n            result <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">,</span> max <span style=\"color: #666666\">+</span> overlap <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">generateGCD</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> b <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> a <span style=\"color: #666666\">:</span> generateGCD<span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">,</span> a <span style=\"color: #666666\">%</span> b<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 3",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 368,
        "NUMBER": 154,
        "TITLE": "Find Minimum in Rotated Sorted Array II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><blockquote>\n    <p><i>Follow up</i> for \"Find Minimum in Rotated Sorted Array\":<br>\n        What if <i>duplicates</i> are allowed?</p>\n\n    <p>Would this affect the run-time complexity? How and why?</p>\n</blockquote>\n\n    <p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n\n    <p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\n\n    <p>Find the minimum element.</p>\n\n    <p>The array may contain duplicates.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMin</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> r <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;</span> r <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">+</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> num<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]);</span>\n                l <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> num<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]);</span>\n                r <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                l<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> num<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">]),</span> num<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 11",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 369,
        "NUMBER": 158,
        "TITLE": "Read N Characters Given Read4 II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    The API:&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read4(char *buf)</code>&nbsp;reads 4 characters at a time from a file.</div>\n\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    The API:&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read4(char *buf)</code>&nbsp;reads 4 characters at a time from a file.</div>\n\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    By using the&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">read4</code>&nbsp;API, implement the function&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">int read(char *buf, int n)</code>&nbsp;that reads&nbsp;<i style=\"box-sizing: border-box;\">n</i>&nbsp;characters from the file.</div>\n<div style=\"background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px; margin-bottom: 10px;\">\n    <span style=\"box-sizing: border-box; font-weight: 700;\">Note:</span><br>\n    The&nbsp;<code style=\"background-color: #f9f2f4; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px;\">read</code>&nbsp;function may be called multiple times.</div>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #008000; font-weight: bold\">extends</span> Reader4 <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// 时间 O(N) 空间 O(1)</span>\n    Queue<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> remain <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;();</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">read</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> buf<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">// 队列不为空时，先读取队列中的暂存字符</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>remain<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            buf<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> remain<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> tmp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[4];</span>\n            <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> read4<span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// 如果读到字符多于我们需要的字符，需要暂存这些多余字符</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&gt;</span> n <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arraycopy</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> buf<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">);</span>\n                <span style=\"color: #408080; font-style: italic\">// 把多余的字符存入队列中</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> i<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&lt;</span> len<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    remain<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]);</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #408080; font-style: italic\">// 如果读到的字符少于我们需要的字符，直接拷贝</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arraycopy</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> buf<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> len<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// 同样的，如果读不满4个，说明数据已经读完，返回总所需长度和目前已经读到的长度的较小的</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>len <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #008000; font-weight: bold\">return</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">+</span> len<span style=\"color: #666666\">,</span> n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// 如果到这里，说明都是完美读取，直接返回n</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> n<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 370,
        "NUMBER": 164,
        "TITLE": "Maximum Gap",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p>\n\n    <p>Try to solve it in linear time/space.</p>\n\n    <p>Return 0 if the array contains less than 2 elements.</p>\n\n    <p>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Suppose there are N elements in the array, the min value is min and the max value is max.</span>\n<span style=\"color: #408080; font-style: italic\">     * Then the maximum gap will be no smaller than ceiling[(max - min ) / (N - 1)].</span>\n<span style=\"color: #408080; font-style: italic\">     * Let gap = ceiling[(max - min ) / (N - 1)].</span>\n<span style=\"color: #408080; font-style: italic\">     * We divide all numbers in the array into n-1 buckets,</span>\n<span style=\"color: #408080; font-style: italic\">     * where k-th bucket contains all numbers in [min + (k-1)gap, min + k*gap).</span>\n<span style=\"color: #408080; font-style: italic\">     * Since there are n-2 numbers that are not equal min or max and there are n-1 buckets,</span>\n<span style=\"color: #408080; font-style: italic\">     * at least one of the buckets are empty.</span>\n<span style=\"color: #408080; font-style: italic\">     * We only need to store the largest number and the smallest number in each bucket.</span>\n<span style=\"color: #408080; font-style: italic\">     * After we put all the numbers into the buckets.</span>\n<span style=\"color: #408080; font-style: italic\">     * We can scan the buckets sequentially and get the max gap.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maximumGap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #408080; font-style: italic\">// get the max and min value of the array</span>\n        <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            min <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// the minimum possibale gap, ceiling of the integer division</span>\n        <span style=\"color: #B00040\">int</span> gap <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">ceil</span><span style=\"color: #666666\">((</span><span style=\"color: #B00040\">double</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">(</span>max <span style=\"color: #666666\">-</span> min<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bucketsMIN <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span> <span style=\"color: #408080; font-style: italic\">// store the min value in that bucket</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bucketsMAX <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span> <span style=\"color: #408080; font-style: italic\">// store the max value in that bucket</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>bucketsMIN<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">fill</span><span style=\"color: #666666\">(</span>bucketsMAX<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// put numbers into buckets</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> min <span style=\"color: #666666\">||</span> i <span style=\"color: #666666\">==</span> max<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> min<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> gap<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// index of the right position in the buckets</span>\n            bucketsMIN<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> bucketsMIN<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]);</span>\n            bucketsMAX<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> bucketsMAX<span style=\"color: #666666\">[</span>idx<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// scan the buckets for the max gap</span>\n        <span style=\"color: #B00040\">int</span> maxGap <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> previous <span style=\"color: #666666\">=</span> min<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>bucketsMIN<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span> <span style=\"color: #666666\">&amp;&amp;</span> bucketsMAX<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #408080; font-style: italic\">// empty bucket</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// min value minus the previous value is the current gap</span>\n            maxGap <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxGap<span style=\"color: #666666\">,</span> bucketsMIN<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> previous<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// update previous bucket value</span>\n            previous <span style=\"color: #666666\">=</span> bucketsMAX<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        maxGap <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>maxGap<span style=\"color: #666666\">,</span> max <span style=\"color: #666666\">-</span> previous<span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">// updata the final max value gap</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxGap<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 371,
        "NUMBER": 174,
        "TITLE": "Dungeon Game",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p><style>\ntable.dungeon, .dungeon th, .dungeon td {\n  border:3px solid black;\n}\n\n .dungeon th, .dungeon td {\n    text-align: center;\n    height: 70px;\n    width: 70px;\n}\n</style>\n\n    </p><p>The demons had captured the princess (<b>P</b>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<b>K</b>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess. </p>\n    <p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. </p>\n    <p>Some of the rooms are guarded by demons, so the knight loses health (<i>negative</i> integers) upon entering these rooms;\n        other rooms are either empty (<i>0's</i>) or contain magic orbs that increase the knight's health (<i>positive</i> integers).</p>\n    <p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. </p>\n\n    <br>\n    <p><b>Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.</b></p>\n    <p>For example, given the dungeon below, the initial health of the knight must be at least <b>7</b> if he follows the optimal path <code>RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN</code>.</p>\n\n    <table class=\"dungeon\">\n        <tbody><tr>\n            <td>-2 (K)</td>\n            <td>-3</td>\n            <td>3</td>\n        </tr>\n        <tr>\n            <td>-5</td>\n            <td>-10</td>\n            <td>1</td>\n        </tr>\n        <tr>\n            <td>10</td>\n            <td>30</td>\n            <td>-5 (P)</td>\n        </tr>\n        </tbody></table>\n    <!---2K   -3  3\n    -5   -10   1\n    10 30   5P-->\n\n    <br>\n    <p><b>Notes:</b>\n    </p><ul>\n    <li>The knight's health has no upper bound.</li>\n    <li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.  </li>\n</ul>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">calculateMinimumHP</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dungeon<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> dungeon<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> dungeon<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">//init dp table</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> h <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n        h<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">-</span> dungeon<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #408080; font-style: italic\">//init last row</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            h<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>h<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> dungeon<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">//init last column</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            h<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>h<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> dungeon<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">],</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">//calculate dp table</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> down <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>h<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> dungeon<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">],</span> <span style=\"color: #666666\">1);</span>\n                <span style=\"color: #B00040\">int</span> right <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>h<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> dungeon<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">],</span> <span style=\"color: #666666\">1);</span>\n                h<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">,</span> down<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> h<span style=\"color: #666666\">[0][0];</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "11, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 372,
        "NUMBER": 188,
        "TITLE": "Best Time to Buy and Sell Stock IV",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\n\n    <p>Design an algorithm to find the maximum profit. You may complete at most <b>k</b> transactions.</p>\n\n    <p><b>Note:</b><br>\n        You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&gt;=</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2)</span> <span style=\"color: #008000; font-weight: bold\">return</span> maxProfit2<span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> local <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> global <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> k<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n                local<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>global<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> local<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> diff<span style=\"color: #666666\">);</span>\n                global<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>global<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">],</span> local<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> global<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxProfit2</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> prices<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> maxProfit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> prices<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> prices<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                maxProfit <span style=\"color: #666666\">+=</span> prices<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> prices<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> maxProfit<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "0",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 373,
        "NUMBER": 212,
        "TITLE": "Word Search II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a 2D board and a list of words from the dictionary, find all words in the board.\n</p>\n    <p>\n        Each word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n    </p>\n\n    <p>\n        For example,<br>\n        Given <b>words</b> = <code>[\"oath\",\"pea\",\"eat\",\"rain\"]</code> and <b>board</b> =\n    </p><pre>[\n  ['<span style=\"color:#d70\">o</span>','<span style=\"color:#d70\">a</span>','a','n'],\n  ['e','<span style=\"color:#d30\">t</span>','<span style=\"color:#d00\">a</span>','<span style=\"color:#d00\">e</span>'],\n  ['i','<span style=\"color:#d70\">h</span>','k','r'],\n  ['i','f','l','v']\n]\n</pre>\n\n    Return <code>[\"eat\",\"oath\"]</code>.\n    <p></p>\n\n    <p>\n        <b>Note:</b><br>\n        You may assume that all inputs are consist of lowercase letters <code>a-z</code>.\n    </p>\n\n    <p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hint.</a></p>\n\n    <div class=\"spoilers\" style=\"display: block;\"><p>You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?</p>\n\n        <p>If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first.</p>\n    </div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TrieNode</span> <span style=\"color: #666666\">{</span>\n        TrieNode<span style=\"color: #666666\">[]</span> next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">[26];</span>\n        String word<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findWords</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        TrieNode root <span style=\"color: #666666\">=</span> buildTrie<span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                dfs <span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">dfs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[][]</span> board<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> TrieNode p<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;#&#39;</span> <span style=\"color: #666666\">||</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>   <span style=\"color: #408080; font-style: italic\">// found one</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">);</span>\n            p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>     <span style=\"color: #408080; font-style: italic\">// de-duplicate</span>\n        <span style=\"color: #666666\">}</span>\n\n        board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39;#&#39;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> dfs<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> j <span style=\"color: #666666\">,</span>p<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> dfs<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> p<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> dfs<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> j<span style=\"color: #666666\">,</span> p<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> board<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> dfs<span style=\"color: #666666\">(</span>board<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> p<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n        board<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> TrieNode <span style=\"color: #0000FF\">buildTrie</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String w <span style=\"color: #666666\">:</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            TrieNode p <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> w<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n                p <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #666666\">}</span>\n            p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">=</span> w<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "8, 11",
        "COMPANIES": "0",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 374,
        "NUMBER": 214,
        "TITLE": "Shortest Palindrome",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\n</p>\n\n    <p>For example: </p>\n    <p>Given <code>\"aacecaaa\"</code>, return <code>\"aaacecaaa\"</code>.</p>\n    <p>Given <code>\"abcd\"</code>, return <code>\"dcbabcd\"</code>.</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">shortestPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Find out explaination on https://www.youtube.com/channel/UCMNkvKnD3mo3Jj9eTwJllWw</span>\n        String rev_s <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">//use special character to avoid overlap</span>\n        String l <span style=\"color: #666666\">=</span> s <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;#&quot;</span> <span style=\"color: #666666\">+</span> rev_s<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> p <span style=\"color: #666666\">=</span> getOverlay<span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> rev_s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> p<span style=\"color: #666666\">[</span>l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">+</span> s<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Generate the prefix function for pattern itself</span>\n    <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">getOverlay</span><span style=\"color: #666666\">(</span>String pattern<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">-1];</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">?</span> index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 375,
        "NUMBER": 218,
        "TITLE": "The Skyline Problem",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are <b>given the locations and height of all the buildings</b> as shown on a cityscape photo (Figure A), write a program to <b>output the skyline</b> formed by these buildings collectively (Figure B).</p>\n\n    <!-- Use the following image if we'd like to define the output as 'horizontal lines' rather than 'turning points'-->\n    <!--\n    <a href=\"http://tinypic.com?ref=mij3wi\" target=\"_blank\">\n    <img style=\"max-width: 45%;\" src=\"http://i59.tinypic.com/mij3wi.jpg\" border=\"0\" alt=\"Skyline Contour\">\n    </a>\n    -->\n\n    <p>The geometric information of each building is represented by a triplet of integers <code>[Li, Ri, Hi]</code>, where <code>Li</code> and <code>Ri</code> are the x coordinates of the left and right edge of the ith building, respectively, and <code>Hi</code> is its height. It is guaranteed that <code>0 ≤ Li, Ri ≤ INT_MAX</code>, <code>0 &lt; Hi ≤ INT_MAX</code>, and <code>Ri - Li &gt; 0</code>. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p>\n\n    <p>For instance, the dimensions of all buildings in Figure A are recorded as: <code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>.</p>\n\n    <p>The output is a list of \"<b>key points</b>\" (red dots in Figure B) in the format of <code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> that uniquely defines a skyline. <b>A key point is the left endpoint of a horizontal line segment</b>. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.\n\n    </p><p>For instance, the skyline in Figure B should be represented as:<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>.</p>\n\n    <p><b>Notes:</b>\n    </p><ul>\n    <li> The number of buildings in any input list is guaranteed to be in the range <code>[0, 10000]</code>.</li>\n    <li> The input list is already sorted in ascending order by the left x position <code>Li</code>. </li>\n    <li> The output list must be sorted by the x position. </li>\n    <li> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...[2 3], [4 5], [12 7], ...]</code></li>\n</ul>\n    <p></p>\n\n    <p><b>Credits:</b><br>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/stellari\">@stellari</a> for adding this problem, creating these two awesome images and all test cases.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> <span style=\"color: #0000FF\">getSkyline</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> buildings<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>buildings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">==0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> divide<span style=\"color: #666666\">(</span>buildings<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> buildings<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> <span style=\"color: #0000FF\">divide</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> buildings<span style=\"color: #666666\">,</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> j<span style=\"color: #666666\">){</span>\n            List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> tmp<span style=\"color: #666666\">=</span><span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>buildings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0],</span> buildings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][2]});</span>\n            tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>buildings<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][1],</span> <span style=\"color: #666666\">0});</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> tmp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> left <span style=\"color: #666666\">=</span> divide<span style=\"color: #666666\">(</span>buildings<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+(</span>j<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">)/2);</span>\n        List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> right <span style=\"color: #666666\">=</span> divide<span style=\"color: #666666\">(</span>buildings<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+(</span>j<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">)/2+1,</span> j<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> merge<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span>right<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span>List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> left<span style=\"color: #666666\">,</span>List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> right<span style=\"color: #666666\">){</span>\n        List<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> l1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> l2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> curh1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> curh2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> curlocation <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> skyline <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>l1 <span style=\"color: #666666\">&lt;</span> left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> l2 <span style=\"color: #666666\">&lt;</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> cur1 <span style=\"color: #666666\">=</span> left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>l1<span style=\"color: #666666\">);</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> cur2 <span style=\"color: #666666\">=</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>l2<span style=\"color: #666666\">);</span>\n\n            <span style=\"color: #408080; font-style: italic\">// Compare x to see which line to be cur</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur1<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&lt;</span> cur2<span style=\"color: #666666\">[0]){</span>\n                curh1 <span style=\"color: #666666\">=</span> cur1<span style=\"color: #666666\">[1];</span>\n                curlocation <span style=\"color: #666666\">=</span> cur1<span style=\"color: #666666\">[0];</span>\n                l1<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur1<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">&gt;</span> cur2<span style=\"color: #666666\">[0]){</span>\n                curh2 <span style=\"color: #666666\">=</span> cur2<span style=\"color: #666666\">[1];</span>\n                curlocation <span style=\"color: #666666\">=</span> cur2<span style=\"color: #666666\">[0];</span>\n                l2<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                curh1 <span style=\"color: #666666\">=</span> cur1<span style=\"color: #666666\">[1];</span>\n                curh2 <span style=\"color: #666666\">=</span> cur2<span style=\"color: #666666\">[1];</span>\n                curlocation <span style=\"color: #666666\">=</span> cur1<span style=\"color: #666666\">[0];</span>\n                l1<span style=\"color: #666666\">++;</span>\n                l2<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// If max same as skyline no need to add new point</span>\n            <span style=\"color: #408080; font-style: italic\">// Keep track of pre skyline</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>skyline <span style=\"color: #666666\">!=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>curh1<span style=\"color: #666666\">,</span> curh2<span style=\"color: #666666\">)){</span>\n                skyline <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>curh1<span style=\"color: #666666\">,</span> curh2<span style=\"color: #666666\">);</span>\n                ans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>curlocation<span style=\"color: #666666\">,</span> skyline<span style=\"color: #666666\">});</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Add those points left out</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> l1<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> ans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> l2<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> ans<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7, 20, 26, 27",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 376,
        "NUMBER": 224,
        "TITLE": "Basic Calculator",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement a basic calculator to evaluate a simple expression string.</p>\n\n    <p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <b>non-negative</b> integers and empty spaces <code> </code>.</p>\n\n    <p>You may assume that the given expression is always valid.</p>\n\n    <p>Some examples:<br>\n    </p><pre>\"1 + 1\" = 2\n\" 2-1 + 2 \" = 3\n\"(1+(4+5+2)-3)+(6+8)\" = 23\n</pre>\n    <p></p>\n\n    <p>\n        <b>Note:</b> <b>Do not</b> use the <code>eval</code> built-in library function.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">calculate</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n\t    <span style=\"color: #B00040\">int</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> number <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t    <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n\t        <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n\t        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isDigit</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n\t            number <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">10</span> <span style=\"color: #666666\">*</span> number <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)(</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">);</span>\n\t        <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;+&#39;</span><span style=\"color: #666666\">){</span>\n\t            result <span style=\"color: #666666\">+=</span> sign <span style=\"color: #666666\">*</span> number<span style=\"color: #666666\">;</span>\n\t            number <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t            sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t        <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;-&#39;</span><span style=\"color: #666666\">){</span>\n\t            result <span style=\"color: #666666\">+=</span> sign <span style=\"color: #666666\">*</span> number<span style=\"color: #666666\">;</span>\n\t            number <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t            sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n\t        <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">){</span>\n\t            <span style=\"color: #408080; font-style: italic\">//we push the result first, then sign;</span>\n\t            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">);</span>\n\t            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>sign<span style=\"color: #666666\">);</span>\n\t            <span style=\"color: #408080; font-style: italic\">//reset the sign and result for the value in the parenthesis</span>\n\t            sign <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\t            result <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t        <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;)&#39;</span><span style=\"color: #666666\">){</span>\n\t            result <span style=\"color: #666666\">+=</span> sign <span style=\"color: #666666\">*</span> number<span style=\"color: #666666\">;</span>\n\t            number <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\t            result <span style=\"color: #666666\">*=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>    <span style=\"color: #408080; font-style: italic\">//stack.pop() is the sign before the parenthesis</span>\n\t            result <span style=\"color: #666666\">+=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>   <span style=\"color: #408080; font-style: italic\">//stack.pop() now is the result calculated before the parenthesis</span>\n\t        <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #666666\">}</span>\n\t    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>number <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> result <span style=\"color: #666666\">+=</span> sign <span style=\"color: #666666\">*</span> number<span style=\"color: #666666\">;</span>\n\t    <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 15",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 377,
        "NUMBER": 233,
        "TITLE": "Number of Digit One",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p>\n\n    <p>\n        For example:<br>\n        Given n = 13,<br>\n        Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/*********************</span>\n<span style=\"color: #408080; font-style: italic\">     *   There are three cases according to number in digit:</span>\n<span style=\"color: #408080; font-style: italic\">     *    1. cur &gt; 1: i.e. n = 1223. cur at tens-digit</span>\n<span style=\"color: #408080; font-style: italic\">     *      (nums[:cur] + 1)*pow(10, digit) &#39;1&#39; at cur:</span>\n<span style=\"color: #408080; font-style: italic\">     *          130 &#39;1&#39; at tens-digit. (10...19, 110...119,......,1210...1219)</span>\n<span style=\"color: #408080; font-style: italic\">     *    2. cur == 1:  i.e. n = 1213. cur at tens-digit</span>\n<span style=\"color: #408080; font-style: italic\">     *      (nums[:cur])*pow(10, digit) &#39;1&#39; at cur:</span>\n<span style=\"color: #408080; font-style: italic\">     *          120 &#39;1&#39; at tens-digit. (10...19, 110...119,......,1110...1119)</span>\n<span style=\"color: #408080; font-style: italic\">     *      (nums[cur+1:] + 1) &#39;1&#39; at cur:</span>\n<span style=\"color: #408080; font-style: italic\">     *          Four &#39;1&#39; at tens-digit. (1210...1213)</span>\n<span style=\"color: #408080; font-style: italic\">     *    3. cur &lt; 1:  i.e. n = 1203. cur at tens-digit</span>\n<span style=\"color: #408080; font-style: italic\">     *      (nums[:cur])*pow(10, digit) &#39;1&#39; at cur.</span>\n<span style=\"color: #408080; font-style: italic\">     *          120 &#39;1&#39; at tens-digit. (10...19, 110...119,......,1110...1119)</span>\n<span style=\"color: #408080; font-style: italic\">     *************/</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countDigitOne</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> totalDigits <span style=\"color: #666666\">=</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> digit <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>digit <span style=\"color: #666666\">&lt;</span> totalDigits<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> cur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)((</span>n <span style=\"color: #666666\">/</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digit<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10);</span>\n            <span style=\"color: #408080; font-style: italic\">// Case 3</span>\n            res <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)(</span>n <span style=\"color: #666666\">/</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digit<span style=\"color: #666666\">+1))*</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digit<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// Case 1 additional to Case 3</span>\n            res <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">?</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digit<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #408080; font-style: italic\">// Case 2 additonal</span>\n            res <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)(</span>n <span style=\"color: #666666\">%</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pow</span><span style=\"color: #666666\">(10,</span> digit<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n            digit<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 378,
        "NUMBER": 239,
        "TITLE": "Sliding Window Maximum",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p>\n    <p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array\n        to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right\n        by one position.</p>\n\n    <p>For example,<br> Given <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p>\n\n    <pre>Window position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</pre>\n\n    <p>Therefore, return the max sliding window as <code>[3,3,5,5,6,7]</code>.</p>\n\n    <p><b>Note: </b><br> You may assume <i>k</i> is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.</p>\n\n    <p><b>Follow up:</b><br> Could you solve it in linear time?</p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">maxSlidingWindow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> max_left <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> max_right <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n\n        max_left<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[0];</span>\n        max_right<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            max_left<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">%</span> k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max_left<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n\n            <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            max_right<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">%</span> k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max_right<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1],</span> nums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> sliding_max <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            sliding_max<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max_right<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> max_left<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> sliding_max<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "20",
        "COMPANIES": "0",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 379,
        "NUMBER": 248,
        "TITLE": "Strobogrammatic Number III",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n\n<p>Write a function to count the total strobogrammatic numbers that exist in the range of low <= num <= high.</p>\n\n<p>For example,</p>\n<p>Given low = \"50\", high = \"100\", return 3. Because 69, 88, and 96 are three strobogrammatic numbers.</p>\n\n<p>Note:</p>\n<p>Because the range might be a large number, the low and high numbers are represented as string.</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Character<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">strobogrammaticInRange</span><span style=\"color: #666666\">(</span>String low<span style=\"color: #666666\">,</span> String high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>low <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> low<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> high <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> high<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        fillMap<span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> low<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> n <span style=\"color: #666666\">&lt;=</span> high<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> n<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n            getStrobogrammaticNumbers<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> low<span style=\"color: #666666\">,</span> high<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getStrobogrammaticNumbers</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> arr<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">,</span> String low<span style=\"color: #666666\">,</span> String high<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            String s <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> compare<span style=\"color: #666666\">(</span>low<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> compare<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> high<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            arr<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> c<span style=\"color: #666666\">;</span>\n            arr<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">==</span> end <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                getStrobogrammaticNumbers<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">,</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> low<span style=\"color: #666666\">,</span> high<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Return true if s1 &lt;= s2</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">compareTo</span><span style=\"color: #666666\">(</span>s2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">fillMap</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;1&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;8&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;8&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;6&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&#39;9&#39;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&#39;6&#39;</span><span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 380,
        "NUMBER": 273,
        "TITLE": "Integer to English Words",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 2<sup>31</sup> - 1.\n</p>\n\n    <p>For example,<br>\n    </p><pre>123 -&gt; \"One Hundred Twenty Three\"\n12345 -&gt; \"Twelve Thousand Three Hundred Forty Five\"\n1234567 -&gt; \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"</pre><p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> String<span style=\"color: #666666\">[]</span> lessThan20 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;One&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Two&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Three&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Four&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Five&quot;</span><span style=\"color: #666666\">,</span>\n            <span style=\"color: #BA2121\">&quot;Six&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Seven&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Eight&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Nine&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Ten&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Eleven&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Twelve&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Thirteen&quot;</span><span style=\"color: #666666\">,</span>\n            <span style=\"color: #BA2121\">&quot;Fourteen&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Fifteen&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Sixteen&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Seventeen&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Eighteen&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Nineteen&quot;</span><span style=\"color: #666666\">};</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> String<span style=\"color: #666666\">[]</span> tens <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Ten&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Twenty&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Thirty&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Forty&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Fifty&quot;</span><span style=\"color: #666666\">,</span>\n            <span style=\"color: #BA2121\">&quot;Sixty&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Seventy&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Eighty&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Ninety&quot;</span><span style=\"color: #666666\">};</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> String<span style=\"color: #666666\">[]</span> thousands <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Thousand&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Million&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;Billion&quot;</span><span style=\"color: #666666\">};</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">numberToWords</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;Zero&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        String words <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">1000</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span>\n                words <span style=\"color: #666666\">=</span> helper<span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">1000)</span> <span style=\"color: #666666\">+</span> thousands<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> words<span style=\"color: #666666\">;</span>\n            num <span style=\"color: #666666\">/=</span> <span style=\"color: #666666\">1000;</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    String <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">20)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> lessThan20<span style=\"color: #666666\">[</span>num<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">100)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> tens<span style=\"color: #666666\">[</span>num <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">10]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> helper<span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">10);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> lessThan20<span style=\"color: #666666\">[</span>num <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">100]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; Hundred &quot;</span> <span style=\"color: #666666\">+</span> helper<span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">100);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3, 5",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 381,
        "NUMBER": 282,
        "TITLE": "Expression Add Operators",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a string that contains only digits <code>0-9</code> and a target value, return all possibilities to add <b>binary</b> operators (not unary) <code>+</code>, <code>-</code>, or <code>*</code> between the digits so they evaluate to the target value.\n</p>\n<p>\nExamples: <br>\n</p><pre>\"123\", 6 -&gt; [\"1+2+3\", \"1*2*3\"] \n\"232\", 8 -&gt; [\"2*3+2\", \"2+3*2\"]\n\"105\", 5 -&gt; [\"1*0+5\",\"10-5\"]\n\"00\", 0 -&gt; [\"0+0\", \"0-0\", \"0*0\"]\n\"3456237490\", 9191 -&gt; []\n</pre>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">addOperators</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        helper<span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0,</span> res<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span>String num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">,</span> String tmp<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> currRes<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> prevNum<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res<span style=\"color: #666666\">){</span>\n        <span style=\"color: #408080; font-style: italic\">// If result = target and all numbers are used, then it is a valid result</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>currRes <span style=\"color: #666666\">==</span> target <span style=\"color: #666666\">&amp;&amp;</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            String exp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> String<span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>exp<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Search for all possible divided situations</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            String currStr <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// If starts with 0 then not valid</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>currStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&amp;&amp;</span> currStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(0)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #408080; font-style: italic\">// Get current number</span>\n            <span style=\"color: #B00040\">long</span> currNum <span style=\"color: #666666\">=</span> Long<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseLong</span><span style=\"color: #666666\">(</span>currStr<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// Get rid of the current number and what to search in next round</span>\n            String next <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// If it isn&#39;t first char, then operations else it is a number</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0){</span>\n                <span style=\"color: #408080; font-style: italic\">// multiply</span>\n                helper<span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> tmp<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;*&quot;</span><span style=\"color: #666666\">+</span>currNum<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">(</span>currRes <span style=\"color: #666666\">-</span> prevNum<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> prevNum <span style=\"color: #666666\">*</span> currNum<span style=\"color: #666666\">,</span> prevNum <span style=\"color: #666666\">*</span> currNum<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n                <span style=\"color: #408080; font-style: italic\">// plus</span>\n                helper<span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> tmp<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;+&quot;</span><span style=\"color: #666666\">+</span>currNum<span style=\"color: #666666\">,</span> currRes <span style=\"color: #666666\">+</span> currNum<span style=\"color: #666666\">,</span> currNum<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n                <span style=\"color: #408080; font-style: italic\">// minus</span>\n                helper<span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> tmp<span style=\"color: #666666\">+</span><span style=\"color: #BA2121\">&quot;-&quot;</span><span style=\"color: #666666\">+</span>currNum<span style=\"color: #666666\">,</span> currRes <span style=\"color: #666666\">-</span> currNum<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-</span>currNum<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span> \n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #408080; font-style: italic\">// first number</span>\n                helper<span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> currStr<span style=\"color: #666666\">,</span> currNum<span style=\"color: #666666\">,</span> currNum<span style=\"color: #666666\">,</span> res<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7",
        "COMPANIES": "",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 382,
        "NUMBER": 295,
        "TITLE": "Find Median from Data Stream",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\nExamples: <br>\n<p><code>[2,3,4]</code> , the median is <code>3</code></p>\n<p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code> </p>\n\n<p>\nDesign a data structure that supports the following two operations:\n</p>\n<ul>\n<li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li>\n<li>double findMedian() - Return the median of all elements so far.</li>\n</ul>\n\n<p>\nFor example:</p>\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2\n</pre>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MedianFinder</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// minHeap</span>\n    Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> largePQ <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;();</span>  \n    <span style=\"color: #408080; font-style: italic\">// max Heap</span>\n    Queue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> smallPQ <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;(10,</span> revComp<span style=\"color: #666666\">);</span> \n\n    <span style=\"color: #408080; font-style: italic\">// Adds a number into the data structure.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addNum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&lt;=</span> largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> num <span style=\"color: #666666\">&lt;=</span> largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span>\n                smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n                largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()){</span>\n                largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n                smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Returns the median of current data stream</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">findMedian</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> largePQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())/2.0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> smallPQ<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">final</span> Comparator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> revComp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(){</span>\n        <span style=\"color: #AA22FF\">@Override</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Integer left<span style=\"color: #666666\">,</span> Integer right<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> right <span style=\"color: #666666\">-</span> left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">};</span>\n<span style=\"color: #666666\">};</span>\n\n<span style=\"color: #408080; font-style: italic\">// Your MedianFinder object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// MedianFinder mf = new MedianFinder();</span>\n<span style=\"color: #408080; font-style: italic\">// mf.addNum(1);</span>\n<span style=\"color: #408080; font-style: italic\">// mf.findMedian();</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 383,
        "NUMBER": 297,
        "TITLE": "Serialize and Deserialize Binary Tree",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. </p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p>\nFor example, you may serialize the following tree\n</p><pre>    1\n   / \\\n  2   3\n     / \\\n    4   5\n</pre>\nas <code>\"[1,2,3,null,null,4,5]\"</code>, just the same as <a href=\"https://leetcode.com/faq/#binary-tree\">how LeetCode OJ serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n<p></p>\n\n<p>\n<b>Note:</b> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Codec</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Encodes a tree to a single string.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">serialize</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        Queue<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            TreeNode node <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;n &quot;</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n            q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n            q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Decodes your encoded data to tree.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">deserialize</span><span style=\"color: #666666\">(</span>String data<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>data <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        Queue<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> q <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        String<span style=\"color: #666666\">[]</span> values <span style=\"color: #666666\">=</span> data<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">);</span>\n        TreeNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>values<span style=\"color: #666666\">[0]));</span>\n        q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> values<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            TreeNode parent <span style=\"color: #666666\">=</span> q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;n&quot;</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                TreeNode left <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]));</span>\n                parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> left<span style=\"color: #666666\">;</span>\n                q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>values<span style=\"color: #666666\">[++</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;n&quot;</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                TreeNode right <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeNode<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">parseInt</span><span style=\"color: #666666\">(</span>values<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]));</span>\n                parent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> right<span style=\"color: #666666\">;</span>\n                q<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> root<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">// Your Codec object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\">// Codec codec = new Codec();</span>\n<span style=\"color: #408080; font-style: italic\">// codec.deserialize(codec.serialize(root));</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 12",
        "COMPANIES": "",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 384,
        "NUMBER": 301,
        "TITLE": "Remove Invalid Parentheses",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nRemove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.</p>\n\n<p>Note: The input string may contain letters other than the parentheses <code>(</code> and <code>)</code>. \n</p>\n\n<p>\n<b>Examples:</b><br>\n</p><pre>\"()())()\" -&gt; [\"()()()\", \"(())()\"]\n\"(a)())()\" -&gt; [\"(a)()()\", \"(a())()\"]\n\")(\" -&gt; [\"\"]\n</pre>\n<p></p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">removeInvalidParentheses</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> rmL <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> rmR <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> rmL<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;)&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>rmL <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0)</span> rmL<span style=\"color: #666666\">--;</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span> rmR<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> rmL<span style=\"color: #666666\">,</span> rmR<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">());</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;(</span>res<span style=\"color: #666666\">);</span>  \n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">DFS</span><span style=\"color: #666666\">(</span>Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res<span style=\"color: #666666\">,</span> String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> rmL<span style=\"color: #666666\">,</span> \n                        <span style=\"color: #B00040\">int</span> rmR<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> open<span style=\"color: #666666\">,</span> StringBuilder sb<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> rmL <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> rmR <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> open <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">());</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> rmL <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> rmR <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> open <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span> \n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;(&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> rmL <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> rmR<span style=\"color: #666666\">,</span> open<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">);</span>\n            DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> rmL<span style=\"color: #666666\">,</span> rmR<span style=\"color: #666666\">,</span> open <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>c <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;)&#39;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> rmL<span style=\"color: #666666\">,</span> rmR <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> open<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">);</span>\n            DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> rmL<span style=\"color: #666666\">,</span> rmR<span style=\"color: #666666\">,</span> open <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            DFS<span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span> s<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> rmL<span style=\"color: #666666\">,</span> rmR<span style=\"color: #666666\">,</span> open<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">));</span> \n        <span style=\"color: #666666\">}</span>\n        sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">setLength</span><span style=\"color: #666666\">(</span>len<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9",
        "COMPANIES": "0",
        "SPECIALTAGS": "0, 2"
    },
    {
        "ID": 385,
        "NUMBER": 312,
        "TITLE": "Burst Balloons",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a\n    number on it represented by array <code>nums</code>.\n\n    You are asked to burst all the balloons. If the you burst\n    balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code>\n    and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code>\n    then becomes adjacent.\n</p>\n<p>\n    Find the maximum coins you can collect by bursting the balloons wisely.\n</p>\n<p>\n    <b>Note:</b> <br>\n    (1) You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.<br>\n    (2) 0 ≤ <code>n</code> ≤ 500, 0 ≤ <code>nums[i]</code> ≤ 100\n</p>\n\n\n<p>\n    <b>Example:</b>\n</p>\n<p>\n    Given <code>[3, 1, 5, 8]</code>\n</p>\n<p>\n    Return <code>167</code>\n</p>\n<pre>    nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// dp[i][j] = max(dp[i][j], </span>\n    <span style=\"color: #408080; font-style: italic\">// dp[i][x – 1] + nums[i – 1] * nums[x] * nums[j + 1] + dp[x + 1][j]);</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">DP</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> x <span style=\"color: #666666\">&lt;=</span> j<span style=\"color: #666666\">;</span> x<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">],</span> DP<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> x <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> nums<span style=\"color: #666666\">,</span> dp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> \n                nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">*</span> nums<span style=\"color: #666666\">[</span>x<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> nums<span style=\"color: #666666\">[</span>j <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> DP<span style=\"color: #666666\">(</span>x <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> j<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">,</span> dp<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n \n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxCoins</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> iNums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> iNums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> iNums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        nums<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2][</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> DP<span style=\"color: #666666\">(1,</span> n<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">,</span> dp<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 386,
        "NUMBER": 315,
        "TITLE": "Count of Smaller Numbers After Self",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nYou are given an integer array <i>nums</i> and you have to return a new <i>counts</i> array.\nThe <i>counts</i> array has the property where <code>counts[i]</code> is \nthe number of smaller elements to the right of <code>nums[i]</code>.\n</p>\n\n<p><b>Example:</b></p>\n\n<pre>Given <i>nums</i> = [5, 2, 6, 1]\n\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p>\nReturn the array <code>[2, 1, 1, 0]</code>.\n</p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bit<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(;</span> i <span style=\"color: #666666\">&lt;</span> bit<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">+=</span> i<span style=\"color: #666666\">&amp;(-</span>i<span style=\"color: #666666\">))</span> bit<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> val<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">query</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bit<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(;</span> i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">-=</span> i<span style=\"color: #666666\">&amp;(-</span>i<span style=\"color: #666666\">))</span> ans <span style=\"color: #666666\">+=</span> bit<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">countSmaller</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> tmp <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clone</span><span style=\"color: #666666\">();</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> indexes <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            indexes<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">binarySearch</span><span style=\"color: #666666\">(</span>tmp<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> bit <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> indexes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">--)</span> <span style=\"color: #666666\">{</span>\n            ans<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> query<span style=\"color: #666666\">(</span>bit<span style=\"color: #666666\">,</span> indexes<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            add<span style=\"color: #666666\">(</span>bit<span style=\"color: #666666\">,</span> indexes<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]+1,</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">:</span> ans<span style=\"color: #666666\">)</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7, 26, 27, 28",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 387,
        "NUMBER": 316,
        "TITLE": "Remove Duplicate Letters",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\nGiven a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n</p>\n\n<p>\n<b>Example:</b><br>\n</p>\n<p>\nGiven <code>\"bcabc\"</code><br>\nReturn <code>\"abc\"</code>\n</p>\n<p>\nGiven <code>\"cbacdcbc\"</code><br>\nReturn <code>\"acdb\"</code>\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">removeDuplicateLetters</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n         <span style=\"color: #408080; font-style: italic\">//will contain number of occurences of character (i+&#39;a&#39;)</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #408080; font-style: italic\">//will contain if character (i+&#39;a&#39;) is present in current result Stack</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[26];</span> \n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> ch <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> ch<span style=\"color: #666666\">){</span>  <span style=\"color: #408080; font-style: italic\">//count number of occurences of character </span>\n            res<span style=\"color: #666666\">[</span>c<span style=\"color: #666666\">-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]++;</span>\n        <span style=\"color: #666666\">}</span>\n        Stack<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> st <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span> <span style=\"color: #408080; font-style: italic\">// answer stack</span>\n        <span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> ch<span style=\"color: #666666\">){</span> \n            index <span style=\"color: #666666\">=</span> c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">//decrement number of characters remaining in the string to be analysed</span>\n            res<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]--;</span>   \n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>visited<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">])</span> <span style=\"color: #408080; font-style: italic\">//if character is already present in stack, dont bother</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">//if current character is smaller than last character in stack which occurs later in the string again</span>\n            <span style=\"color: #408080; font-style: italic\">//it can be removed and added later e.g stack = bc remaining string abc then a can pop b and then c</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> c <span style=\"color: #666666\">&lt;</span> st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> res<span style=\"color: #666666\">[</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0){</span> \n                visited<span style=\"color: #666666\">[</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">()-</span><span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]=</span><span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">//add current character and mark it as visited</span>\n            visited<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]=</span><span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #408080; font-style: italic\">//pop character from stack and build answer string from back</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(!</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()){</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">insert</span><span style=\"color: #666666\">(0,</span>st<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "15, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 388,
        "NUMBER": 321,
        "TITLE": "Create Maximum Number",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given two arrays of length <code>m</code> and <code>n</code> with digits <code>0-9</code> representing two numbers.\n    Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two. The relative order of the digits\n    from the same array must be preserved. Return an array of the <code>k</code> digits. You should try to optimize your time and space complexity.\n</p>\n\n<p>\n    <b>Example 1:</b><br>\n</p>\n<p>\n    nums1 = <code>[3, 4, 6, 5]</code><br>\n    nums2 = <code>[9, 1, 2, 5, 8, 3]</code><br>\n    k = <code>5</code><br>\n    return <code>[9, 8, 6, 5, 3]</code>\n</p>\n<p>\n    <b>Example 2:</b><br>\n</p>\n<p>\n    nums1 = <code>[6, 7]</code><br>\n    nums2 = <code>[6, 0, 4]</code><br>\n    k = <code>5</code><br>\n    return <code>[6, 7, 6, 0, 4]</code>\n</p>\n<p>\n    <b>Example 3:</b><br>\n</p>\n<p>\n    nums1 = <code>[3, 9]</code><br>\n    nums2 = <code>[8, 9]</code><br>\n    k = <code>3</code><br>\n    return <code>[9, 8, 9]</code>\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// http://blog.csdn.net/u010025211/article/details/50527279</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">maxNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(0,</span> k<span style=\"color: #666666\">-</span>nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">);</span> i <span style=\"color: #666666\">&lt;=</span> k <span style=\"color: #666666\">&amp;&amp;</span> i <span style=\"color: #666666\">&lt;=</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidate <span style=\"color: #666666\">=</span> merge<span style=\"color: #666666\">(</span>maxArray<span style=\"color: #666666\">(</span>nums1<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">),</span> maxArray<span style=\"color: #666666\">(</span>nums2<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">),</span> k<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>greater<span style=\"color: #666666\">(</span>candidate<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> ans<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0))</span>\n                ans <span style=\"color: #666666\">=</span> candidate<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Given one array of length n, create the maximum number of length k</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">maxArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span><span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-</span>i<span style=\"color: #666666\">+</span>j <span style=\"color: #666666\">&gt;</span> k <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> ans<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">-1]</span> <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> j<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">)</span>\n                ans<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">//Given two array of length m and n, create maximum number of length k = m + n.</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">merge</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> ans <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> r <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">)</span>\n            ans<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> greater<span style=\"color: #666666\">(</span>nums1<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> nums2<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">:</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">++];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> ans<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Compare nums1 with nums2 from index i and j</span>\n    <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">greater</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&lt;</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]){</span>\n            i<span style=\"color: #666666\">++;</span>\n            j<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> j <span style=\"color: #666666\">==</span> nums2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> nums1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> nums1<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums2<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 389,
        "NUMBER": 327,
        "TITLE": "Count of Range Sum",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br>\n\n    Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and \n    <code>j</code> (<code>i</code> ≤ <code>j</code>), inclusive.\n</p>\n\n<p>\n    <b>Note:</b><br>\n    A naive algorithm of <i>O</i>(<i>n</i><sup>2</sup>) is trivial. You MUST do better than that.\n</p>\n<p>\n    <b>Example:</b><br>\n    Given <i>nums</i> = <code>[-2, 5, -1]</code>, <i>lower</i> = <code>-2</code>, <i>upper</i> = <code>2</code>,<br>\n    Return <code>3</code>.<br>\n    The three ranges are : <code>[0, 0]</code>, <code>[2, 2]</code>, <code>[0, 2]</code> and their respective sums are: <code>-2, -1, 2</code>.\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countRangeSum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> lower<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> upper<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[]</span> sums <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">)</span>\n            sums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> countWhileMergeSort<span style=\"color: #666666\">(</span>sums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> lower<span style=\"color: #666666\">,</span> upper<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">countWhileMergeSort</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[]</span> sums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> lower<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> upper<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> countWhileMergeSort<span style=\"color: #666666\">(</span>sums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> mid<span style=\"color: #666666\">,</span> lower<span style=\"color: #666666\">,</span> upper<span style=\"color: #666666\">)</span> \n              <span style=\"color: #666666\">+</span> countWhileMergeSort<span style=\"color: #666666\">(</span>sums<span style=\"color: #666666\">,</span> mid<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">,</span> lower<span style=\"color: #666666\">,</span> upper<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">,</span> k <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">,</span> t <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[]</span> cache <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">,</span> r <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> mid<span style=\"color: #666666\">;</span> <span style=\"color: #666666\">++</span>i<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">++</span>r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> sums<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> lower<span style=\"color: #666666\">)</span> k<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> sums<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> upper<span style=\"color: #666666\">)</span> j<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>t <span style=\"color: #666666\">&lt;</span> end <span style=\"color: #666666\">&amp;&amp;</span> sums<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> cache<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> sums<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">++];</span>\n            cache<span style=\"color: #666666\">[</span>r<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> sums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            count <span style=\"color: #666666\">+=</span> j <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">arraycopy</span><span style=\"color: #666666\">(</span>cache<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> sums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> t <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7, 28",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 390,
        "NUMBER": 329,
        "TITLE": "Longest Increasing Path in a Matrix",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given an integer matrix, find the length of the longest increasing path.</p>\n\n<p>\nFrom each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n\n<p>\n<b>Example 1:</b>\n</p><pre>nums = [\n  [<font color=\"red\">9</font>,9,4],\n  [<font color=\"red\">6</font>,6,8],\n  [<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\n]\n</pre>\n<p></p>\n\n<p>\nReturn <code>4</code><br>\n\nThe longest increasing path is <code>[1, 2, 6, 9]</code>.</p>\n\n<p>\n<b>Example 2:</b>\n</p><pre>nums = [\n  [<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\n  [3,2,<font color=\"red\">6</font>],\n  [2,2,1]\n]\n</pre>\n<p></p>\n\n<p>\nReturn <code>4</code><br>\n\nThe longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">dfs</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> cache<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cache<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> cache<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> longest <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1][</span>j<span style=\"color: #666666\">])</span> \n            longest <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>longest<span style=\"color: #666666\">,</span> dfs<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">-1,</span> j<span style=\"color: #666666\">,</span> cache<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">-1])</span>\n            longest <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>longest<span style=\"color: #666666\">,</span> dfs<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">-1,</span> cache<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">&amp;&amp;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">+1][</span>j<span style=\"color: #666666\">])</span>\n            longest <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>longest<span style=\"color: #666666\">,</span> dfs<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+1,</span> j<span style=\"color: #666666\">,</span> cache<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">&amp;&amp;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> matrix<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">+1])</span>\n            longest <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>longest<span style=\"color: #666666\">,</span> dfs<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">+1,</span> cache<span style=\"color: #666666\">));</span>\n        cache<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> longest<span style=\"color: #666666\">+1;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> longest<span style=\"color: #666666\">+1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">longestIncreasingPath</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">==0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> cache <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">][</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> longest <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">=0;</span> i<span style=\"color: #666666\">&lt;</span>matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">=0;</span> j<span style=\"color: #666666\">&lt;</span>matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span>\n                longest <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>longest<span style=\"color: #666666\">,</span> dfs<span style=\"color: #666666\">(</span>matrix<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">,</span> j<span style=\"color: #666666\">,</span> cache<span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> longest<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "14, 24, 30",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 391,
        "NUMBER": 330,
        "TITLE": "Patching Array",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a sorted positive integer array <i>nums</i> and an integer <i>n</i>, add/patch elements to the array such that any number in range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.\n</p>\n\n<p><strong>Example 1:</strong><br>\n<i>nums</i> = <code>[1, 3]</code>, <i>n</i> = <code>6</code><br>\nReturn <code>1</code>.</p>\n\n<p>Combinations of <i>nums</i> are <code>[1], [3], [1,3]</code>, which form possible sums of: <code>1, 3, 4</code>.<br>\nNow if we add/patch <code>2</code> to <i>nums</i>, the combinations are: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>.<br>\nPossible sums are <code>1, 2, 3, 4, 5, 6</code>, which now covers the range <code>[1, 6]</code>.<br>\nSo we only need <code>1</code> patch.</p>\n\n<p><strong>Example 2:</strong><br>\n<i>nums</i> = <code>[1, 5, 10]</code>, <i>n</i> = <code>20</code><br>\nReturn <code>2</code>.<br>\nThe two patches can be <code>[2, 4]</code>.</p>\n\n<p><strong>Example 3:</strong><br>\n<i>nums</i> = <code>[1, 2, 2]</code>, <i>n</i> = <code>5</code><br>\nReturn <code>0</code>.<br>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minPatches</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">long</span> miss <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n \n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>miss <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> miss<span style=\"color: #666666\">){</span>\n                miss <span style=\"color: #666666\">=</span> miss <span style=\"color: #666666\">+</span> nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                miss <span style=\"color: #666666\">+=</span> miss<span style=\"color: #666666\">;</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> count<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "17",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 392,
        "NUMBER": 335,
        "TITLE": "Self Crossing",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    You are given an array <i>x</i> of <code>n</code> positive numbers. You start at point <code>(0,0)</code> and moves <code>x[0]</code> metres to the north, then <code>x[1]</code> metres to the west,\n    <code>x[2]</code> metres to the south,\n    <code>x[3]</code> metres to the east and so on. In other words, after each move your direction changes\n    counter-clockwise.\n</p>\n<p>\n    Write a one-pass algorithm with <code>O(1)</code> extra space to determine, if your path crosses itself, or not.\n</p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isSelfCrossing</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">3)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// keep spiraling outward</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> x<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> x<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2])</span> <span style=\"color: #666666\">{</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> x<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// transition from spiraling outward to spiraling inward</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>i <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">4</span> <span style=\"color: #666666\">&amp;&amp;</span> x<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2]</span> <span style=\"color: #666666\">-</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">4])</span> <span style=\"color: #666666\">||</span>\n                <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">&amp;&amp;</span> x<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2]))</span> <span style=\"color: #666666\">{</span>\n            x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-=</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">3];</span>\n        <span style=\"color: #666666\">}</span>\n        i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #408080; font-style: italic\">// keep spiraling inward</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> x<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> x<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2])</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            i<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 393,
        "NUMBER": 336,
        "TITLE": "Palindrome Pairs",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>\n    Given a list of <b>unique</b> words, find all pairs of <b><i>distinct</i></b> indices <code>(i, j)</code> in the given list, so that the concatenation of the two words, i.e. <code>words[i] + words[j]</code> is a palindrome.\n</p>\n\n<p>\n    <b>Example 1:</b><br>\n    Given <code>words</code> = <code>[\"bat\", \"tab\", \"cat\"]</code><br>\n    Return <code>[[0, 1], [1, 0]]</code><br>\n    The palindromes are <code>[\"battab\", \"tabbat\"]</code><br>\n</p>\n<p>\n    <b>Example 2:</b><br>\n    Given <code>words</code> = <code>[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]</code><br>\n    Return <code>[[0, 1], [1, 0], [3, 2], [2, 4]]</code><br>\n    The palindromes are <code>[\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]</code><br>\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">palindromePairs</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> i<span style=\"color: #666666\">);</span>\n    \n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            String s <span style=\"color: #666666\">=</span> words<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #408080; font-style: italic\">//if the word is a palindrome, get index of &quot;&quot;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>isPalindrome<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> i<span style=\"color: #666666\">){</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">));</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n \n                l <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">));</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n \n            <span style=\"color: #408080; font-style: italic\">//if the reversed word exists, it is a palindrome</span>\n            String reversed <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>reversed<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversed<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> i<span style=\"color: #666666\">){</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversed<span style=\"color: #666666\">));</span>\n                result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n \n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> k <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> k<span style=\"color: #666666\">++){</span>\n                String left <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> k<span style=\"color: #666666\">);</span>\n                String right<span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">);</span>\n \n                <span style=\"color: #408080; font-style: italic\">//if left part is palindrome, find reversed right part</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>isPalindrome<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">)){</span>\n                    String reversedRight <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>reversedRight<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversedRight<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> i<span style=\"color: #666666\">){</span>\n                        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                        l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversedRight<span style=\"color: #666666\">));</span>\n                        l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n \n                <span style=\"color: #408080; font-style: italic\">//if right part is a palindrome, find reversed left part</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>isPalindrome<span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">)){</span>\n                    String reversedLeft <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">reverse</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>reversedLeft<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversedLeft<span style=\"color: #666666\">)!=</span>i<span style=\"color: #666666\">){</span>\n                        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n                        l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n                        l<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reversedLeft<span style=\"color: #666666\">));</span>\n                        result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>l<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isPalindrome</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> j <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">!=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">--))</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 5, 11",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 394,
        "NUMBER": 352,
        "TITLE": "Data Stream as Disjoint Intervals",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p>\n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p><b>Follow up:</b><br>\nWhat if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?\n</p>\n\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for an interval.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class Interval {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int start;</span>\n<span style=\"color: #408080; font-style: italic\"> *     int end;</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval() { start = 0; end = 0; }</span>\n<span style=\"color: #408080; font-style: italic\"> *     Interval(int s, int e) { start = s; end = e; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">SummaryRanges</span> <span style=\"color: #666666\">{</span>\n    \n    TreeSet<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> intervalSet<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Initialize your data structure here. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">SummaryRanges</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        intervalSet <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeSet<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;(</span><span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;(){</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Interval a<span style=\"color: #666666\">,</span> Interval b<span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addNum</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Interval valInterval <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Interval<span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">,</span> val<span style=\"color: #666666\">);</span>\n        Interval floor <span style=\"color: #666666\">=</span> intervalSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">floor</span><span style=\"color: #666666\">(</span>valInterval<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>floor <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>floor<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">&gt;=</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>floor<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">==</span> val<span style=\"color: #666666\">){</span>\n                valInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">=</span> floor<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span><span style=\"color: #666666\">;</span>\n                intervalSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>floor<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        Interval higher <span style=\"color: #666666\">=</span> intervalSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">higher</span><span style=\"color: #666666\">(</span>valInterval<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>higher <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> higher<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">start</span> <span style=\"color: #666666\">==</span> val<span style=\"color: #666666\">+1){</span>\n            valInterval<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span> <span style=\"color: #666666\">=</span> higher<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">end</span><span style=\"color: #666666\">;</span>\n            intervalSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>higher<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        intervalSet<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>valInterval<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n    \n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">getIntervals</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Interval<span style=\"color: #666666\">&gt;();</span>\n        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>intervalSet<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your SummaryRanges object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * SummaryRanges obj = new SummaryRanges();</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.addNum(val);</span>\n<span style=\"color: #408080; font-style: italic\"> * List&lt;Interval&gt; param_2 = obj.getIntervals();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "29",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 395,
        "NUMBER": 354,
        "TITLE": "Russian Doll Envelopes",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n        <p></p><p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\n\n<p>\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)\n</p>\n\n<p><b>Example:</b><br>\nGiven envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>, the maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</p><p></p>\n      </div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxEnvelopes</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> envelopes<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>envelopes <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> envelopes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> envelopes<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> envelopes<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">2)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>envelopes<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]&gt;(){</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr2<span style=\"color: #666666\">){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>arr1<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">==</span> arr2<span style=\"color: #666666\">[0])</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> arr2<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">-</span> arr1<span style=\"color: #666666\">[1];</span>\n                <span style=\"color: #008000; font-weight: bold\">else</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> arr1<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> arr2<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #666666\">}</span> \n        <span style=\"color: #666666\">});</span>\n        <span style=\"color: #B00040\">int</span> dp<span style=\"color: #666666\">[]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>envelopes<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> envelope <span style=\"color: #666666\">:</span> envelopes<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">binarySearch</span><span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> len<span style=\"color: #666666\">,</span> envelope<span style=\"color: #666666\">[1]);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">0)</span>\n                index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-(</span>index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            dp<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> envelope<span style=\"color: #666666\">[1];</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">==</span> len<span style=\"color: #666666\">)</span>\n                len<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> len<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 396,
        "NUMBER": 363,
        "TITLE": "Max Sum of Rectangle No Larger Than K",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a non-empty 2D matrix <i>matrix</i> and an integer <i>k</i>, find the max sum of a rectangle in the <i>matrix</i> such that its sum is no larger than <i>k</i>.</p>\n\n    <p><b>Example:</b><br>\n    </p><pre>Given matrix = [\n  [1,  0, 1],\n  [0, -2, 3]\n]\nk = 2\n</pre>\n    <p></p>\n\n    <p>The answer is <code>2</code>. Because the sum of rectangle <code>[[0, 1], [-2, 3]]</code> is 2 and 2 is the max number no larger than k (k = 2).</p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The rectangle inside the matrix must have an area &gt; 0.</li>\n    <li>What if the number of rows is much larger than the number of columns?</li>\n</ol>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/* first  consider the situation matrix is 1D</span>\n<span style=\"color: #408080; font-style: italic\">     * we can save every sum of 0~i(0&lt;=i&lt;len) and binary search previous sum to</span>\n<span style=\"color: #408080; font-style: italic\">     * find possible result for every index, time complexity is O(NlogN).</span>\n<span style=\"color: #408080; font-style: italic\">     * so in 2D matrix, we can sum up all values from row i to row j and</span>\n<span style=\"color: #408080; font-style: italic\">     * create a 1D array to use 1D array solution.</span>\n<span style=\"color: #408080; font-style: italic\">     * If col number is less than row number, we can sum up all values</span>\n<span style=\"color: #408080; font-style: italic\">     * from col i to col j then use 1D array solution.</span>\n<span style=\"color: #408080; font-style: italic\">    */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxSumSubmatrix</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> matrix<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> matrix<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>row<span style=\"color: #666666\">,</span>col<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>row<span style=\"color: #666666\">,</span>col<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">//indicating sum up in every row or every column</span>\n        <span style=\"color: #B00040\">boolean</span> colIsBig <span style=\"color: #666666\">=</span> col <span style=\"color: #666666\">&gt;</span> row<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> array <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n            <span style=\"color: #408080; font-style: italic\">// sum from row j to row i</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span> j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0;</span> j<span style=\"color: #666666\">--){</span>\n                <span style=\"color: #B00040\">int</span> val <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                TreeSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TreeSet<span style=\"color: #666666\">&lt;&gt;();</span>\n                set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0);</span>\n                <span style=\"color: #408080; font-style: italic\">//traverse every column/row and sum up</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> k<span style=\"color: #666666\">++){</span>\n                    array<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+=</span> colIsBig <span style=\"color: #666666\">?</span> matrix<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">][</span>k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">:</span> matrix<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">];</span>\n                    val <span style=\"color: #666666\">+=</span> array<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                    <span style=\"color: #408080; font-style: italic\">//use TreeMap to binary search previous sum to get possible result</span>\n                    Integer subres <span style=\"color: #666666\">=</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">ceiling</span><span style=\"color: #666666\">(</span>val <span style=\"color: #666666\">-</span> target<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">!=</span>subres<span style=\"color: #666666\">){</span>\n                        res<span style=\"color: #666666\">=</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>res<span style=\"color: #666666\">,</span>val<span style=\"color: #666666\">-</span>subres<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                    set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>val<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9, 25",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 397,
        "NUMBER": 391,
        "TITLE": "Perfect Rectangle",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given N axis-aligned rectangles where N &gt; 0, determine if they all together form an exact cover of a rectangular region.\n</p>\n\n    <p>\n        Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).\n    </p>\n\n    <div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_perfect.gif\"></div>\n    <p><b>Example 1:</b>\n    </p><pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\nReturn true. All 5 rectangles together form an exact cover of a rectangular region.\n</pre>\n    <p></p>\n\n    <div style=\"clear:both\"></div>\n\n    <div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_separated.gif\"></div>\n    <p><b>Example 2:</b>\n    </p><pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\nReturn false. Because there is a gap between the two rectangular regions.\n</pre>\n    <p></p>\n\n    <div style=\"clear:both\"></div>\n\n    <div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_hole.gif\"></div>\n    <p><b>Example 3:</b>\n    </p><pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\nReturn false. Because there is a gap in the top center.\n</pre>\n    <p></p>\n\n    <div style=\"clear:both\"></div>\n\n    <div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_intersect.gif\"></div>\n    <p><b>Example 4:</b>\n    </p><pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\nReturn false. Because two of the rectangles overlap with each other.\n</pre>\n    <p></p>\n\n    <div style=\"clear:both\"></div><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// 1. the large rectangle area == the sum of small rectangles</span>\n    <span style=\"color: #408080; font-style: italic\">// 2. count of all the points should be even, and</span>\n    <span style=\"color: #408080; font-style: italic\">//      that of all the four corner points should be one</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">isRectangleCover</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> rectangles<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>rectangles<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> rectangles<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> x1 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> x2 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> y1 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> y2 <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">;</span>\n\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #B00040\">int</span> area <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> rect <span style=\"color: #666666\">:</span> rectangles<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            x1 <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[0],</span> x1<span style=\"color: #666666\">);</span>\n            y1 <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[1],</span> y1<span style=\"color: #666666\">);</span>\n            x2 <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[2],</span> x2<span style=\"color: #666666\">);</span>\n            y2 <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[3],</span> y2<span style=\"color: #666666\">);</span>\n\n            area <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">-</span> rect<span style=\"color: #666666\">[0])</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>rect<span style=\"color: #666666\">[3]</span> <span style=\"color: #666666\">-</span> rect<span style=\"color: #666666\">[1]);</span>\n\n            String s1 <span style=\"color: #666666\">=</span> rect<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> rect<span style=\"color: #666666\">[1];</span>\n            String s2 <span style=\"color: #666666\">=</span> rect<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> rect<span style=\"color: #666666\">[3];</span>\n            String s3 <span style=\"color: #666666\">=</span> rect<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> rect<span style=\"color: #666666\">[3];</span>\n            String s4 <span style=\"color: #666666\">=</span> rect<span style=\"color: #666666\">[2]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> rect<span style=\"color: #666666\">[1];</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">))</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s2<span style=\"color: #666666\">))</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>s2<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s3<span style=\"color: #666666\">))</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>s3<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s4<span style=\"color: #666666\">))</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>s4<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>x1 <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> y1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>x1 <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> y2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                <span style=\"color: #666666\">!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>x2 <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> y1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">!</span>set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>x2 <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot; &quot;</span> <span style=\"color: #666666\">+</span> y2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span>\n                set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">4)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> area <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">(</span>x2<span style=\"color: #666666\">-</span>x1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">(</span>y2<span style=\"color: #666666\">-</span>y1<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 398,
        "NUMBER": 403,
        "TITLE": "Frog Jump",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\n\n    <p>Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\n    </p>\n\n    <p>If the frog's last jump was <i>k</i> units, then its next jump must be either <i>k</i> - 1, <i>k</i>, or <i>k</i> + 1 units. Note that the frog can only jump in the forward direction.</p>\n\n    <p><b>Note:</b>\n    </p><ul>\n    <li>The number of stones is ≥ 2 and is &lt; 1,100.</li>\n    <li>Each stone's position will be a non-negative integer &lt; 2<sup>31</sup>.</li>\n    <li>The first stone's position is always 0.</li>\n</ul>\n    <p></p>\n\n    <p><b>Example 1:</b>\n    </p><pre><b>[0,1,3,5,6,8,12,17]</b>\n\nThere are a total of 8 stones.\nThe first stone at the 0th unit, second stone at the 1st unit,\nthird stone at the 3rd unit, and so on...\nThe last stone at the 17th unit.\n\n<b>Return true</b>. The frog can jump to the last stone by jumping\n1 unit to the 2nd stone, then 2 units to the 3rd stone, then\n2 units to the 4th stone, then 3 units to the 6th stone,\n4 units to the 7th stone, and 5 units to the 8th stone.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b>\n    </p><pre><b>[0,1,2,3,4,8,9,11]</b>\n\n<b>Return false</b>. There is no way to jump to the last stone as\nthe gap between the 5th and 6th stone is too large.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">canCross</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> stones<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>stones<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;(</span>stones<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">);</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;());</span>\n        map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(0).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(1);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> stones<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>stones<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> stones<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> stone <span style=\"color: #666666\">=</span> stones<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> step <span style=\"color: #666666\">:</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>stone<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> reach <span style=\"color: #666666\">=</span> step <span style=\"color: #666666\">+</span> stone<span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>reach <span style=\"color: #666666\">==</span> stones<span style=\"color: #666666\">[</span>stones<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                HashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> set <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>reach<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>set <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>step<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>step <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>step <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n                    set<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>step <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 399,
        "NUMBER": 407,
        "TITLE": "Trapping Rain Water II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an <code>m x n</code> matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.\n</p>\n\n    <p><b>Note:</b><br>\n        Both <i>m</i> and <i>n</i> are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.\n    </p>\n\n    <p><b>Example:</b>\n    </p><pre>Given the following 3x6 height map:\n[\n  [1,4,3,1,3,2],\n  [3,2,1,3,2,4],\n  [2,3,3,2,3,1]\n]\n\nReturn 4.\n</pre>\n    <p></p>\n\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/rainwater_empty.png\"><br>\n        The above image represents the elevation map <code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> before the rain.\n    </p>\n\n    <p>\n        <img src=\"https://leetcode.com/static/images/problemset/rainwater_fill.png\"><br>\n        After the rain, water are trapped between the blocks. The total volume of water trapped is 4.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Cell</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> height<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Cell</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> row<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> col<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> height<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">=</span> row<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">=</span> col<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">height</span> <span style=\"color: #666666\">=</span> height<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">trapRainWater</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> heights<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>heights <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> heights<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> heights<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        PriorityQueue<span style=\"color: #666666\">&lt;</span>Cell<span style=\"color: #666666\">&gt;</span> queue <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;&gt;(1,</span> <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Cell<span style=\"color: #666666\">&gt;(){</span>\n            <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Cell a<span style=\"color: #666666\">,</span> Cell b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">height</span> <span style=\"color: #666666\">-</span> b<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">height</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">});</span>\n\n        <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> heights<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> heights<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[][]</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">][</span>n<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Initially, add all the Cells which are on borders to the queue.</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> m<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            visited<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            visited<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Cell<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> heights<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][0]));</span>\n            queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Cell<span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">,</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> heights<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]));</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            visited<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            visited<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Cell<span style=\"color: #666666\">(0,</span> i<span style=\"color: #666666\">,</span> heights<span style=\"color: #666666\">[0][</span>i<span style=\"color: #666666\">]));</span>\n            queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Cell<span style=\"color: #666666\">(</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> i<span style=\"color: #666666\">,</span> heights<span style=\"color: #666666\">[</span>m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1][</span>i<span style=\"color: #666666\">]));</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// from the borders, pick the shortest cell visited and check its neighbors:</span>\n        <span style=\"color: #408080; font-style: italic\">// if the neighbor is shorter, collect the water it can trap and</span>\n        <span style=\"color: #408080; font-style: italic\">// update its height as its height plus the water trapped</span>\n        <span style=\"color: #408080; font-style: italic\">// add all its neighbors to the queue.</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> dirs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]{{-1,</span> <span style=\"color: #666666\">0},</span> <span style=\"color: #666666\">{1,</span> <span style=\"color: #666666\">0},</span> <span style=\"color: #666666\">{0,</span> <span style=\"color: #666666\">-1},</span> <span style=\"color: #666666\">{0,</span> <span style=\"color: #666666\">1}};</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            Cell cell <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dir <span style=\"color: #666666\">:</span> dirs<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> row <span style=\"color: #666666\">=</span> cell<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">row</span> <span style=\"color: #666666\">+</span> dir<span style=\"color: #666666\">[0];</span>\n                <span style=\"color: #B00040\">int</span> col <span style=\"color: #666666\">=</span> cell<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">col</span> <span style=\"color: #666666\">+</span> dir<span style=\"color: #666666\">[1];</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>row <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> row <span style=\"color: #666666\">&lt;</span> m <span style=\"color: #666666\">&amp;&amp;</span> col <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> col <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>visited<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                    visited<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                    res <span style=\"color: #666666\">+=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(0,</span> cell<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">height</span> <span style=\"color: #666666\">-</span> heights<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">]);</span>\n                    queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Cell<span style=\"color: #666666\">(</span>row<span style=\"color: #666666\">,</span> col<span style=\"color: #666666\">,</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>heights<span style=\"color: #666666\">[</span>row<span style=\"color: #666666\">][</span>col<span style=\"color: #666666\">],</span> cell<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">height</span><span style=\"color: #666666\">)));</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19, 20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 400,
        "NUMBER": 410,
        "TITLE": "Split Array Largest Sum",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given an array which consists of non-negative integers and an integer <i>m</i>, you can split the array into <i>m</i> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <i>m</i> subarrays.\n</p>\n\n    <p><b>Note:</b><br>\n        If <i>n</i> is the length of array, assume the following constraints are satisfied:\n    </p><ul>\n    <li>1 ≤ <i>n</i> ≤ 1000</li>\n    <li>1 ≤ <i>m</i> ≤ min(50, <i>n</i>)</li>\n</ul>\n    <p></p>\n\n    <p><b>Examples: </b>\n    </p><pre>Input:\n<b>nums</b> = [7,2,5,10,8]\n<b>m</b> = 2\n\nOutput:\n18\n\nExplanation:\nThere are four ways to split <b>nums</b> into two subarrays.\nThe best way is to split it into <b>[7,2,5]</b> and <b>[10,8]</b>,\nwhere the largest sum among the two subarrays is only 18.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">splitArray</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">long</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">,</span> max<span style=\"color: #666666\">);</span>\n            sum <span style=\"color: #666666\">+=</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>m <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> sum<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">//binary search</span>\n        <span style=\"color: #B00040\">long</span> l <span style=\"color: #666666\">=</span> max<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">long</span> r <span style=\"color: #666666\">=</span> sum<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">long</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">+</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>valid<span style=\"color: #666666\">(</span>mid<span style=\"color: #666666\">,</span> nums<span style=\"color: #666666\">,</span> m<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                r <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                l <span style=\"color: #666666\">=</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> l<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">valid</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">long</span> target<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> m<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">long</span> total <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">:</span> nums<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            total <span style=\"color: #666666\">+=</span> num<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>total <span style=\"color: #666666\">&gt;</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                total <span style=\"color: #666666\">=</span> num<span style=\"color: #666666\">;</span>\n                count<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">&gt;</span> m<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "6, 9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 401,
        "NUMBER": 420,
        "TITLE": "Strong Password Checker",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A password is considered strong if below conditions are all met:</p>\n\n    <ol>\n        <li> It has at least 6 characters and at most 20 characters. </li>\n        <li> It must contain at least one lowercase letter, at least one uppercase letter, and at least one digit. </li>\n        <li> It must NOT contain three repeating characters in a row (\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met). </li>\n    </ol>\n\n    <p>Write a function strongPasswordChecker(s), that takes a string s as input, and return the <b>MINIMUM</b> change required to make s a strong password. If s is already strong, return 0.</p>\n\n    <p>Insertion, deletion or replace of any one character are all considered as one change.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">strongPasswordChecker</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> a <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> A <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> d <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> carr <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>carr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> <span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isLowerCase</span><span style=\"color: #666666\">(</span>carr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> a <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isUpperCase</span><span style=\"color: #666666\">(</span>carr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> A <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Character<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isDigit</span><span style=\"color: #666666\">(</span>carr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> d <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> carr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> carr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> carr<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> i<span style=\"color: #666666\">++;</span>\n            arr<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">-</span> j<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> total_missing <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>a <span style=\"color: #666666\">+</span> A <span style=\"color: #666666\">+</span> d<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">6)</span> <span style=\"color: #666666\">{</span>\n            res <span style=\"color: #666666\">+=</span> total_missing <span style=\"color: #666666\">+</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(0,</span> <span style=\"color: #666666\">6</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">+</span> total_missing<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> over_len <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">20,</span> <span style=\"color: #666666\">0),</span> left_over <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            res <span style=\"color: #666666\">+=</span> over_len<span style=\"color: #666666\">;</span>\n\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">3;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> over_len <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">||</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1))</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                    arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>over_len<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n                    over_len <span style=\"color: #666666\">-=</span> k<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">&amp;&amp;</span> over_len <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> need <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2;</span>\n                    arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-=</span> over_len<span style=\"color: #666666\">;</span>\n                    over_len <span style=\"color: #666666\">-=</span> need<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">3)</span>\n                    left_over <span style=\"color: #666666\">+=</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">3;</span>\n            <span style=\"color: #666666\">}</span>\n            res <span style=\"color: #666666\">+=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>total_missing<span style=\"color: #666666\">,</span> left_over<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 402,
        "NUMBER": 432,
        "TITLE": "All O`one Data Structure",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Implement a data structure supporting the following operations:</p>\n\n    <p>\n    </p><ol>\n    <li>Inc(Key) - Inserts a new key <key> with value 1. Or increments an existing key by 1. Key is guaranteed to be a <b>non-empty</b> string.</key></li>\n    <li>Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a <b>non-empty</b> string.</li>\n    <li>GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string <code>\"\"</code>.</li>\n    <li>GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string <code>\"\"</code>.</li>\n</ol>\n    <p></p>\n\n    <p>\n        Challenge: Perform all these in O(1) time complexity.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\">  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">AllOne</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #408080; font-style: italic\">// maintain a doubly linked list of Buckets</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Bucket head<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Bucket tail<span style=\"color: #666666\">;</span>\n    <span style=\"color: #408080; font-style: italic\">// for accessing a specific Bucket among the Bucket list in O(1) time</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Bucket<span style=\"color: #666666\">&gt;</span> countBucketMap<span style=\"color: #666666\">;</span>\n    <span style=\"color: #408080; font-style: italic\">// keep track of count of keys</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> Map<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> keyCountMap<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">// each Bucket contains all the keys with the same count</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Bucket</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> count<span style=\"color: #666666\">;</span>\n        Set<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> keySet<span style=\"color: #666666\">;</span>\n        Bucket next<span style=\"color: #666666\">;</span>\n        Bucket pre<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Bucket</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> cnt<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            count <span style=\"color: #666666\">=</span> cnt<span style=\"color: #666666\">;</span>\n            keySet <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Initialize your data structure here.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">AllOne</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        head <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Bucket<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">);</span>\n        tail <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Bucket<span style=\"color: #666666\">(</span>Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">);</span>\n        head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> tail<span style=\"color: #666666\">;</span>\n        tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        countBucketMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        keyCountMap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">inc</span><span style=\"color: #666666\">(</span>String key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            changeKey<span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">count</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">1)</span>\n                addBucketAfter<span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> Bucket<span style=\"color: #666666\">(1),</span> head<span style=\"color: #666666\">);</span>\n            head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n            countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(1,</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Decrements an existing key by 1. If Key&#39;s value is 1, remove it from the data structure.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">dec</span><span style=\"color: #666666\">(</span>String key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n                removeKeyFromBucket<span style=\"color: #666666\">(</span>countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">),</span> key<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                changeKey<span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Returns one of the keys with maximal value.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">getMaxKey</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">==</span> head <span style=\"color: #666666\">?</span> <span style=\"color: #BA2121\">&quot;&quot;</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">)</span> tail<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Returns one of the keys with Minimal value.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">getMinKey</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> tail <span style=\"color: #666666\">?</span> <span style=\"color: #BA2121\">&quot;&quot;</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">)</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// helper function to make change on given key according to offset</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">changeKey</span><span style=\"color: #666666\">(</span>String key<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> offset<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        keyCountMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> count <span style=\"color: #666666\">+</span> offset<span style=\"color: #666666\">);</span>\n        Bucket curBucket <span style=\"color: #666666\">=</span> countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">);</span>\n        Bucket newBucket<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> offset<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// target Bucket already exists</span>\n            newBucket <span style=\"color: #666666\">=</span> countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> offset<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// add new Bucket</span>\n            newBucket <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Bucket<span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> offset<span style=\"color: #666666\">);</span>\n            countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> offset<span style=\"color: #666666\">,</span> newBucket<span style=\"color: #666666\">);</span>\n            addBucketAfter<span style=\"color: #666666\">(</span>newBucket<span style=\"color: #666666\">,</span> offset <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">?</span> curBucket <span style=\"color: #666666\">:</span> curBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        newBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        removeKeyFromBucket<span style=\"color: #666666\">(</span>curBucket<span style=\"color: #666666\">,</span> key<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">removeKeyFromBucket</span><span style=\"color: #666666\">(</span>Bucket bucket<span style=\"color: #666666\">,</span> String key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            removeBucketFromList<span style=\"color: #666666\">(</span>bucket<span style=\"color: #666666\">);</span>\n            countBucketMap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">count</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">removeBucketFromList</span><span style=\"color: #666666\">(</span>Bucket bucket<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span><span style=\"color: #666666\">;</span>\n        bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        bucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// add newBucket after preBucket</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addBucketAfter</span><span style=\"color: #666666\">(</span>Bucket newBucket<span style=\"color: #666666\">,</span> Bucket preBucket<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        newBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> preBucket<span style=\"color: #666666\">;</span>\n        newBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> preBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        preBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pre</span> <span style=\"color: #666666\">=</span> newBucket<span style=\"color: #666666\">;</span>\n        preBucket<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> newBucket<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your AllOne object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * AllOne obj = new AllOne();</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.inc(key);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.dec(key);</span>\n<span style=\"color: #408080; font-style: italic\"> * String param_3 = obj.getMaxKey();</span>\n<span style=\"color: #408080; font-style: italic\"> * String param_4 = obj.getMinKey();</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 403,
        "NUMBER": 440,
        "TITLE": "K-th Smallest in Lexicographical Order",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given integers <code>n</code> and <code>k</code>, find the lexicographically k-th smallest integer in the range from <code>1</code> to <code>n</code>.</p>\n\n    <p>Note: 1 ≤ k ≤ n ≤ 10<sup>9</sup>.</p>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b>\nn: 13   k: 2\n\n<b>Output:</b>\n10\n\n<b>Explanation:</b>\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthNumber</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> curr <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        k <span style=\"color: #666666\">=</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> steps <span style=\"color: #666666\">=</span> calSteps<span style=\"color: #666666\">(</span>n<span style=\"color: #666666\">,</span> curr<span style=\"color: #666666\">,</span> curr <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>steps <span style=\"color: #666666\">&lt;=</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                curr <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">1;</span>\n                k <span style=\"color: #666666\">-=</span> steps<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                curr <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n                k <span style=\"color: #666666\">-=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curr<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">//use long in case of overflow</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">calSteps</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> n1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">long</span> n2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> steps <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>n1 <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            steps <span style=\"color: #666666\">+=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">min</span><span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> n2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> n1<span style=\"color: #666666\">;</span>\n            n1 <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n            n2 <span style=\"color: #666666\">*=</span> <span style=\"color: #666666\">10;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> steps<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "3",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 404,
        "NUMBER": 446,
        "TITLE": "Arithmetic Slices II - Subsequence",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\n\n    <p>For example, these are arithmetic sequences:</p>\n    <pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n    <p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre>\n    <br>\n\n    <p>A zero-indexed array A consisting of N numbers is given. A <b>subsequence</b> slice of that array is any sequence of integers (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) such that 0 ≤ P<sub>0</sub> &lt; P<sub>1</sub> &lt; ... &lt; P<sub>k</sub> &lt; N.</p>\n\n    <p>A <b>subsequence</b> slice (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) of array A is called arithmetic if the sequence A[P<sub>0</sub>], A[P<sub>1</sub>], ..., A[P<sub>k-1</sub>], A[P<sub>k</sub>] is arithmetic. In particular, this means that k ≥ 2.</p>\n\n    <p>The function should return the number of arithmetic subsequence slices in the array A. </p>\n\n    <p>The input contains N integers. Every integer is in the range of -2<sup>31</sup> and 2<sup>31</sup>-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 2<sup>31</sup>-1.</p>\n    <br>\n\n    <p><b>Example:</b>\n    </p><pre><b>Input:</b> [2, 4, 6, 8, 10]\n\n<b>Output:</b> 7\n\n<b>Explanation:</b>\nAll arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">numberOfArithmeticSlices</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;[]</span> maps <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">[</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            maps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #B00040\">int</span> num <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> j <span style=\"color: #666666\">&lt;</span> i<span style=\"color: #666666\">;</span> j<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">)</span> num <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span><span style=\"color: #B00040\">long</span><span style=\"color: #666666\">)</span> num <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MIN_VALUE</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> num <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n                <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> maps<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>diff<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n                maps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>diff<span style=\"color: #666666\">,</span> maps<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>diff<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">+</span> count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n                re <span style=\"color: #666666\">+=</span> count<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 405,
        "NUMBER": 460,
        "TITLE": "LFU Cache",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache. It should support the following operations: <code>get</code> and <code>put</code>.\n</p>\n\n    <p>\n        <code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\n        <code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least <b>recently</b> used key would be evicted.\n    </p>\n\n    <p><b>Follow up:</b><br>\n        Could you do both operations in <b>O(1)</b> time complexity?</p>\n\n    <p><b>Example:</b>\n    </p><pre>LFUCache cache = new LFUCache( 2 /* capacity */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.get(3);       // returns 3.\ncache.put(4, 4);    // evicts key 1.\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">LFUCache</span> <span style=\"color: #666666\">{</span>\n\n    HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> vals<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// key to val</span>\n    HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> counts<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// key to count</span>\n    <span style=\"color: #408080; font-style: italic\">// count to list of keys</span>\n    HashMap<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> LinkedHashSet<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> lists<span style=\"color: #666666\">;</span>\n    <span style=\"color: #B00040\">int</span> cap<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// capacity of the cache</span>\n    <span style=\"color: #B00040\">int</span> min <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span> <span style=\"color: #408080; font-style: italic\">// track the min value</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">LFUCache</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> capacity<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        cap <span style=\"color: #666666\">=</span> capacity<span style=\"color: #666666\">;</span>\n        vals <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        counts <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        lists <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(1,</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedHashSet<span style=\"color: #666666\">&lt;&gt;());</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">get</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Can&#39;t find val for the key</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #408080; font-style: italic\">// Update count of a key in count to key map</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> counts<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        counts<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n        lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// If least frequent key is removed</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> min <span style=\"color: #666666\">&amp;&amp;</span> lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            min<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #408080; font-style: italic\">// Update key to list map</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1))</span>\n            lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedHashSet<span style=\"color: #666666\">&lt;&gt;());</span>\n        lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">put</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> key<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> value<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cap <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Update key to val map</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> value<span style=\"color: #666666\">);</span>\n            get<span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// If is full remove the min</span>\n        <span style=\"color: #408080; font-style: italic\">// remove from lists and vals map</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;=</span> cap<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> evit <span style=\"color: #666666\">=</span> lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">iterator</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">();</span>\n            lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>min<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>evit<span style=\"color: #666666\">);</span>\n            vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>evit<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Not in cache</span>\n        vals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> value<span style=\"color: #666666\">);</span>\n        counts<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n        min <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        lists<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(1).</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>key<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your LFUCache object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * LFUCache obj = new LFUCache(capacity);</span>\n<span style=\"color: #408080; font-style: italic\"> * int param_1 = obj.get(key);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.put(key,value);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 406,
        "NUMBER": 466,
        "TITLE": "Count The Repetitions",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Define <code>S = [s,n]</code> as the string S which consists of n connected strings s. For example, <code>[\"abc\", 3]</code> =\"abcabcabc\". </p>\n    <p>On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.</p>\n    <p>You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 10<sup>6</sup> and 1 ≤ n2 ≤ 10<sup>6</sup>. Now consider the strings S1 and S2, where <code>S1=[s1,n1]</code> and <code>S2=[s2,n2]</code>. Find the maximum integer M such that <code>[S2,M]</code> can be obtained from <code>S1</code>.</p>\n\n    <p><b>Example:</b>\n    </p><pre>Input:\ns1=\"acb\", n1=4\ns2=\"ab\", n2=2\n\nReturn:\n2\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getMaxRepetitions</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> n2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// check if [s1. ∞] obtains s2</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>ableToObtain<span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">,</span> s2<span style=\"color: #666666\">))</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> cnt <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n        String s <span style=\"color: #666666\">=</span> s1<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// record &#39;remain string&#39;</span>\n        StringBuilder remainBuilder<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// record all the &#39;remain string&#39;</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> stringList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #408080; font-style: italic\">// record matching count from start to the current remain string</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> countList <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        stringList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">// record empty string</span>\n        countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> n1<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            remainBuilder <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n            <span style=\"color: #408080; font-style: italic\">// get the next remain string, returns the count of matching</span>\n            cnt <span style=\"color: #666666\">+=</span> getRemain<span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">,</span> s2<span style=\"color: #666666\">,</span> remainBuilder<span style=\"color: #666666\">);</span>\n            String remain <span style=\"color: #666666\">=</span> remainBuilder<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #408080; font-style: italic\">// if there is a loop, break</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((</span>k <span style=\"color: #666666\">=</span> stringList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">indexOf</span><span style=\"color: #666666\">(</span>remain<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">-1)</span>\n                <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            stringList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>remain<span style=\"color: #666666\">);</span> <span style=\"color: #408080; font-style: italic\">// record the remain string into arraylist</span>\n            countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cnt<span style=\"color: #666666\">);</span>\n            s <span style=\"color: #666666\">=</span> remain <span style=\"color: #666666\">+</span> s1<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// append s1 to make a new string</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// here, k is the beginning of the loop</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">-1)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> cnt <span style=\"color: #666666\">/</span> n2<span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// if there is no loop</span>\n        <span style=\"color: #408080; font-style: italic\">// get matching count in the loop, and loop length</span>\n        <span style=\"color: #B00040\">int</span> countOfLoop <span style=\"color: #666666\">=</span> cnt <span style=\"color: #666666\">-</span> countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> loopLength <span style=\"color: #666666\">=</span> stringList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span>\n        cnt <span style=\"color: #666666\">=</span> countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> countOfLoop <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">((</span>n1 <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> loopLength<span style=\"color: #666666\">);</span>\n        n1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>n1 <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> loopLength<span style=\"color: #666666\">;</span>\n        cnt <span style=\"color: #666666\">+=</span> countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">+</span> n1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> countList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cnt <span style=\"color: #666666\">/</span> n2<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">ableToObtain</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[]</span> cnt <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">boolean</span><span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span>\n            cnt<span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>cnt<span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">])</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">getRemain</span><span style=\"color: #666666\">(</span>String s1<span style=\"color: #666666\">,</span> String s2<span style=\"color: #666666\">,</span> StringBuilder remain<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> cnt <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> lastMatch <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1,</span> p2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> p1 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> p1 <span style=\"color: #666666\">&lt;</span> s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> p1<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p1<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>p2<span style=\"color: #666666\">))</span> <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(++</span>p2 <span style=\"color: #666666\">==</span> s2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                p2 <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n                cnt<span style=\"color: #666666\">++;</span>\n                lastMatch <span style=\"color: #666666\">=</span> p1<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        remain<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>s1<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>lastMatch <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cnt<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 407,
        "NUMBER": 467,
        "TITLE": "Unique Substrings in Wraparound String",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Consider the string <code>s</code> to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so <code>s</code> will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".</p>\n\n    <p>Now we have another string <code>p</code>. Your job is to find out how many unique non-empty substrings of <code>p</code> are present in <code>s</code>. In particular, your input is the string <code>p</code> and you need to output the number of different non-empty substrings of <code>p</code> in the string <code>s</code>.</p>\n\n    <p><b>Note:</b> <code>p</code> consists of only lowercase English letters and the size of p might be over 10000.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> \"a\"\n<b>Output:</b> 1\n\n<b>Explanation:</b> Only the substring \"a\" of string \"a\" is in the string \u0010s.\n</pre>\n    <p></p>\n\n    <p><b>Example 2:</b><br>\n    </p><pre><b>Input:</b> \"cac\"\n<b>Output:</b> 2\n<b>Explanation:</b> There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\n</pre>\n    <p></p>\n\n    <p><b>Example 3:</b><br>\n    </p><pre><b>Input:</b> \"zab\"\n<b>Output:</b> 6\n<b>Explanation:</b> There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\n</pre>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findSubstringInWraproundString</span><span style=\"color: #666666\">(</span>String p<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// count[i] is the maximum unique substring end with ith letter.</span>\n        <span style=\"color: #408080; font-style: italic\">// 0 - &#39;a&#39;, 1 - &#39;b&#39;, ..., 25 - &#39;z&#39;.</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[26];</span>\n\n        <span style=\"color: #408080; font-style: italic\">// store longest contiguous substring ends at current position.</span>\n        <span style=\"color: #B00040\">int</span> maxLengthCur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">||</span> <span style=\"color: #666666\">(</span>p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">-</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">25)))</span> <span style=\"color: #666666\">{</span>\n                maxLengthCur<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                maxLengthCur <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> p<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">;</span>\n            count<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>count<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">],</span> maxLengthCur<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Sum to get result</span>\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">26;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            sum <span style=\"color: #666666\">+=</span> count<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sum<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 408,
        "NUMBER": 472,
        "TITLE": "Concatenated Words",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p>Given a list of words (<b>without duplicates</b>), please write a program that returns all concatenated words in the given list of words.\n    </p><p>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p>\n\n    <p><b>Example:</b><br>\n    </p><pre><b>Input:</b> [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n\n<b>Output:</b> [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n\n<b>Explanation:</b> \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; <br> \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; <br>\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n</pre>\n    <p></p>\n\n    <p><b>Note:</b><br>\n    </p><ol>\n    <li>The number of elements of the given array will not exceed <code>10,000 </code>\n    </li><li>The length sum of elements in the given array will not exceed <code>600,000</code>. </li>\n    <li>All the input string will only include lower case letters.</li>\n    <li>The returned elements order does not matter. </li>\n</ol>\n    <p></p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TrieNode</span> <span style=\"color: #666666\">{</span>\n        TrieNode<span style=\"color: #666666\">[]</span> sons<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">boolean</span> isEnd<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">TrieNode</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n            sons <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">[26];</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">findAllConcatenatedWordsInADict</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>words <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> words<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        TrieNode root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String word <span style=\"color: #666666\">:</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// construct Trie tree</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            addWord<span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>String word <span style=\"color: #666666\">:</span> words<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// test word is a concatenated word or not</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>testWord<span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">(),</span> <span style=\"color: #666666\">0,</span> root<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0))</span> <span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// count means how many words during the search path</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">testWord</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chars<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> index<span style=\"color: #666666\">,</span> TrieNode root<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> count<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> chars<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> index<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>chars<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>chars<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">isEnd</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> n <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span> <span style=\"color: #408080; font-style: italic\">// no next word, so test count to get result.</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> count <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>testWord<span style=\"color: #666666\">(</span>chars<span style=\"color: #666666\">,</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> root<span style=\"color: #666666\">,</span> count <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1))</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>chars<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addWord</span><span style=\"color: #666666\">(</span>String str<span style=\"color: #666666\">,</span> TrieNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> chars <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> chars<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n            <span style=\"color: #666666\">}</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sons</span><span style=\"color: #666666\">[</span>c <span style=\"color: #666666\">-</span> <span style=\"color: #BA2121\">&#39;a&#39;</span><span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEnd</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9, 11, 14",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 409,
        "NUMBER": 480,
        "TITLE": "Sliding Window Median",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\n    Examples: <br>\n    <p><code>[2,3,4]</code> , the median is <code>3</code></p>\n    <p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code> </p>\n\n    <p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.</p>\n\n    <p>For example,<br>\n        Given <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p>\n\n    <pre>Window position                Median\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n    <p>Therefore, return the median sliding window as <code>[1,-1,-1,3,5,6]</code>.</p>\n\n    <p><b>Note: </b><br>\n        You may assume <i>k</i> is always valid, ie: 1 ? k ? input array's size for non-empty array.</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> minHeap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n    PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> maxHeap <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> PriorityQueue<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>\n            <span style=\"color: #008000; font-weight: bold\">new</span> Comparator<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">compare</span><span style=\"color: #666666\">(</span>Integer i1<span style=\"color: #666666\">,</span> Integer i2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> i2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">compareTo</span><span style=\"color: #666666\">(</span>i1<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">);</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">medianSlidingWindow</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>n <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[]</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">double</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;=</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                result<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> getMedian<span style=\"color: #666666\">();</span>\n                remove<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                add<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">add</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> getMedian<span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">remove</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&lt;</span> getMedian<span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>num<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n            maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">double</span> <span style=\"color: #0000FF\">getMedian</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">((</span><span style=\"color: #B00040\">double</span><span style=\"color: #666666\">)</span> maxHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">double</span><span style=\"color: #666666\">)</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2.0;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">double</span><span style=\"color: #666666\">)</span> minHeap<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "20",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 410,
        "NUMBER": 552,
        "TITLE": "Student Attendance Record II",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\n\n    <p>A student attendance record is a string that only contains the following three characters:</p>\n\n    <p>\n    </p><ol>\n    <li><b>'A'</b> : Absent. </li>\n    <li><b>'L'</b> : Late.</li>\n    <li> <b>'P'</b> : Present. </li>\n</ol>\n    <p></p>\n\n    <p>\n        A record is regarded as rewardable if it doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.</p>\n\n    <p><b>Example 1:</b><br>\n    </p><pre><b>Input:</b> n = 2\n<b>Output:</b> 8\n<b>Explanation:</b>\nThere are 8 records with length 2 will be regarded as rewardable:\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times.\n</pre>\n    <p></p>\n\n    <p><b>Note:</b>\n        The value of <b>n</b> won't exceed 100,000.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> M <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1000000007;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">checkRecord</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// ending with P or L, no A</span>\n        <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[]</span> PorL <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        <span style=\"color: #408080; font-style: italic\">// ending with P, no A</span>\n        <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[]</span> P <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">long</span><span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1];</span>\n        PorL<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> P<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> PorL<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> P<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">2;</span> i <span style=\"color: #666666\">&lt;=</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            P<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> PorL<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1];</span>\n            PorL<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>P<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">+</span> P<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> P<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">2])</span> <span style=\"color: #666666\">%</span> M<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">long</span> res <span style=\"color: #666666\">=</span> PorL<span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n        <span style=\"color: #408080; font-style: italic\">// inserting A into (n-1)-length strings</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n    \t    <span style=\"color: #B00040\">long</span> s <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>PorL<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">*</span> PorL<span style=\"color: #666666\">[</span>n <span style=\"color: #666666\">-</span> i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1])</span> <span style=\"color: #666666\">%</span> M<span style=\"color: #666666\">;</span>\n            res <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>res <span style=\"color: #666666\">+</span> s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> M<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">)</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 411,
        "NUMBER": 588,
        "TITLE": "Design In-Memory File System",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"block-markdown question\">\n    <h2>Question</h2>\n    <blockquote><p>Design an in-memory file system to simulate the following functions:</p>\n\n        <p><code>ls</code>: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names <b>in this directory</b>. Your output (file and directory names together) should in <b>lexicographic order</b>.</p>\n\n        <p><code>mkdir</code>: Given a <b>directory path</b> that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type. </p>\n\n        <p><code>addContentToFile</code>: Given a <b>file path</b> and <b>file content</b> in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to <b>append</b> given content to original content. This function has void return type.</p>\n\n        <p><code>readContentFromFile</code>: Given a <b>file path</b>, return its <b>content</b> in string format.</p>\n\n        <p><b>Example:</b><br>\n        </p><pre><b>Input:</b>\n[\"FileSystem\",\"ls\",\"mkdir\",\"addContentToFile\",\"ls\",\"readContentFromFile\"]\n[[],[\"/\"],[\"/a/b/c\"],[\"/a/b/c/d\",\"hello\"],[\"/\"],[\"/a/b/c/d\"]]\n<b>Output:</b>\n[null,[],null,null,[\"a\"],\"hello\"]\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/filesystem.png\" width=\"66%\" alt=\"filesystem\">\n</pre>\n        <p></p>\n\n        <p><b>Note:</b><br>\n        </p><ol>\n            <li>You can assume all file or directory paths are absolute paths which begin with <code>/</code> and do not end with <code>/</code> except that the path is just <code>\"/\"</code>.</li>\n            <li>You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.</li>\n            <li>You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.</li>\n        </ol>\n        <p></p></blockquote>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">FileSystem</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Dir</span> <span style=\"color: #666666\">{</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> Dir<span style=\"color: #666666\">&gt;</span> dirs <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">,</span> String<span style=\"color: #666666\">&gt;</span> files <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n    <span style=\"color: #666666\">}</span>\n\n    Dir root<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">FileSystem</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        root <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Dir<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Time complexity is O(m + n + klog(k))</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">ls</span><span style=\"color: #666666\">(</span>String path<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Dir t <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        List<span style=\"color: #666666\">&lt;</span>String<span style=\"color: #666666\">&gt;</span> files <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            String<span style=\"color: #666666\">[]</span> d <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                t <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">files</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]))</span> <span style=\"color: #666666\">{</span>\n                files<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> files<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                t <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        files<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">()));</span>\n        files<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;(</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">files</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">keySet</span><span style=\"color: #666666\">()));</span>\n        Collections<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>files<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> files<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Time complexity is O(m + n)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">mkdir</span><span style=\"color: #666666\">(</span>String path<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Dir t <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        String<span style=\"color: #666666\">[]</span> d <span style=\"color: #666666\">=</span> path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span>\n                t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> <span style=\"color: #008000; font-weight: bold\">new</span> Dir<span style=\"color: #666666\">());</span>\n            t <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Time complexity is O(m + n)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addContentToFile</span><span style=\"color: #666666\">(</span>String filePath<span style=\"color: #666666\">,</span> String content<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Dir t <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        String<span style=\"color: #666666\">[]</span> d <span style=\"color: #666666\">=</span> filePath<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            t <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">files</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">files</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1],</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> content<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Time complexity is O(m + n)</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">readContentFromFile</span><span style=\"color: #666666\">(</span>String filePath<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Dir t <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        String<span style=\"color: #666666\">[]</span> d <span style=\"color: #666666\">=</span> filePath<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">split</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;/&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            t <span style=\"color: #666666\">=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">dirs</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">files</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>d<span style=\"color: #666666\">[</span>d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your FileSystem object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * FileSystem obj = new FileSystem();</span>\n<span style=\"color: #408080; font-style: italic\"> * List&lt;String&gt; param_1 = obj.ls(path);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.mkdir(path);</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.addContentToFile(filePath,content);</span>\n<span style=\"color: #408080; font-style: italic\"> * String param_4 = obj.readContentFromFile(filePath);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10",
        "COMPANIES": "",
        "SPECIALTAGS": ""
    },
    {
        "ID": 412,
        "NUMBER": 10001,
        "TITLE": "Remove Duplicate Characters",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p>\n    <p>Remove duplicate characters in a string if char appear more than once\n    </p>\n\n    <p>\n        <b>Example:</b><br>\n    </p>\n    <pre>Given \"abcba\", return <b>c</b>.</pre>\n    <p></p>\n    <p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * for each element in input</span>\n<span style=\"color: #408080; font-style: italic\">     *      put count and char into map</span>\n<span style=\"color: #408080; font-style: italic\">     * for each element in input</span>\n<span style=\"color: #408080; font-style: italic\">     *      if count == 1</span>\n<span style=\"color: #408080; font-style: italic\">     *          add to res</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * @param input</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">remove</span><span style=\"color: #666666\">(</span>String input<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> charToCount <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        StringBuilder res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>charToCount<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                charToCount<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> charToCount<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                charToCount<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">1);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> input<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>charToCount<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1)</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 413,
        "NUMBER": 10002,
        "TITLE": "Find Kth Nearest Point",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<section>\n    <h1>Nearest Kth</h1>\n    <p>Use quickSelect to find the kth nearest point to the origin point\n        <br>\n        'Time complexity: average O(n), worst O(n^2) when always pick the most\n        right one -- the time complexity of quick select'</p>\n    <p>Use max Heap\n        maintain a max heap with size K,\n        every time meet a new point, check if its distance is\n        smaller than the heap.peek()\n        if yes, pop out the peek, push this point into heap\n        in the end we will have K points which are the nearest points\n        <br>\n        'Time complexity: O(nlgk), space complexity:O(k)'</p>\n</section>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">package</span> <span style=\"color: #0000FF; font-weight: bold\">facebook.phone.AprilJune.NearestKth</span><span style=\"color: #666666\">;</span>\n\n<span style=\"color: #008000; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">java.util.Random</span><span style=\"color: #666666\">;</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> Point <span style=\"color: #0000FF\">findNearestKthPoint</span><span style=\"color: #666666\">(</span>Point<span style=\"color: #666666\">[]</span> points<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">){</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>k <span style=\"color: #666666\">&gt;</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">||</span> k <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">throw</span> <span style=\"color: #008000; font-weight: bold\">new</span> IllegalArgumentException<span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;K&#39;s value is invaild.\\n&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> quickSelect<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> points<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> k <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> Point <span style=\"color: #0000FF\">quickSelect</span><span style=\"color: #666666\">(</span>Point<span style=\"color: #666666\">[]</span> points<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> left<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> right<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Random rand <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Random<span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> pivotIndex <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0){</span>\n            pivotIndex <span style=\"color: #666666\">=</span> rand<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">(</span>right <span style=\"color: #666666\">-</span>left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">+</span> left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        pivotIndex <span style=\"color: #666666\">=</span> partition<span style=\"color: #666666\">(</span>pivotIndex<span style=\"color: #666666\">,</span> points<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> right<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pivotIndex <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> points<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pivotIndex <span style=\"color: #666666\">&gt;</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> quickSelect<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> pivotIndex <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> quickSelect<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">,</span> pivotIndex <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> right<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">partition</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> pivotIndex<span style=\"color: #666666\">,</span> Point<span style=\"color: #666666\">[]</span> points<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> left<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> left<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> right<span style=\"color: #666666\">;</span>\n        Point temp <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>pivotIndex<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> tempDistance <span style=\"color: #666666\">=</span> distance<span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">);</span>\n        swap<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> pivotIndex<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> i <span style=\"color: #666666\">&amp;&amp;</span> distance<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">&gt;=</span> tempDistance<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                j<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #666666\">}</span>\n            points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;</span> i <span style=\"color: #666666\">&amp;&amp;</span> distance<span style=\"color: #666666\">(</span>points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">&lt;=</span> tempDistance<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                i<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            points<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        points<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> i<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span>Point<span style=\"color: #666666\">[]</span> points<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> left<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> pivotIndex<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Point temp <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n        points<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> points<span style=\"color: #666666\">[</span>pivotIndex<span style=\"color: #666666\">];</span>\n        points<span style=\"color: #666666\">[</span>pivotIndex<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">distance</span><span style=\"color: #666666\">(</span>Point point<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">*</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">*</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "13",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 414,
        "NUMBER": 10004,
        "TITLE": "Even Tree",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"content-text challenge-text mlB\">\n    <div class=\"challenge_problem_statement\"><div class=\"msB challenge_problem_statement_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You are given a tree (a simple connected graph with no cycles). The tree has <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> nodes numbered from <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></svg></span> to <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> and is rooted at node <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></svg></span>. </p>\n\n        <p>Find the maximum number of edges you can remove from the tree to get a <a href=\"https://www.hackerrank.com/external_redirect?to=http://en.wikipedia.org/wiki/Tree_%28graph_theory%29\" target=\"_blank\">forest</a> such that each connected component of the forest contains an even number of nodes.</p></div></div></div><div class=\"challenge_input_format\"><div class=\"msB challenge_input_format_title\"><p><strong>Input Format</strong></p></div><div class=\"msB challenge_input_format_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line of input contains two integers <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> and <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.442ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1051.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></svg></span>. <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> is the number of nodes, and <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.442ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1051.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></svg></span> is the number of edges. <br>\n    The next <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.442ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1051.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></svg></span> lines contain two integers <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.129ex\" height=\"2.009ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -576.1 916.8 865.1\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><g transform=\"translate(572,-150)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></svg></span> and <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.927ex\" height=\"2.009ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -576.1 829.8 865.1\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"></path><g transform=\"translate(485,-150)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></svg></span> which specifies an edge of the tree. </p></div></div></div><div class=\"challenge_constraints\"><div class=\"msB challenge_constraints_title\"><p><strong>Constraints</strong></p></div><div class=\"msB challenge_constraints_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><ul>\n    <li><span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"12.91ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 5558.6 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g transform=\"translate(3000,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(4057,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"></path></g></g></svg></span> </li>\n</ul>\n\n    <p><em>Note:</em> The tree in the input will be such that it can always be decomposed into components containing an even number of nodes. </p></div></div></div><div class=\"challenge_output_format\"><div class=\"msB challenge_output_format_title\"><p><strong>Output Format</strong></p></div><div class=\"msB challenge_output_format_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Print the number of removed edges.</p></div></div></div><div class=\"challenge_sample_input\"><div class=\"msB challenge_sample_input_title\"><p><strong>Sample Input</strong></p></div><div class=\"msB challenge_sample_input_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>10 9\n2 1\n3 1\n4 3\n5 2\n6 1\n7 2\n8 6\n9 8\n10 8\n</code></pre></div></div></div><div class=\"challenge_sample_output\"><div class=\"msB challenge_sample_output_title\"><p><strong>Sample Output</strong></p></div><div class=\"msB challenge_sample_output_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>2\n</code></pre></div></div></div><div class=\"challenge_explanation\"><div class=\"msB challenge_explanation_title\"><p><strong>Explanation</strong></p></div><div class=\"msB challenge_explanation_body\"><div class=\"hackdown-content\"><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>On removing edges <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.168ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2225.2 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><g transform=\"translate(389,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g transform=\"translate(890,0)\"><path stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g transform=\"translate(1335,0)\"><path stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g transform=\"translate(1835,0)\"><path stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></svg></span> and <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.168ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2225.2 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><g transform=\"translate(389,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g transform=\"translate(890,0)\"><path stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g transform=\"translate(1335,0)\"><path stroke-width=\"1\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g><g transform=\"translate(1835,0)\"><path stroke-width=\"1\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></svg></span>, we can get the desired result.</p>\n\n    <p>Original tree:  </p>\n\n    <p><img src=\"https://s3.amazonaws.com/hr-challenge-images/110/1466090203-2e0cf4f1be-even.png\" alt=\"even.png\" title=\"\"></p>\n\n    <p>Decomposed tree:  </p>\n\n    <p><img src=\"https://s3.amazonaws.com/hr-challenge-images/110/1466090256-fa2d218233-even1.png\" alt=\"even(1).png\" title=\"\"></p></div></div></div>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Represents Node of the graph and contains the nodes that are attached to it. We may</span>\n<span style=\"color: #408080; font-style: italic\">     * also have ids but emitted as array index is being used as node id.</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Node</span><span style=\"color: #666666\">&lt;</span>T<span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> List<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&lt;</span>T<span style=\"color: #666666\">&gt;&gt;</span> childNodes <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">addChildNode</span><span style=\"color: #666666\">(</span>Node<span style=\"color: #666666\">&lt;</span>T<span style=\"color: #666666\">&gt;</span> node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">childNodes</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Returns an array of integer containing below information about tree represented by input node:</span>\n<span style=\"color: #408080; font-style: italic\">     * \t- No of vertices</span>\n<span style=\"color: #408080; font-style: italic\">     * \t- Edges removed to decompose tree into trees of even vertices</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">decomposeTree</span><span style=\"color: #666666\">(</span>Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> edgesToRemove <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span>Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> childNode <span style=\"color: #666666\">:</span> node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">childNodes</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// For each child node</span>\n            <span style=\"color: #408080; font-style: italic\">// calls current method recursively</span>\n            <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> tmpMetadata <span style=\"color: #666666\">=</span> decomposeTree<span style=\"color: #666666\">(</span>childNode<span style=\"color: #666666\">);</span>\n            <span style=\"color: #408080; font-style: italic\">// Accumulates edgesToRemove in a local variable</span>\n            edgesToRemove <span style=\"color: #666666\">+=</span> tmpMetadata<span style=\"color: #666666\">[1];</span>\n            <span style=\"color: #408080; font-style: italic\">// Checks if returned count is even - if yes, increments edgesToRemove by 1</span>\n            <span style=\"color: #408080; font-style: italic\">// otherwise adds returned count to this method&#39;s count</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>tmpMetadata<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">%</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                edgesToRemove<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                count <span style=\"color: #666666\">+=</span> tmpMetadata<span style=\"color: #666666\">[0];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// Increments count since we are done with current node processing</span>\n        count<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #408080; font-style: italic\">//returns count for input node along with edges that can be removed to decompose the tree</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>count<span style=\"color: #666666\">,</span> edgesToRemove<span style=\"color: #666666\">};</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">main</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> args<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> Scanner in <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Scanner<span style=\"color: #666666\">(</span>System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">in</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> N <span style=\"color: #666666\">=</span> in<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> M <span style=\"color: #666666\">=</span> in<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">();</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Keeps all the nodes of tree in an array</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;[]</span> treeNodes <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;[])</span> <span style=\"color: #008000; font-weight: bold\">new</span> Node<span style=\"color: #666666\">[</span>N<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> M<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Gets first node of vertex</span>\n            <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> node1 <span style=\"color: #666666\">=</span> in<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #408080; font-style: italic\">// Gets second node of vertex</span>\n            <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> node2 <span style=\"color: #666666\">=</span> in<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n\n            <span style=\"color: #408080; font-style: italic\">// If nodes exist in array, reuses those else creates a new node and adds back to array</span>\n            treeNodes<span style=\"color: #666666\">[</span>node1<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>treeNodes<span style=\"color: #666666\">[</span>node1<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">new</span> Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">:</span> treeNodes<span style=\"color: #666666\">[</span>node1<span style=\"color: #666666\">]);</span>\n            treeNodes<span style=\"color: #666666\">[</span>node2<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>treeNodes<span style=\"color: #666666\">[</span>node2<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">new</span> Node<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;()</span> <span style=\"color: #666666\">:</span> treeNodes<span style=\"color: #666666\">[</span>node2<span style=\"color: #666666\">]);</span>\n\n            <span style=\"color: #408080; font-style: italic\">//In order to create edge, we need to link nodes. Since this is a tree, it will be a directed edge and</span>\n            <span style=\"color: #408080; font-style: italic\">// for consistency, we will add bigger node to smaller nodes</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>node1 <span style=\"color: #666666\">&lt;</span> node2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                treeNodes<span style=\"color: #666666\">[</span>node1<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">addChildNode</span><span style=\"color: #666666\">(</span>treeNodes<span style=\"color: #666666\">[</span>node2<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                treeNodes<span style=\"color: #666666\">[</span>node2<span style=\"color: #666666\">].</span><span style=\"color: #7D9029\">addChildNode</span><span style=\"color: #666666\">(</span>treeNodes<span style=\"color: #666666\">[</span>node1<span style=\"color: #666666\">]);</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Since first element of array represents root of tree, we pass it to recursive method decompose tree</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> metadata <span style=\"color: #666666\">=</span> decomposeTree<span style=\"color: #666666\">(</span>treeNodes<span style=\"color: #666666\">[0]);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Print no of edges to be removed returned by above method invocation</span>\n        System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">out</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">println</span><span style=\"color: #666666\">(</span>metadata<span style=\"color: #666666\">[1]);</span>\n\n        in<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">close</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 415,
        "NUMBER": 10005,
        "TITLE": "Most Continuous Appearances",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>\n    Find all characters that have most continuous appearances.\n</p>\n<p>\n    For example:\n</p>\n<p>\n    1. input: \"this send meet\"  output: [s, e]\n</p>\n<p>\n    2. input: \"this is pea\" output: [t,h,i,s,i,s,p,e,a]\n</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Solution 1 use dp table to track max</span>\n<span style=\"color: #408080; font-style: italic\">     * Get result in second scan</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">mostContinuous</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> list <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">;</span>\n\n        s <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">().</span><span style=\"color: #7D9029\">replaceAll</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot; &quot;</span><span style=\"color: #666666\">,</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> n <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> dp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>n<span style=\"color: #666666\">];</span>\n        dp<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">?</span> dp<span style=\"color: #666666\">[</span>i <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n            max <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>max<span style=\"color: #666666\">,</span> dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> dp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>dp<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                list<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">));</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> list<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * Solution2:  Keep track of max, one sacn</span>\n<span style=\"color: #408080; font-style: italic\">     * @param str</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">continuousChar</span><span style=\"color: #666666\">(</span>String str<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        str <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">trim</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>str <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> str<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">();</span>\n        <span style=\"color: #B00040\">int</span> max <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">int</span> count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #B00040\">char</span> prev <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">[0];</span>\n        ArrayList<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">&gt;</span> result <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> prev<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                count<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">&gt;</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">clear</span><span style=\"color: #666666\">();</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">);</span>\n                    max <span style=\"color: #666666\">=</span> count<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>count <span style=\"color: #666666\">==</span> max<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                prev <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                count <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">out</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">println</span><span style=\"color: #666666\">(</span>Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toArray</span><span style=\"color: #666666\">()));</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "9",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 416,
        "NUMBER": 10006,
        "TITLE": "Count Number Occurrence",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<p>Given a large sorted array which contains lots of duplicate numbers, find out the occurrence of each number. Time complexity should be better than O(n).</p>\n\n<pre>\n    //   input [1 (X200), 2(X50), 3(X10)]\n    //   count the occurrence of the elements\n    //   output {\n    //     1: 200,\n    //     2: 50,\n    //     3: 10,\n    //   }\n</pre>\n\n<p>\nthe solution of start point to start point + 2^n is freaking genius.\nworst case comparison:\n[1,2,3,4,5,6] start point + binary search: O(nlogn), start point + 2^n: O(n)\n</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">getCount</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> findLast<span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> arr<span style=\"color: #666666\">);</span>\n            res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">],</span> end <span style=\"color: #666666\">-</span> start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            start <span style=\"color: #666666\">=</span> end <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findLast</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> c <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n        <span style=\"color: #B00040\">int</span> diff <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> diff <span style=\"color: #666666\">&lt;</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> arr<span style=\"color: #666666\">[</span>start <span style=\"color: #666666\">+</span> diff<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            diff <span style=\"color: #666666\">&lt;&lt;=</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> diff <span style=\"color: #666666\">&gt;=</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Binary Search for end</span>\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> start <span style=\"color: #666666\">+</span> diff<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>end <span style=\"color: #666666\">-</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">+</span> start<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> c<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                start <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                end <span style=\"color: #666666\">=</span> mid<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> arr<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> c <span style=\"color: #666666\">?</span> end <span style=\"color: #666666\">:</span> start<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">main</span><span style=\"color: #666666\">(</span>String<span style=\"color: #666666\">[]</span> args<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arr <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3,</span> <span style=\"color: #666666\">3</span> <span style=\"color: #666666\">};</span>\n        Practice d <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Practice<span style=\"color: #666666\">();</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> d<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getCount</span><span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Entry<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> entry <span style=\"color: #666666\">:</span> res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">entrySet</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            System<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">out</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">println</span><span style=\"color: #666666\">(</span>entry<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getKey</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">+</span> <span style=\"color: #BA2121\">&quot;: &quot;</span> <span style=\"color: #666666\">+</span> entry<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getValue</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 6",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 417,
        "NUMBER": 10007,
        "TITLE": "Replace With Space",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<p>In-place replace all \"%20\" in a string to a space, ex: </p>\n\n<p>\n\tabc%20def -> abc def\n</p>\n<p>\n    abc%20%20%2 -> abc  %2\n</p>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">replaceWithSpace</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">[]</span> originStr<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> readPosition <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #B00040\">int</span> writePosition <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>readPosition <span style=\"color: #666666\">&lt;</span> originStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #408080; font-style: italic\">// If find %20</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>originStr<span style=\"color: #666666\">[</span>readPosition<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;%&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    readPosition <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">&lt;</span> originStr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    originStr<span style=\"color: #666666\">[</span>readPosition <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;2&#39;</span> <span style=\"color: #666666\">&amp;&amp;</span>\n                    originStr<span style=\"color: #666666\">[</span>readPosition <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">2]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #BA2121\">&#39;0&#39;</span><span style=\"color: #666666\">){</span>\n                readPosition <span style=\"color: #666666\">+=</span> <span style=\"color: #666666\">3;</span> <span style=\"color: #408080; font-style: italic\">// Update read position</span>\n                <span style=\"color: #408080; font-style: italic\">// Don&#39;t write multiple spaces</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>writePosition <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> originStr<span style=\"color: #666666\">[</span>writePosition <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">)</span>\n                    originStr<span style=\"color: #666666\">[</span>writePosition<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&#39; &#39;</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                originStr<span style=\"color: #666666\">[</span>writePosition<span style=\"color: #666666\">++]</span> <span style=\"color: #666666\">=</span> originStr<span style=\"color: #666666\">[</span>readPosition<span style=\"color: #666666\">++];</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> String<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">valueOf</span><span style=\"color: #666666\">(</span>originStr<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(0,</span> writePosition<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "4",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 418,
        "NUMBER": 10008,
        "TITLE": "BST LCA with Deepest Leaf",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>BST LCA with deepest leaf</p>\n<pre>\n     1\n    / \\\n   2   3\n      / \\\n     5   6 return 3.\n</pre>\n\n<pre>\n    1\n   / \\\n  2   3\n /   / \\\n4   5   6 retrun 1.\n</pre>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">//Recursive way</span>\n    <span style=\"color: #408080; font-style: italic\">// &#39;Time complexity: O(n),</span>\n    <span style=\"color: #408080; font-style: italic\">// Space complexity: O(h), height of the tree&#39;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">findLCARucrsive</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Pair result <span style=\"color: #666666\">=</span> findLCA<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> Pair <span style=\"color: #0000FF\">findLCA</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Pair<span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> depth <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        Pair left <span style=\"color: #666666\">=</span> findLCA<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        Pair right <span style=\"color: #666666\">=</span> findLCA<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n        depth <span style=\"color: #666666\">=</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">max</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">,</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">==</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Pair<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> depth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">&gt;</span> right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Pair<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">,</span> depth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Pair<span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">,</span> depth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Pair</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode node<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> depth<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Pair</span><span style=\"color: #666666\">(</span>TreeNode node<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> depth<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">=</span> depth<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">findLCAIterative</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">,</span> TreeNode<span style=\"color: #666666\">&gt;</span> childToParent <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        Queue<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> level <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        TreeNode left <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        TreeNode right <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> size <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> size<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                TreeNode node <span style=\"color: #666666\">=</span> level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                    left <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">==</span> size <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">{</span>\n                    right <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n                    childToParent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">,</span> node<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    level<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                    childToParent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">,</span> node<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">!=</span> right<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            left <span style=\"color: #666666\">=</span> childToParent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">);</span>\n            right <span style=\"color: #666666\">=</span> childToParent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>right<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> left<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 419,
        "NUMBER": 10009,
        "TITLE": "Multiple Leaf Tree LCA with Deepest Leaf",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Multiple leaft Tree LCA with deepest leaf</p>\n\n<pre>\n     1\n   / | \\\n  2  3  4\n /     / \\\n4     5   6 retrun 1.\n</pre>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">MultipleChildrenSolution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNodeMulti <span style=\"color: #0000FF\">findLca</span><span style=\"color: #666666\">(</span>TreeNodeMulti root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> helper<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">).</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> Result <span style=\"color: #0000FF\">helper</span><span style=\"color: #666666\">(</span>TreeNodeMulti root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Result<span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> depth <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        List<span style=\"color: #666666\">&lt;</span>Result<span style=\"color: #666666\">&gt;</span> next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>TreeNodeMulti child <span style=\"color: #666666\">:</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>helper<span style=\"color: #666666\">(</span>child<span style=\"color: #666666\">));</span>\n        <span style=\"color: #666666\">}</span>\n        Result deepest <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Result<span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        Result deepest2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Result<span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Result result <span style=\"color: #666666\">:</span> next<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">&gt;=</span> deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                deepest2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span> <span style=\"color: #666666\">=</span> deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">;</span>\n                deepest2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">=</span> deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">;</span>\n                deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">;</span>\n                deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">=</span> result<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        depth <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">+</span> deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">==</span> deepest2<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Result<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">,</span> depth<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">new</span> Result<span style=\"color: #666666\">(</span>deepest<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span><span style=\"color: #666666\">,</span> depth<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Result</span> <span style=\"color: #666666\">{</span>\n        TreeNodeMulti node<span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> depth<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Result</span><span style=\"color: #666666\">(</span>TreeNodeMulti node<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> depth<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">node</span> <span style=\"color: #666666\">=</span> node<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">depth</span> <span style=\"color: #666666\">=</span> depth<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TreeNodeMulti</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>TreeNodeMulti<span style=\"color: #666666\">&gt;</span> children<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">TreeNodeMulti</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> val<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span> <span style=\"color: #666666\">=</span> val<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "12",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 420,
        "NUMBER": 10010,
        "TITLE": "Valley or Peak Element",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<p>Given an array will have either a valley or a mountain, only one, not one of each,\n    find out the index of the valley or peak element</p>\n<p>And with one more assumption: array[i - 1] = array[i] + 1 or array[i - 1] = array[i] - 1.</p>\n<p>\nExample 1: [1,2,3,4,3,2,1] --> return 3\n</p>\n<p>\nExample 2: [6,5,4,3,2,3,4] --> return 4\n</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/***</span>\n<span style=\"color: #408080; font-style: italic\">     * 1. Use first two elements to judge is up or down</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. if it is up:</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tAssume A[x] is peak, we have</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tA[x] - A[i] = x - i and A[x] - A[j] = j - x</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tso x = (A[j] - A[i] + i + j)/2</span>\n<span style=\"color: #408080; font-style: italic\">     * 2. if it is down</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tAssume A[x] is vally, we have</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tA[x] - A[i] = i - x and A[x] - A[j] = x - j</span>\n<span style=\"color: #408080; font-style: italic\">     * \t\tx = (A[i] - A[j] + i + j)/2</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findPeak</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">boolean</span> isUp <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[1]</span> <span style=\"color: #666666\">&gt;</span> A<span style=\"color: #666666\">[0])</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">true</span> <span style=\"color: #666666\">:</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>isUp<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">+</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span>A<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">-</span> A<span style=\"color: #666666\">[</span>A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1]</span> <span style=\"color: #666666\">+</span> A<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 3",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 421,
        "NUMBER": 10011,
        "TITLE": "Row With Most Ones",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.</p>\n\n<p>Example</p>\n<p>Input matrix</p>\n<pre>\n    0 1 1 1\n    0 0 1 1\n    1 1 1 1  // this row has maximum 1s\n    0 0 0 0\n</pre>\n\n<p>Output: 2</p>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">rowWithMax1s</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> mat<span style=\"color: #666666\">){</span>\n        <span style=\"color: #408080; font-style: italic\">// Initialize first row as row with max 1s</span>\n        <span style=\"color: #B00040\">int</span> max_row_index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// The function first() returns index of first 1 in row 0.</span>\n        <span style=\"color: #408080; font-style: italic\">// Use this index to initialize the index of leftmost 1 seen so far</span>\n        <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> mat<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">&amp;&amp;</span> mat<span style=\"color: #666666\">[0][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            j<span style=\"color: #666666\">++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        j <span style=\"color: #666666\">=</span> j <span style=\"color: #666666\">==</span> mat<span style=\"color: #666666\">[0].</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">?</span> j <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> j<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> mat<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #408080; font-style: italic\">// Move left until a 0 is found</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&gt;=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> mat<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">][</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">1){</span>\n                j<span style=\"color: #666666\">--;</span>  <span style=\"color: #408080; font-style: italic\">// Update the index of leftmost 1 seen so far</span>\n                max_row_index <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>  <span style=\"color: #408080; font-style: italic\">// Update max_row_index</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max_row_index<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "21",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 422,
        "NUMBER": 10012,
        "TITLE": "Find the Point Where Maximum Intervals Overlap",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Consider a big party where a log register for guest’s entry and exit times is maintained. Find the time at which there are maximum guests in the party. Note that entries in register are not in any order.<span id=\"more-135087\"></span></p>\n\n<p>Example:\n</p>\n\n<pre>Input: arrl[] = {1, 2, 9, 5, 5}\n       exit[] = {4, 5, 12, 9, 12}\nFirst guest in array arrives at 1 and leaves at 4,\nsecond guest arrives at 2 and leaves at 5, and so on.\n\nOutput: 5\nThere are maximum 3 guests at time 5.  </pre>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findMaxGuests</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> arrivals<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> exits<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Sort arrival and exit arrays</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>arrivals<span style=\"color: #666666\">);</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>exits<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// guests_in indicates number of guests at a time</span>\n        <span style=\"color: #B00040\">int</span> guests_in <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> max_guests <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> time <span style=\"color: #666666\">=</span> arrivals<span style=\"color: #666666\">[0];</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1,</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> n <span style=\"color: #666666\">=</span> arrivals<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Similar to merge in merge sort to process</span>\n        <span style=\"color: #408080; font-style: italic\">// all events in sorted order</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;</span> n <span style=\"color: #666666\">&amp;&amp;</span> j <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// If next event in sorted order is arrival,</span>\n            <span style=\"color: #408080; font-style: italic\">// increment count of guests</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arrivals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> exits<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">{</span>\n                guests_in<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #408080; font-style: italic\">// Update max_guests if needed</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>guests_in <span style=\"color: #666666\">&gt;</span> max_guests<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    max_guests <span style=\"color: #666666\">=</span> guests_in<span style=\"color: #666666\">;</span>\n                    time <span style=\"color: #666666\">=</span> arrivals<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n                <span style=\"color: #666666\">}</span>\n                i<span style=\"color: #666666\">++;</span>  <span style=\"color: #408080; font-style: italic\">//increment index of arrival array</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span><span style=\"color: #408080; font-style: italic\">// If event is exit, decrement count</span>\n                <span style=\"color: #408080; font-style: italic\">// of guests.</span>\n                guests_in<span style=\"color: #666666\">--;</span>\n                j<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> max_guests<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 13",
        "COMPANIES": "0",
        "SPECIALTAGS": ""
    },
    {
        "ID": 423,
        "NUMBER": 10013,
        "TITLE": "Convert a Binary Tree to a Circular Doubly Link List",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<p>Given a Binary Tree, convert it to a Circular Doubly Linked List (In-Place).</p>\n\n<ul>\n    <li>The left and right pointers in nodes are to be used as previous and next pointers respectively in converted Circular Linked List.</li>\n    <li>The order of nodes in List must be same as Inorder of the given Binary Tree.</li>\n    <li>The first node of Inorder traversal must be head node of the Circular List.</li>\n</ul>\n\n<p><strong>Example:</strong><br>\n    <a href=\"http://www.geeksforgeeks.org/wp-content/uploads/tree-to-list.png\"><img class=\"aligncenter size-full wp-image-139076\" src=\"http://www.geeksforgeeks.org/wp-content/uploads/tree-to-list.png\" alt=\"tree to list\" width=\"873\" height=\"534\" srcset=\"http://www.geeksforgeeks.org/wp-content/uploads/tree-to-list.png 873w, http://www.geeksforgeeks.org/wp-content/uploads/tree-to-list-300x184.png 300w, http://www.geeksforgeeks.org/wp-content/uploads/tree-to-list-660x404.png 660w\" sizes=\"(max-width: 873px) 100vw, 873px\"></a></p>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Method converts a tree to a circular</span>\n    <span style=\"color: #408080; font-style: italic\">// Link List and then returns the head of the Link List</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> TreeNode <span style=\"color: #0000FF\">bTreeToCList</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Recursively convert left and right subtrees</span>\n        TreeNode left <span style=\"color: #666666\">=</span> bTreeToCList<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n        TreeNode right <span style=\"color: #666666\">=</span> bTreeToCList<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Make a circular linked list of single node (or root).</span>\n        <span style=\"color: #408080; font-style: italic\">// To do so, make the right and left pointers of this node point to itself</span>\n        root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Step 1 Concatenate the left list with the list with current node</span>\n        <span style=\"color: #408080; font-style: italic\">// Step 2 Concatenate the returned list with the right List</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> concatenate<span style=\"color: #666666\">(</span>concatenate<span style=\"color: #666666\">(</span>left<span style=\"color: #666666\">,</span> root<span style=\"color: #666666\">),</span> right<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// concatenate both the lists and returns the head of the List</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> TreeNode <span style=\"color: #0000FF\">concatenate</span><span style=\"color: #666666\">(</span>TreeNode leftList<span style=\"color: #666666\">,</span> TreeNode rightList<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// If either of the list is empty, then return the other list</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>leftList <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> rightList<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>rightList <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> leftList<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Store the last Node of left List</span>\n        TreeNode leftLast <span style=\"color: #666666\">=</span> leftList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Store the last Node of right List</span>\n        TreeNode rightLast <span style=\"color: #666666\">=</span> rightList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Connect the last node of Left List</span>\n        <span style=\"color: #408080; font-style: italic\">// with the first Node of the right List</span>\n        leftLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> rightList<span style=\"color: #666666\">;</span>\n        rightList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> leftLast<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// left of first node refers to the last node in the list</span>\n        leftList<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">=</span> rightLast<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// Right of last node refers to the first node of the List</span>\n        rightLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> leftList<span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Return the Head of the List</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> leftList<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "0",
        "SPECIALTAGS": "0"
    },
    {
        "ID": 424,
        "NUMBER": 10014,
        "TITLE": "Largest subarray with equal number of 0s and 1s",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given an array containing only 0s and 1s, find the largest subarray which contain equal no of 0s and 1s.\n    Expected time complexity is O(n). <span id=\"more-20586\"></span></p>\n\n<p>Examples:</p>\n<pre>Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 1 to 6 (Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: No such subarray\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 0 to 3 Or 1 to 4\n</pre>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Returns largest subarray with equal number of 0s and 1s</span>\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">maxLen</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> arr<span style=\"color: #666666\">[],</span> <span style=\"color: #B00040\">int</span> n<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// Creates an empty hashMap hM</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> hM <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n\n        <span style=\"color: #B00040\">int</span> sum <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>     <span style=\"color: #408080; font-style: italic\">// Initialize sum of elements</span>\n        <span style=\"color: #B00040\">int</span> max_len <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> <span style=\"color: #408080; font-style: italic\">// Initialize result</span>\n        <span style=\"color: #B00040\">int</span> ending_index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #B00040\">int</span> start_index <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Traverse through the given array</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #408080; font-style: italic\">// Add current element to sum</span>\n            sum <span style=\"color: #666666\">+=</span> arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n\n            <span style=\"color: #408080; font-style: italic\">// To handle sum=0 at last index</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                max_len <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                ending_index <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #408080; font-style: italic\">// If this sum is seen before, then update max_len</span>\n            <span style=\"color: #408080; font-style: italic\">// if required</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>hM<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>sum<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>max_len <span style=\"color: #666666\">&lt;</span> i <span style=\"color: #666666\">-</span> hM<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">+</span> n<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    max_len <span style=\"color: #666666\">=</span> i <span style=\"color: #666666\">-</span> hM<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">+</span> n<span style=\"color: #666666\">);</span>\n                    ending_index <span style=\"color: #666666\">=</span> i<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #408080; font-style: italic\">// Else put this sum in hash table</span>\n                hM<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>sum <span style=\"color: #666666\">+</span> n<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> n<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">-1)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #B00040\">int</span> end <span style=\"color: #666666\">=</span> ending_index <span style=\"color: #666666\">-</span> max_len <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> max_len<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 425,
        "NUMBER": 10015,
        "TITLE": "Knight Path",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "⼀一骑⼠士在⼀一个⽆无限⼤大的国际象棋棋盘，有障碍",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Point2</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Point2</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">=</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hashCode</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">hashCode</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">});</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">equals</span><span style=\"color: #666666\">(</span>Object other<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>other <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>other <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!(</span>other <span style=\"color: #008000; font-weight: bold\">instanceof</span> Point2<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        Point2 point <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>Point2<span style=\"color: #666666\">)</span> other<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">==</span> x <span style=\"color: #666666\">&amp;&amp;</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">==</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">knightPath</span><span style=\"color: #666666\">(</span>Point2 start<span style=\"color: #666666\">,</span> Point2 end<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> blocks<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[][]</span> nextStep <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">-2</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">-1,</span> <span style=\"color: #666666\">2</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">-2</span> <span style=\"color: #666666\">},</span>\n                <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">2,</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">-2,</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">},</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">-2,</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">}</span> <span style=\"color: #666666\">};</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> explore <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        Set<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> step <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            step<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #B00040\">int</span> size <span style=\"color: #666666\">=</span> explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> size<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                Point2 point <span style=\"color: #666666\">=</span> explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">8;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> x <span style=\"color: #666666\">=</span> nextStep<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][0];</span>\n                    <span style=\"color: #B00040\">int</span> y <span style=\"color: #666666\">=</span> nextStep<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">][1];</span>\n                    <span style=\"color: #B00040\">int</span> nextX <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> x<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #B00040\">int</span> nextY <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">+</span> y<span style=\"color: #666666\">;</span>\n                    Point2 next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>nextX<span style=\"color: #666666\">,</span> nextY<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #B00040\">boolean</span> canReach1 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #B00040\">boolean</span> canReach2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>x<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #B00040\">int</span> tempY <span style=\"color: #666666\">=</span> y<span style=\"color: #666666\">;</span>\n                        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>tempY<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                            Point2 check <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span><span style=\"color: #666666\">,</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">+</span> tempY<span style=\"color: #666666\">);</span>\n                            Point2 check2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>nextX<span style=\"color: #666666\">,</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">+</span> tempY <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n                            canReach1 <span style=\"color: #666666\">=</span> blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>check<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">false</span> <span style=\"color: #666666\">:</span> canReach1<span style=\"color: #666666\">;</span>\n                            canReach2 <span style=\"color: #666666\">=</span> blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>check2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">false</span> <span style=\"color: #666666\">:</span> canReach2<span style=\"color: #666666\">;</span>\n                            tempY <span style=\"color: #666666\">=</span> tempY <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> tempY <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> tempY <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                        <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #B00040\">int</span> tempX <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">;</span>\n                        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>Math<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">abs</span><span style=\"color: #666666\">(</span>tempX<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                            Point2 check <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> tempX<span style=\"color: #666666\">,</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span><span style=\"color: #666666\">);</span>\n                            Point2 check2 <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> tempX <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> nextY<span style=\"color: #666666\">);</span>\n                            canReach1 <span style=\"color: #666666\">=</span> blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>check<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">false</span> <span style=\"color: #666666\">:</span> canReach1<span style=\"color: #666666\">;</span>\n                            canReach2 <span style=\"color: #666666\">=</span> blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>check2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">?</span> <span style=\"color: #008000; font-weight: bold\">false</span> <span style=\"color: #666666\">:</span> canReach2<span style=\"color: #666666\">;</span>\n                            tempX <span style=\"color: #666666\">=</span> tempX <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> tempX <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> tempX <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                        <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">((!</span>canReach1 <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>canReach2<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">||</span> blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #008000; font-weight: bold\">return</span> step<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 426,
        "NUMBER": 10016,
        "TITLE": "Task Schedule I",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<pre>\n    # Tasks: 1, 1, 2, 1\n    # Recovery interva (cooldown): 2\n    # Output: 7  (order is 1 _ _ 1 2 _ 1)\n\n    # Example 2\n\n    # Tasks: 1, 2, 3, 1, 2, 3\n    # Recovery interval (cooldown): 3\n    # Output: 7  (order is 1 2 3 _ 1 2 3)\n\n    # Example 3.\n\n    # Tasks: 1, 2, 3 ,4, 5, 6, 2, 4, 6, 1, 2, 4\n    # Recovery interval (cooldown): 6\n    # Output: 18  (1 2 3 4 5 6 _ _ 2 _ 4 _ 6 1 _ 2 _ 4)\n</pre>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Output the string</span>\n    String <span style=\"color: #0000FF\">getStr</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        StringBuilder sb <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> StringBuilder<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">:</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toCharArray</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> idx <span style=\"color: #666666\">=</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getOrDefault</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">-</span>k<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> k <span style=\"color: #666666\">&lt;</span> idx<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #BA2121\">&quot;_&quot;</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">append</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">());</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> sb<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">toString</span><span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Output the total time spent</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">missionOrder</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> mission<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> N<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        Map<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">,</span> Integer<span style=\"color: #666666\">&gt;</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> time <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> mission<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            time<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]))</span> <span style=\"color: #666666\">{</span>\n                map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> time<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>time <span style=\"color: #666666\">-</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">&gt;</span> N<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> time<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    time <span style=\"color: #666666\">=</span> N <span style=\"color: #666666\">+</span> map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">])</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    map<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>mission<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> time<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> time<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "0",
        "SPECIALTAGS": "2"
    },
    {
        "ID": 427,
        "NUMBER": 11001,
        "TITLE": "Binary Search",
        "DIFFICULTY": "Easy",
        "DESCRIPTION": "<h1 class=\"entry-title\">Binary Search</h1>\n<p>Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].<span id=\"more-142311\"></span></p>\n\n<p>We basically ignore half of the elements just after one comparison.</p>\n\n<ol>\n    <li>Compare x with the middle element. </li>\n    <li>If x matches with middle element, we return the mid index.  </li>\n    <li> Else If x is greater than the mid element, then x can only lie in right half subarray after the mid element.  So we recur for right half. </li>\n    <li> Else (x is smaller) recur for the left half.</li>\n</ol>\n",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">// Returns index of x if it is present in arr[l..r], else</span>\n<span style=\"color: #408080; font-style: italic\">// return -1</span>\n<span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">BinarySearch</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">binarySearch</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> arr<span style=\"color: #666666\">[],</span> <span style=\"color: #B00040\">int</span> l<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> r<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// We reach here when element is not present in array</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">&lt;</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n\n        <span style=\"color: #B00040\">int</span> mid <span style=\"color: #666666\">=</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">-</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n        <span style=\"color: #408080; font-style: italic\">// If the element is present at the middle itself</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> x<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> mid<span style=\"color: #666666\">;</span>\n        <span style=\"color: #408080; font-style: italic\">// If element is smaller than mid, then it can only</span>\n        <span style=\"color: #408080; font-style: italic\">// be present in left subarray</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>mid<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> x<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> binarySearch<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">,</span> l<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> x<span style=\"color: #666666\">);</span>\n        <span style=\"color: #408080; font-style: italic\">// Else the element can only be present in right</span>\n        <span style=\"color: #408080; font-style: italic\">// subarray</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> binarySearch<span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">,</span> mid <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> r<span style=\"color: #666666\">,</span> x<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">binarySearch</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> arr<span style=\"color: #666666\">[],</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> l <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> r <span style=\"color: #666666\">=</span> arr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>l <span style=\"color: #666666\">&lt;=</span> r<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> m <span style=\"color: #666666\">=</span> l <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">(</span>r <span style=\"color: #666666\">-</span> l<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">/</span> <span style=\"color: #666666\">2;</span>\n            <span style=\"color: #408080; font-style: italic\">// Check if x is present at mid</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> x<span style=\"color: #666666\">)</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> m<span style=\"color: #666666\">;</span>\n            <span style=\"color: #408080; font-style: italic\">// If x greater, ignore left half</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>arr<span style=\"color: #666666\">[</span>m<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;</span> x<span style=\"color: #666666\">)</span>\n                l <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                <span style=\"color: #408080; font-style: italic\">// If x is smaller, ignore right half</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                r <span style=\"color: #666666\">=</span> m <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #408080; font-style: italic\">// if we reach here, then element was not present</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 428,
        "NUMBER": 11002,
        "TITLE": "Quick Select",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Quickselect uses the same overall approach as quicksort, choosing one element as a pivot and partitioning the data in two based on the pivot, accordingly as less than or greater than the pivot. However, instead of recursing into both sides, as in quicksort, quickselect only recurses into one side – the side with the element it is searching for. This reduces the average complexity from <span class=\"texhtml\">O(<i>n</i> log <i>n</i>)</span> to <span class=\"texhtml\">O(<i>n</i>)</span>, with a worst case of O(<i>n</i><sup>2</sup>).</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">QuickSelect</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #408080; font-style: italic\">// Time complexity = O(n)</span>\n    <span style=\"color: #408080; font-style: italic\">// Discard half each time: n+(n/2)+(n/4)..1 = n + (n-1) = O(2n-1) = O(n),</span>\n    <span style=\"color: #408080; font-style: italic\">// because n/2+n/4+n/8+..1=n-1.</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// quick select: kth smallest</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;</span> end<span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n\n        <span style=\"color: #B00040\">int</span> pivot <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">];</span><span style=\"color: #408080; font-style: italic\">// Take A[end] as the pivot,</span>\n        <span style=\"color: #B00040\">int</span> left <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> pivot<span style=\"color: #666666\">)</span> <span style=\"color: #408080; font-style: italic\">// Put numbers &lt; pivot to pivot&#39;s left</span>\n                swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">++,</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">);</span><span style=\"color: #408080; font-style: italic\">// Finally, swap A[end] with A[left]</span>\n\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">==</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Found kth smallest number</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>left<span style=\"color: #666666\">];</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>left <span style=\"color: #666666\">&lt;</span> k<span style=\"color: #666666\">)</span><span style=\"color: #408080; font-style: italic\">// Check right part</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1,</span> end<span style=\"color: #666666\">,</span> k<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #408080; font-style: italic\">// Check left part</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> findKthLargest<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> left <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> k<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> A<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        A<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">findKthLargest</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> k<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        shuffle<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> start <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> end <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1,</span> index <span style=\"color: #666666\">=</span> nums<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span> <span style=\"color: #666666\">-</span> k<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> pivot <span style=\"color: #666666\">=</span> partion<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pivot <span style=\"color: #666666\">&lt;</span> index<span style=\"color: #666666\">)</span>\n                start <span style=\"color: #666666\">=</span> pivot <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pivot <span style=\"color: #666666\">&gt;</span> index<span style=\"color: #666666\">)</span>\n                end <span style=\"color: #666666\">=</span> pivot <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1;</span>\n            <span style=\"color: #008000; font-weight: bold\">else</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>pivot<span style=\"color: #666666\">];</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">];</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Shuffle array to O(N) guaranteed running time + O(1) space</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">shuffle</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> a<span style=\"color: #666666\">[])</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> Random random <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Random<span style=\"color: #666666\">();</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> ind <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> ind <span style=\"color: #666666\">&lt;</span> a<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> ind<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> r <span style=\"color: #666666\">=</span> random<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">nextInt</span><span style=\"color: #666666\">(</span>ind <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1);</span>\n            swap<span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">,</span> ind<span style=\"color: #666666\">,</span> r<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// Partition function</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">partion</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> nums<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #B00040\">int</span> pivot <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">,</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>start<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&lt;=</span> nums<span style=\"color: #666666\">[</span>pivot<span style=\"color: #666666\">])</span> start<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&lt;=</span> end <span style=\"color: #666666\">&amp;&amp;</span> nums<span style=\"color: #666666\">[</span>end<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">&gt;</span> nums<span style=\"color: #666666\">[</span>pivot<span style=\"color: #666666\">])</span> end<span style=\"color: #666666\">--;</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>start <span style=\"color: #666666\">&gt;</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n            swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> start<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        swap<span style=\"color: #666666\">(</span>nums<span style=\"color: #666666\">,</span> end<span style=\"color: #666666\">,</span> pivot<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> end<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #408080; font-style: italic\">// excahnge function</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">swap</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> a<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #B00040\">int</span> tmp <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">];</span>\n        a<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> a<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">];</span>\n        a<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> tmp<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "7",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 429,
        "NUMBER": 11003,
        "TITLE": "Reverse LinkedList",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Given the start and end of a linked list, reverse the nodes of a linked list and return its modified list.</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for singly-linked list.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class ListNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode next;</span>\n<span style=\"color: #408080; font-style: italic\"> *     ListNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverse</span><span style=\"color: #666666\">(</span>ListNode begin<span style=\"color: #666666\">,</span> ListNode end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        ListNode curr <span style=\"color: #666666\">=</span> begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">!=</span> end<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            ListNode temp <span style=\"color: #666666\">=</span> begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> curr<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">;</span>\n            begin<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> curr<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ListNode <span style=\"color: #0000FF\">reverseList</span><span style=\"color: #666666\">(</span>ListNode head<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>head <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> head<span style=\"color: #666666\">;</span>\n        ListNode p <span style=\"color: #666666\">=</span> reverseList<span style=\"color: #666666\">(</span>head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">);</span>\n        head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> head<span style=\"color: #666666\">;</span>\n        head<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">next</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> p<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "2",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 430,
        "NUMBER": 11004,
        "TITLE": "KMP",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Implement strStr().\n</p>\n    <p>\n        Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">strStr</span><span style=\"color: #666666\">(</span>String haystack<span style=\"color: #666666\">,</span> String needle<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>needle <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> haystack <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">||</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&gt;</span> haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> overlay <span style=\"color: #666666\">=</span> getOverlay<span style=\"color: #666666\">(</span>needle<span style=\"color: #666666\">);</span>\n        <span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&lt;=</span> haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n            <span style=\"color: #B00040\">int</span> j <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">&lt;</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>haystack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>j<span style=\"color: #666666\">)){</span>\n                    i <span style=\"color: #666666\">=</span> j <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">?</span> i<span style=\"color: #666666\">+1</span> <span style=\"color: #666666\">:</span> i<span style=\"color: #666666\">+</span>j<span style=\"color: #666666\">-</span>overlay<span style=\"color: #666666\">[</span>j<span style=\"color: #666666\">-1];</span>\n                    <span style=\"color: #008000; font-weight: bold\">break</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n                j<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>j <span style=\"color: #666666\">==</span> needle<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()){</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> i<span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Generate the prefix function for pattern itself</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> <span style=\"color: #0000FF\">getOverlay</span><span style=\"color: #666666\">(</span>String pattern<span style=\"color: #666666\">){</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()];</span>\n        res<span style=\"color: #666666\">[0]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1;</span> i <span style=\"color: #666666\">&lt;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">int</span> index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1];</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>index <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">&amp;&amp;</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">!=</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span>\n                index <span style=\"color: #666666\">=</span> res<span style=\"color: #666666\">[</span>index<span style=\"color: #666666\">-1];</span>\n            res<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>index<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">==</span> pattern<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">?</span> index <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">:</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "5",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 431,
        "NUMBER": 11005,
        "TITLE": "Combination Sum II",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Given a collection of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>.\n</p>\n\n    <p>Each number in <b><i>C</i></b> may only be used <b>once</b> in the combination.\n    </p>\n    <p><b>Note:</b><br>\n    </p><ul>\n    <li>All numbers (including target) will be positive integers.</li>\n    <li>The solution set must not contain duplicate combinations.</li>\n</ul>\n    <p></p>\n\n    <p>\n        For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>, <br>\n        A solution set is: <br>\n    </p><pre>[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\">     * Time Complexity: C(n,1) + C(n,2) + ..C(n, n) = O(2^n)</span>\n<span style=\"color: #408080; font-style: italic\">     * where n is the size of candidates,</span>\n<span style=\"color: #408080; font-style: italic\">     * and k is the max repeated times for each candidates.</span>\n<span style=\"color: #408080; font-style: italic\">     * Space complexity: O(m) where m is the size of array for the solution</span>\n<span style=\"color: #408080; font-style: italic\">     *</span>\n<span style=\"color: #408080; font-style: italic\">     * @param candidates</span>\n<span style=\"color: #408080; font-style: italic\">     * @param target</span>\n<span style=\"color: #408080; font-style: italic\">     * @return</span>\n<span style=\"color: #408080; font-style: italic\">     */</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> <span style=\"color: #0000FF\">combinationSum2</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">sort</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">);</span>\n        List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;();</span>\n        getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(),</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #666666\">0);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">getList</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> candidates<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> target<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> li<span style=\"color: #666666\">,</span> List<span style=\"color: #666666\">&lt;</span>List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;&gt;</span> re<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> start<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">&lt;=</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>target <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> templi <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;(</span>li<span style=\"color: #666666\">);</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>templi<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> start<span style=\"color: #666666\">;</span> i <span style=\"color: #666666\">&lt;</span> candidates<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>i <span style=\"color: #666666\">&gt;</span> start <span style=\"color: #666666\">&amp;&amp;</span> candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]</span> <span style=\"color: #666666\">==</span> candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">-1]){</span>\n                <span style=\"color: #008000; font-weight: bold\">continue</span><span style=\"color: #666666\">;</span> <span style=\"color: #408080; font-style: italic\">// skip duplicates</span>\n            <span style=\"color: #666666\">}</span>\n            li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">]);</span>\n            getList<span style=\"color: #666666\">(</span>candidates<span style=\"color: #666666\">,</span> target <span style=\"color: #666666\">-</span> candidates<span style=\"color: #666666\">[</span>i<span style=\"color: #666666\">],</span> li<span style=\"color: #666666\">,</span> re<span style=\"color: #666666\">,</span> i<span style=\"color: #666666\">+1);</span>\n            li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">(</span>li<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1);</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "0, 8",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 432,
        "NUMBER": 11006,
        "TITLE": "Minimum Window Substring",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-description\">\n    <p></p><p>\n    Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n</p>\n\n    <p>\n        For example,<br>\n        <b>S</b> = <code>\"ADOBECODEBANC\"</code><br>\n        <b>T</b> = <code>\"ABC\"</code><br>\n    </p>\n    <p>\n        Minimum window is <code>\"BANC\"</code>.\n    </p>\n\n    <p>\n        <b>Note:</b><br>\n        If there is no such window in S that covers all characters in T, return the empty string <code>\"\"</code>.\n    </p>\n    <p>\n        If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.\n    </p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> String <span style=\"color: #0000FF\">minWindow</span><span style=\"color: #666666\">(</span>String s<span style=\"color: #666666\">,</span> String t<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        String result <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> map <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[256];</span>\n        <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> window <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[256];</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            map<span style=\"color: #666666\">[</span>t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">)]++;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #B00040\">int</span> minLength <span style=\"color: #666666\">=</span> Integer<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">MAX_VALUE</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #B00040\">int</span> letterCounter <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> slow <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0,</span> fast <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> fast <span style=\"color: #666666\">&lt;</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> fast<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&gt;</span> <span style=\"color: #666666\">0)</span> <span style=\"color: #666666\">{</span>\n                window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]++;</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&lt;=</span> map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>fast<span style=\"color: #666666\">)])</span> <span style=\"color: #666666\">{</span>\n                    letterCounter<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>letterCounter <span style=\"color: #666666\">&gt;=</span> t<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">||</span> window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]</span> <span style=\"color: #666666\">&gt;</span> map<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)])</span> <span style=\"color: #666666\">{</span>\n                    window<span style=\"color: #666666\">[</span>s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">)]--;</span>\n                    slow<span style=\"color: #666666\">++;</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>fast <span style=\"color: #666666\">-</span> slow <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span> <span style=\"color: #666666\">&lt;</span> minLength<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    minLength <span style=\"color: #666666\">=</span> fast <span style=\"color: #666666\">-</span> slow <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1;</span>\n                    result <span style=\"color: #666666\">=</span> s<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">substring</span><span style=\"color: #666666\">(</span>slow<span style=\"color: #666666\">,</span> slow <span style=\"color: #666666\">+</span> minLength<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> result<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 4, 5",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 433,
        "NUMBER": 11007,
        "TITLE": "Tree Inorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>inorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>[1,null,2,3]</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[1,3,2]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>inorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>inorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">empty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                root <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Morris Traversal method</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">inorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        TreeNode temp <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                <span style=\"color: #408080; font-style: italic\">// connect threading for root</span>\n                temp <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #008000; font-weight: bold\">while</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> root<span style=\"color: #666666\">)</span>\n                    temp <span style=\"color: #666666\">=</span> temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #408080; font-style: italic\">// the threading already exists</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">!=</span><span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">){</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                    <span style=\"color: #408080; font-style: italic\">// construct the threading</span>\n                    temp<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n                    root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span><span style=\"color: #008000; font-weight: bold\">else</span><span style=\"color: #666666\">{</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 434,
        "NUMBER": 11008,
        "TITLE": "Tree Preorder Traversal",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>preorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>{1,#,2,3}</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[1,2,3]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> * int val;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> * TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>preorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n            re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>preorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n            Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> stack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n            stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                root <span style=\"color: #666666\">=</span> stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span>\n                    stack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #408080; font-style: italic\">// Morris Travasal</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">preorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n            TreeNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">,</span> prev<span style=\"color: #666666\">;</span>\n            <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>cur <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    prev <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> cur<span style=\"color: #666666\">)</span>\n                        prev <span style=\"color: #666666\">=</span> prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #408080; font-style: italic\">// the only difference with inorder-traversal</span>\n                        res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                        prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">;</span>\n                        cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                        prev<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n                        cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 435,
        "NUMBER": 11009,
        "TITLE": "Tree Postorder Traversal",
        "DIFFICULTY": "Hard",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>Given a binary tree, return the <i>postorder</i> traversal of its nodes' values.</p>\n\n    <p>\n        For example:<br>\n        Given binary tree <code>{1,#,2,3}</code>,<br>\n    </p><pre>   1\n    \\\n     2\n    /\n   3\n</pre>\n    <p></p>\n    <p>\n        return <code>[3,2,1]</code>.\n    </p>\n\n    <p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Definition for a binary tree node.</span>\n<span style=\"color: #408080; font-style: italic\"> * public class TreeNode {</span>\n<span style=\"color: #408080; font-style: italic\"> *     int val;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode left;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode right;</span>\n<span style=\"color: #408080; font-style: italic\"> *     TreeNode(int x) { val = x; }</span>\n<span style=\"color: #408080; font-style: italic\"> * }</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n<span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #408080; font-style: italic\">// Recursive Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">postorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> re <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>postorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>postorderTraversal<span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">));</span>\n        re<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> re<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// Iterative Solution</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">postorderTraversal</span><span style=\"color: #666666\">(</span>TreeNode root<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        List<span style=\"color: #666666\">&lt;</span>Integer<span style=\"color: #666666\">&gt;</span> res <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n        Stack<span style=\"color: #666666\">&lt;</span>TreeNode<span style=\"color: #666666\">&gt;</span> parentStack <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Stack<span style=\"color: #666666\">&lt;&gt;();</span>\n        TreeNode lastnodevisited <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">,</span> peekNode<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">||</span> root <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">push</span><span style=\"color: #666666\">(</span>root<span style=\"color: #666666\">);</span>\n                root <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">left</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                peekNode <span style=\"color: #666666\">=</span> parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">peek</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #408080; font-style: italic\">// If right child exists AND traversing node from left child, move right</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span> <span style=\"color: #666666\">&amp;&amp;</span> lastnodevisited <span style=\"color: #666666\">!=</span> peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n                    root <span style=\"color: #666666\">=</span> peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">right</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                    parentStack<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">pop</span><span style=\"color: #666666\">();</span>\n                    res<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>peekNode<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">val</span><span style=\"color: #666666\">);</span>\n                    lastnodevisited <span style=\"color: #666666\">=</span> peekNode<span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> res<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "1, 12, 15",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 436,
        "NUMBER": 11010,
        "TITLE": "Bit Manipulation",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Common bit manipulation operations and masks.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span>操作原理\n        符号\t规则\n        <span style=\"color: #666666\">&amp;</span>\t两个位都为1时<span style=\"color: #666666\">,</span> 结果才为1\n        <span style=\"color: #666666\">|</span>\t两个位都为0时<span style=\"color: #666666\">,</span> 结果才为0\n        <span style=\"color: #666666\">~</span>\t取反\n        <span style=\"color: #666666\">^</span>\t两个位相同为0<span style=\"color: #666666\">,</span> 相异为1\n        位操作只能用于整形数据<span style=\"color: #666666\">,</span>\n        对float和double类型进行位操作会被编译器报错<span style=\"color: #666666\">.</span>\n\n        常见位操作\n        <span style=\"color: #666666\">1.</span> 获取<span style=\"color: #666666\">(</span>第i位<span style=\"color: #666666\">)</span>\n        <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">getBit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">(</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">!=</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #666666\">2.</span> 置位<span style=\"color: #666666\">(</span>第i位<span style=\"color: #666666\">)</span>\n        <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">setBit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">){</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">|</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #666666\">3.</span> 清零\n        <span style=\"color: #666666\">3.1</span>    清零i位\n        <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">clearBit</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mask <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">~(1</span> <span style=\"color: #666666\">&lt;&lt;</span> i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">&amp;</span> mask<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">3.2</span>    清零num最高位至i位\n        <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">clearBitMSBthroughI</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">){</span>\n            <span style=\"color: #B00040\">int</span> mask <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(1&lt;&lt;</span> i<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">-1;</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">&amp;</span> mask<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">3.3</span>    清零i位到0位\n        <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">clearBitsIThrough0</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #B00040\">int</span> mask <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">~(</span> <span style=\"color: #666666\">(1</span> <span style=\"color: #666666\">&lt;&lt;</span> <span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">+1)</span> <span style=\"color: #666666\">)</span>  <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> num <span style=\"color: #666666\">&amp;</span> mask<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #666666\">4.</span> 去掉数字n中最右一位1\n        <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">clearOne</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> num<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            num <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">&amp;</span> <span style=\"color: #666666\">(</span>num <span style=\"color: #666666\">-</span> <span style=\"color: #666666\">1));</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> num<span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "22",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 437,
        "NUMBER": 11011,
        "TITLE": "Implement Trie",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<div class=\"question-content\">\n    <p></p><p>\n    Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.\n</p>\n\n    <p>\n        <b>Note:</b><br>\n        You may assume that all inputs are consist of lowercase letters <code>a-z</code>.\n    </p><p></p>\n\n</div>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Trie</span> <span style=\"color: #666666\">{</span>\n\n    <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">TrieNode</span> <span style=\"color: #666666\">{</span>\n        String word <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">&quot;&quot;</span><span style=\"color: #666666\">;</span>\n        Map<span style=\"color: #666666\">&lt;</span>Character<span style=\"color: #666666\">,</span> TrieNode<span style=\"color: #666666\">&gt;</span> children <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">TrieNode</span><span style=\"color: #666666\">(){</span>\n            <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #666666\">}</span>\n    <span style=\"color: #666666\">}</span>\n\n    TrieNode root<span style=\"color: #666666\">;</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Initialize your data structure here. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Trie</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">root</span> <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">();</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Inserts a word into the trie. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">void</span> <span style=\"color: #0000FF\">insert</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(!</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">new</span> TrieNode<span style=\"color: #666666\">());</span>\n            <span style=\"color: #666666\">}</span>\n            cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span> <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns if the word is in the trie. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">search</span><span style=\"color: #666666\">(</span>String word<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> word<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">word</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>word<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">/** Returns if there is any word in the trie that starts with the given prefix. */</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">startsWith</span><span style=\"color: #666666\">(</span>String prefix<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        TrieNode cur <span style=\"color: #666666\">=</span> root<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">for</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> prefix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">length</span><span style=\"color: #666666\">();</span> i<span style=\"color: #666666\">++){</span>\n            <span style=\"color: #B00040\">char</span> c <span style=\"color: #666666\">=</span> prefix<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">charAt</span><span style=\"color: #666666\">(</span>i<span style=\"color: #666666\">);</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #666666\">(</span>cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">)){</span>\n                cur <span style=\"color: #666666\">=</span> cur<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">children</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>c<span style=\"color: #666666\">);</span>\n            <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #408080; font-style: italic\">/**</span>\n<span style=\"color: #408080; font-style: italic\"> * Your Trie object will be instantiated and called as such:</span>\n<span style=\"color: #408080; font-style: italic\"> * Trie obj = new Trie();</span>\n<span style=\"color: #408080; font-style: italic\"> * obj.insert(word);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_2 = obj.search(word);</span>\n<span style=\"color: #408080; font-style: italic\"> * boolean param_3 = obj.startsWith(prefix);</span>\n<span style=\"color: #408080; font-style: italic\"> */</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "10, 11",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 438,
        "NUMBER": 11012,
        "TITLE": "Shortest Path",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "Find the shortest path between two nodes in a graph.",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Point2</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Point2</span><span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> x<span style=\"color: #666666\">,</span> <span style=\"color: #B00040\">int</span> y<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">=</span> x<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">=</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">hashCode</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> Arrays<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">hashCode</span><span style=\"color: #666666\">(</span><span style=\"color: #008000; font-weight: bold\">new</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]{</span>x<span style=\"color: #666666\">,</span> y<span style=\"color: #666666\">});</span>\n    <span style=\"color: #666666\">}</span>\n    <span style=\"color: #AA22FF\">@Override</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">equals</span><span style=\"color: #666666\">(</span>Object other<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>other <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>other <span style=\"color: #666666\">==</span> <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!(</span>other <span style=\"color: #008000; font-weight: bold\">instanceof</span> Point2<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        <span style=\"color: #666666\">}</span>\n        Point2 point <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">(</span>Point2<span style=\"color: #666666\">)</span> other<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">==</span> x <span style=\"color: #666666\">&amp;&amp;</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">==</span> y<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> X <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">-1</span> <span style=\"color: #666666\">};</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">int</span><span style=\"color: #666666\">[]</span> Y <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">{</span> <span style=\"color: #666666\">1,</span> <span style=\"color: #666666\">-1,</span> <span style=\"color: #666666\">0,</span> <span style=\"color: #666666\">0</span> <span style=\"color: #666666\">};</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">int</span> <span style=\"color: #0000FF\">minStep</span><span style=\"color: #666666\">(</span>Point2 start<span style=\"color: #666666\">,</span> Point2 end<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> blocks<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        Set<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> visited <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;&gt;();</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> explore <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">int</span> step <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span>\n        explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            step<span style=\"color: #666666\">++;</span>\n            <span style=\"color: #B00040\">int</span> size <span style=\"color: #666666\">=</span> explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">size</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> i <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> i <span style=\"color: #666666\">&lt;</span> size<span style=\"color: #666666\">;</span> i<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                Point2 point <span style=\"color: #666666\">=</span> explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n                <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #B00040\">int</span> nextX <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> X<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                    <span style=\"color: #B00040\">int</span> nextY <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">+</span> Y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                    Point2 next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>nextX<span style=\"color: #666666\">,</span> nextY<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        <span style=\"color: #008000; font-weight: bold\">return</span> step<span style=\"color: #666666\">;</span>\n                    <span style=\"color: #666666\">}</span>\n                    <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                        explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                        visited<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">);</span>\n                    <span style=\"color: #666666\">}</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #666666\">-1;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> List<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">minPath</span><span style=\"color: #666666\">(</span>Point2 start<span style=\"color: #666666\">,</span> Point2 end<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> blocks<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        HashMap<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">,</span> Point2<span style=\"color: #666666\">&gt;</span> visitedToLast <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashMap<span style=\"color: #666666\">&lt;&gt;();</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> explore <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> LinkedList<span style=\"color: #666666\">&lt;&gt;();</span>\n        List<span style=\"color: #666666\">&lt;</span>Point2<span style=\"color: #666666\">&gt;</span> path <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> ArrayList<span style=\"color: #666666\">&lt;&gt;();</span>\n        <span style=\"color: #B00040\">boolean</span> isFound <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n        explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">offer</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">);</span>\n        visitedToLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>start<span style=\"color: #666666\">,</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">);</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>isFound<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            Point2 point <span style=\"color: #666666\">=</span> explore<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">poll</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span><span style=\"color: #B00040\">int</span> k <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0;</span> k <span style=\"color: #666666\">&lt;</span> <span style=\"color: #666666\">4;</span> k<span style=\"color: #666666\">++)</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #B00040\">int</span> nextX <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">x</span> <span style=\"color: #666666\">+</span> X<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                <span style=\"color: #B00040\">int</span> nextY <span style=\"color: #666666\">=</span> point<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">y</span> <span style=\"color: #666666\">+</span> Y<span style=\"color: #666666\">[</span>k<span style=\"color: #666666\">];</span>\n                Point2 next <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Point2<span style=\"color: #666666\">(</span>nextX<span style=\"color: #666666\">,</span> nextY<span style=\"color: #666666\">);</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>visitedToLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">containsKey</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>blocks<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    visitedToLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">put</span><span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">,</span> point<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">equals</span><span style=\"color: #666666\">(</span>end<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    isFound <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                    <span style=\"color: #408080; font-style: italic\">// visitedToLast.put(end, next);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        Point2 mover <span style=\"color: #666666\">=</span> end<span style=\"color: #666666\">;</span>\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(</span>mover <span style=\"color: #666666\">!=</span> <span style=\"color: #008000; font-weight: bold\">null</span><span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n            path<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(0,</span> mover<span style=\"color: #666666\">);</span>\n            mover <span style=\"color: #666666\">=</span> visitedToLast<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">get</span><span style=\"color: #666666\">(</span>mover<span style=\"color: #666666\">);</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> path<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    },
    {
        "ID": 439,
        "NUMBER": 11013,
        "TITLE": "Bidirectional Search",
        "DIFFICULTY": "Medium",
        "DESCRIPTION": "<p>Bidirectional search is a graph search algorithm which find smallest path form source to goal vertex.\n    It runs two simultaneous search – </p>\n\n<ol>\n    <li>Forward search form source/initial vertex toward goal vertex</li>\n    <li>Backward search form goal/target vertex toward source vertex</li>\n</ol>\n\n<p>Bidirectional search replaces single search graph(which is likely to grow exponentially)\n    with two smaller sub graphs – one starting from initial vertex and other starting from goal vertex.\n    <strong>The search terminates when two graphs intersect.</strong></p>\n\n<p align=\"center\"><strong>Why bidirectional approach?</strong></p>\n\n<p>\"In traditional breadth-first search, we would search up to k nodes in the first \"level\" of the search.\n    In the second level, we would search up to k nodes for each of those first k nodes,\n    so k^2 nodes total (thus far). We would do this d times, so that's O(k^d) nodes.</p>\n\n<p>\"In bidirectional search, we have two searches that collide after approximately d/2 levels\n    ( the midpoint of the path). The search from s visits approximately k^(d/2), as does the search from t.\n    That's approximately 2k^(d/2), or O(k^(d/2)), nodes total.\"</p>",
        "SOLUTION": "<!DOCTYPE html><html><body><table class=\"highlighttable\"><tr><td><div class=\"linenodiv\" style=\"background-color: #f0f0f0; padding-right: 10px\"><pre style=\"line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Node</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> T data<span style=\"color: #666666\">;</span>\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">final</span> Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> adjacent <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> <span style=\"color: #0000FF\">getAdjacent</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> adjacent<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #0000FF\">Node</span><span style=\"color: #666666\">(</span>T data<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">this</span><span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">data</span> <span style=\"color: #666666\">=</span> data<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">public</span> T <span style=\"color: #0000FF\">getData</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> data<span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// returns if the node was added, false if already there</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">addAdjacent</span><span style=\"color: #666666\">(</span>Node node<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> adjacent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>node<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #408080; font-style: italic\">// returns true if any were added</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">addAdjacents</span><span style=\"color: #666666\">(</span>Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> nodes<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> adjacent<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">addAll</span><span style=\"color: #666666\">(</span>nodes<span style=\"color: #666666\">);</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n\n<span style=\"color: #008000; font-weight: bold\">class</span> <span style=\"color: #0000FF; font-weight: bold\">Solution</span> <span style=\"color: #666666\">{</span>\n    <span style=\"color: #008000; font-weight: bold\">public</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">pathExistsBidirectional</span><span style=\"color: #666666\">(</span>Node a<span style=\"color: #666666\">,</span> Node b<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #408080; font-style: italic\">// BFS on both nodes at the same time</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> queueA <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Queue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n        Queue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> queueB <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> Queue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n        Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> visitedA <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n        Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> visitedB <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">new</span> HashSet<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;();</span>\n\n        visitedA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">);</span>\n        visitedB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">);</span>\n        queueA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>a<span style=\"color: #666666\">);</span>\n        queueB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>b<span style=\"color: #666666\">);</span>\n\n        <span style=\"color: #008000; font-weight: bold\">while</span> <span style=\"color: #666666\">(!</span>queueA<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">()</span> <span style=\"color: #666666\">&amp;&amp;</span> <span style=\"color: #666666\">!</span>queueB<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pathExistsBidirectionalHelper<span style=\"color: #666666\">(</span>queueA<span style=\"color: #666666\">,</span> visitedA<span style=\"color: #666666\">,</span> visitedB<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n            <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>pathExistsBidirectionalHelper<span style=\"color: #666666\">(</span>queueB<span style=\"color: #666666\">,</span> visitedB<span style=\"color: #666666\">,</span> visitedA<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n\n    <span style=\"color: #008000; font-weight: bold\">private</span> <span style=\"color: #008000; font-weight: bold\">static</span> <span style=\"color: #B00040\">boolean</span> <span style=\"color: #0000FF\">pathExistsBidirectionalHelper</span><span style=\"color: #666666\">(</span>Queue<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> queue<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> visitedFromThisSide<span style=\"color: #666666\">,</span> Set<span style=\"color: #666666\">&lt;</span>Node<span style=\"color: #666666\">&gt;</span> visitedFromThatSide<span style=\"color: #666666\">)</span> <span style=\"color: #666666\">{</span>\n        <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(!</span>queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">isEmpty</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n            Node next <span style=\"color: #666666\">=</span> queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">remove</span><span style=\"color: #666666\">();</span>\n            <span style=\"color: #008000; font-weight: bold\">for</span> <span style=\"color: #666666\">(</span>Node adjacent <span style=\"color: #666666\">:</span> next<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">getAdjacent</span><span style=\"color: #666666\">())</span> <span style=\"color: #666666\">{</span>\n                <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>visitedFromThatSide<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">contains</span><span style=\"color: #666666\">(</span>adjacent<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">true</span><span style=\"color: #666666\">;</span>\n                <span style=\"color: #666666\">}</span> <span style=\"color: #008000; font-weight: bold\">else</span> <span style=\"color: #008000; font-weight: bold\">if</span> <span style=\"color: #666666\">(</span>visitedFromThisSide<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>adjacent<span style=\"color: #666666\">))</span> <span style=\"color: #666666\">{</span>\n                    queue<span style=\"color: #666666\">.</span><span style=\"color: #7D9029\">add</span><span style=\"color: #666666\">(</span>adjacent<span style=\"color: #666666\">);</span>\n                <span style=\"color: #666666\">}</span>\n            <span style=\"color: #666666\">}</span>\n        <span style=\"color: #666666\">}</span>\n        <span style=\"color: #008000; font-weight: bold\">return</span> <span style=\"color: #008000; font-weight: bold\">false</span><span style=\"color: #666666\">;</span>\n    <span style=\"color: #666666\">}</span>\n<span style=\"color: #666666\">}</span>\n</pre></div>\n</td></tr></table></body></html>",
        "TAGS": "19",
        "COMPANIES": "",
        "SPECIALTAGS": "1"
    }
]